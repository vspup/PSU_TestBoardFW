
PSU_TestBoardFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f0c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08003fc4  08003fc4  00013fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004164  08004164  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004164  08004164  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004164  08004164  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004164  08004164  00014164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004168  08004168  00014168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800416c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  2000000c  08004178  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08004178  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f421  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002235  00000000  00000000  0002f455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  00031690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa0  00000000  00000000  000321e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f17  00000000  00000000  00032c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f32e  00000000  00000000  00047b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000833e2  00000000  00000000  00056ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da2a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002824  00000000  00000000  000da2f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003fac 	.word	0x08003fac

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08003fac 	.word	0x08003fac

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <HAL_UART_RxCpltCallback>:
#define NUM_CMD    2

const char listCMD[NUM_CMD][8] = {"PowerON", "PowerOFF"};

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a27      	ldr	r2, [pc, #156]	; (8000498 <HAL_UART_RxCpltCallback+0xac>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d147      	bne.n	800048e <HAL_UART_RxCpltCallback+0xa2>
	{
		if (rxByteCMD == 0x0A)
 80003fe:	4b27      	ldr	r3, [pc, #156]	; (800049c <HAL_UART_RxCpltCallback+0xb0>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b0a      	cmp	r3, #10
 8000404:	d129      	bne.n	800045a <HAL_UART_RxCpltCallback+0x6e>
		{
			for (i = 0; i < NUM_CMD; i++)
 8000406:	4b26      	ldr	r3, [pc, #152]	; (80004a0 <HAL_UART_RxCpltCallback+0xb4>)
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	e010      	b.n	8000430 <HAL_UART_RxCpltCallback+0x44>
			{
				if (strstr((char*) &UART_Data.rxBuff[0], (char*) &listCMD[i][0])!= 0)
 800040e:	4b24      	ldr	r3, [pc, #144]	; (80004a0 <HAL_UART_RxCpltCallback+0xb4>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	00da      	lsls	r2, r3, #3
 8000414:	4b23      	ldr	r3, [pc, #140]	; (80004a4 <HAL_UART_RxCpltCallback+0xb8>)
 8000416:	18d2      	adds	r2, r2, r3
 8000418:	4b23      	ldr	r3, [pc, #140]	; (80004a8 <HAL_UART_RxCpltCallback+0xbc>)
 800041a:	0011      	movs	r1, r2
 800041c:	0018      	movs	r0, r3
 800041e:	f003 fdaf 	bl	8003f80 <strstr>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d109      	bne.n	800043a <HAL_UART_RxCpltCallback+0x4e>
			for (i = 0; i < NUM_CMD; i++)
 8000426:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <HAL_UART_RxCpltCallback+0xb4>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	1c5a      	adds	r2, r3, #1
 800042c:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <HAL_UART_RxCpltCallback+0xb4>)
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	4b1b      	ldr	r3, [pc, #108]	; (80004a0 <HAL_UART_RxCpltCallback+0xb4>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	2b01      	cmp	r3, #1
 8000436:	ddea      	ble.n	800040e <HAL_UART_RxCpltCallback+0x22>
 8000438:	e000      	b.n	800043c <HAL_UART_RxCpltCallback+0x50>
				{
					break;
 800043a:	46c0      	nop			; (mov r8, r8)
				}
			}
			numCMD = i + 1;
 800043c:	4b18      	ldr	r3, [pc, #96]	; (80004a0 <HAL_UART_RxCpltCallback+0xb4>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	b2db      	uxtb	r3, r3
 8000442:	3301      	adds	r3, #1
 8000444:	b2da      	uxtb	r2, r3
 8000446:	4b19      	ldr	r3, [pc, #100]	; (80004ac <HAL_UART_RxCpltCallback+0xc0>)
 8000448:	701a      	strb	r2, [r3, #0]
			memset((char*) &UART_Data, 0x00, sizeof(UART_Data));
 800044a:	2381      	movs	r3, #129	; 0x81
 800044c:	005a      	lsls	r2, r3, #1
 800044e:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <HAL_UART_RxCpltCallback+0xc4>)
 8000450:	2100      	movs	r1, #0
 8000452:	0018      	movs	r0, r3
 8000454:	f003 fd8c 	bl	8003f70 <memset>
 8000458:	e013      	b.n	8000482 <HAL_UART_RxCpltCallback+0x96>
		}
		else
		{
			UART_Data.rxBuff[UART_Data.rxCntBuff] = rxByteCMD;
 800045a:	4a15      	ldr	r2, [pc, #84]	; (80004b0 <HAL_UART_RxCpltCallback+0xc4>)
 800045c:	2302      	movs	r3, #2
 800045e:	33ff      	adds	r3, #255	; 0xff
 8000460:	5cd3      	ldrb	r3, [r2, r3]
 8000462:	0019      	movs	r1, r3
 8000464:	4b0d      	ldr	r3, [pc, #52]	; (800049c <HAL_UART_RxCpltCallback+0xb0>)
 8000466:	781a      	ldrb	r2, [r3, #0]
 8000468:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <HAL_UART_RxCpltCallback+0xc4>)
 800046a:	185b      	adds	r3, r3, r1
 800046c:	705a      	strb	r2, [r3, #1]
			UART_Data.rxCntBuff++;
 800046e:	4a10      	ldr	r2, [pc, #64]	; (80004b0 <HAL_UART_RxCpltCallback+0xc4>)
 8000470:	2302      	movs	r3, #2
 8000472:	33ff      	adds	r3, #255	; 0xff
 8000474:	5cd3      	ldrb	r3, [r2, r3]
 8000476:	3301      	adds	r3, #1
 8000478:	b2d9      	uxtb	r1, r3
 800047a:	4a0d      	ldr	r2, [pc, #52]	; (80004b0 <HAL_UART_RxCpltCallback+0xc4>)
 800047c:	2302      	movs	r3, #2
 800047e:	33ff      	adds	r3, #255	; 0xff
 8000480:	54d1      	strb	r1, [r2, r3]
		}
		HAL_UART_Receive_IT(&huart1,  &rxByteCMD, 1);
 8000482:	4906      	ldr	r1, [pc, #24]	; (800049c <HAL_UART_RxCpltCallback+0xb0>)
 8000484:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <HAL_UART_RxCpltCallback+0xc8>)
 8000486:	2201      	movs	r2, #1
 8000488:	0018      	movs	r0, r3
 800048a:	f001 fee5 	bl	8002258 <HAL_UART_Receive_IT>

	}
}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	b002      	add	sp, #8
 8000494:	bd80      	pop	{r7, pc}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	40013800 	.word	0x40013800
 800049c:	20000212 	.word	0x20000212
 80004a0:	20000214 	.word	0x20000214
 80004a4:	080040cc 	.word	0x080040cc
 80004a8:	20000111 	.word	0x20000111
 80004ac:	20000213 	.word	0x20000213
 80004b0:	20000110 	.word	0x20000110
 80004b4:	2000007c 	.word	0x2000007c

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fa9c 	bl	80009f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f836 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f90a 	bl	80006dc <MX_GPIO_Init>
  MX_I2C1_Init();
 80004c8:	f000 f87a 	bl	80005c0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80004cc:	f000 f8b8 	bl	8000640 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1, (uint8_t*) "Start PSU Test Board\n", sizeof("Start PSU Test Board\n"), 100);
 80004d0:	4912      	ldr	r1, [pc, #72]	; (800051c <main+0x64>)
 80004d2:	4813      	ldr	r0, [pc, #76]	; (8000520 <main+0x68>)
 80004d4:	2364      	movs	r3, #100	; 0x64
 80004d6:	2216      	movs	r2, #22
 80004d8:	f001 fe22 	bl	8002120 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1, &rxByteCMD, 1);
 80004dc:	4911      	ldr	r1, [pc, #68]	; (8000524 <main+0x6c>)
 80004de:	4b10      	ldr	r3, [pc, #64]	; (8000520 <main+0x68>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	0018      	movs	r0, r3
 80004e4:	f001 feb8 	bl	8002258 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOB, BCM_EN0_Pin|BCM_EN1_Pin, GPIO_PIN_RESET);
 80004e8:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <main+0x70>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	2103      	movs	r1, #3
 80004ee:	0018      	movs	r0, r3
 80004f0:	f000 fe3a 	bl	8001168 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80004f4:	2064      	movs	r0, #100	; 0x64
 80004f6:	f000 fb05 	bl	8000b04 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, BCM_EN0_Pin|BCM_EN1_Pin, GPIO_PIN_SET);
 80004fa:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <main+0x70>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	2103      	movs	r1, #3
 8000500:	0018      	movs	r0, r3
 8000502:	f000 fe31 	bl	8001168 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8000506:	20c8      	movs	r0, #200	; 0xc8
 8000508:	f000 fafc 	bl	8000b04 <HAL_Delay>

	  if (numCMD != 0)
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <main+0x74>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d0e9      	beq.n	80004e8 <main+0x30>
			}
			else
			{
				//MultisensorHandler(numCMD);
			}
			numCMD = 0;
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <main+0x74>)
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOB, BCM_EN0_Pin|BCM_EN1_Pin, GPIO_PIN_RESET);
 800051a:	e7e5      	b.n	80004e8 <main+0x30>
 800051c:	080040b4 	.word	0x080040b4
 8000520:	2000007c 	.word	0x2000007c
 8000524:	20000212 	.word	0x20000212
 8000528:	50000400 	.word	0x50000400
 800052c:	20000213 	.word	0x20000213

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b093      	sub	sp, #76	; 0x4c
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	2414      	movs	r4, #20
 8000538:	193b      	adds	r3, r7, r4
 800053a:	0018      	movs	r0, r3
 800053c:	2334      	movs	r3, #52	; 0x34
 800053e:	001a      	movs	r2, r3
 8000540:	2100      	movs	r1, #0
 8000542:	f003 fd15 	bl	8003f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	0018      	movs	r0, r3
 800054a:	2310      	movs	r3, #16
 800054c:	001a      	movs	r2, r3
 800054e:	2100      	movs	r1, #0
 8000550:	f003 fd0e 	bl	8003f70 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	0018      	movs	r0, r3
 800055a:	f000 ff51 	bl	8001400 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055e:	193b      	adds	r3, r7, r4
 8000560:	2202      	movs	r2, #2
 8000562:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000564:	193b      	adds	r3, r7, r4
 8000566:	2280      	movs	r2, #128	; 0x80
 8000568:	0052      	lsls	r2, r2, #1
 800056a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800056c:	193b      	adds	r3, r7, r4
 800056e:	2200      	movs	r2, #0
 8000570:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000572:	193b      	adds	r3, r7, r4
 8000574:	2240      	movs	r2, #64	; 0x40
 8000576:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000578:	193b      	adds	r3, r7, r4
 800057a:	2200      	movs	r2, #0
 800057c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	193b      	adds	r3, r7, r4
 8000580:	0018      	movs	r0, r3
 8000582:	f000 ff89 	bl	8001498 <HAL_RCC_OscConfig>
 8000586:	1e03      	subs	r3, r0, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800058a:	f000 f8eb 	bl	8000764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2207      	movs	r2, #7
 8000592:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2100      	movs	r1, #0
 80005aa:	0018      	movs	r0, r3
 80005ac:	f001 fa84 	bl	8001ab8 <HAL_RCC_ClockConfig>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80005b4:	f000 f8d6 	bl	8000764 <Error_Handler>
  }
}
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	b013      	add	sp, #76	; 0x4c
 80005be:	bd90      	pop	{r4, r7, pc}

080005c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c4:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <MX_I2C1_Init+0x74>)
 80005c6:	4a1c      	ldr	r2, [pc, #112]	; (8000638 <MX_I2C1_Init+0x78>)
 80005c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <MX_I2C1_Init+0x74>)
 80005cc:	4a1b      	ldr	r2, [pc, #108]	; (800063c <MX_I2C1_Init+0x7c>)
 80005ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <MX_I2C1_Init+0x74>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <MX_I2C1_Init+0x74>)
 80005d8:	2201      	movs	r2, #1
 80005da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005dc:	4b15      	ldr	r3, [pc, #84]	; (8000634 <MX_I2C1_Init+0x74>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_I2C1_Init+0x74>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MX_I2C1_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_I2C1_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_I2C1_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_I2C1_Init+0x74>)
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 fdd1 	bl	80011a4 <HAL_I2C_Init>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000606:	f000 f8ad 	bl	8000764 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <MX_I2C1_Init+0x74>)
 800060c:	2100      	movs	r1, #0
 800060e:	0018      	movs	r0, r3
 8000610:	f000 fe5e 	bl	80012d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000614:	1e03      	subs	r3, r0, #0
 8000616:	d001      	beq.n	800061c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000618:	f000 f8a4 	bl	8000764 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <MX_I2C1_Init+0x74>)
 800061e:	2100      	movs	r1, #0
 8000620:	0018      	movs	r0, r3
 8000622:	f000 fea1 	bl	8001368 <HAL_I2CEx_ConfigDigitalFilter>
 8000626:	1e03      	subs	r3, r0, #0
 8000628:	d001      	beq.n	800062e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800062a:	f000 f89b 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000028 	.word	0x20000028
 8000638:	40005400 	.word	0x40005400
 800063c:	00303d5b 	.word	0x00303d5b

08000640 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <MX_USART1_UART_Init+0x94>)
 8000646:	4a24      	ldr	r2, [pc, #144]	; (80006d8 <MX_USART1_UART_Init+0x98>)
 8000648:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800064a:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <MX_USART1_UART_Init+0x94>)
 800064c:	22e1      	movs	r2, #225	; 0xe1
 800064e:	0252      	lsls	r2, r2, #9
 8000650:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <MX_USART1_UART_Init+0x94>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <MX_USART1_UART_Init+0x94>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800065e:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <MX_USART1_UART_Init+0x94>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_USART1_UART_Init+0x94>)
 8000666:	220c      	movs	r2, #12
 8000668:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066a:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_USART1_UART_Init+0x94>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000670:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <MX_USART1_UART_Init+0x94>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <MX_USART1_UART_Init+0x94>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <MX_USART1_UART_Init+0x94>)
 800067e:	2200      	movs	r2, #0
 8000680:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_USART1_UART_Init+0x94>)
 8000684:	2200      	movs	r2, #0
 8000686:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_USART1_UART_Init+0x94>)
 800068a:	0018      	movs	r0, r3
 800068c:	f001 fcf2 	bl	8002074 <HAL_UART_Init>
 8000690:	1e03      	subs	r3, r0, #0
 8000692:	d001      	beq.n	8000698 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000694:	f000 f866 	bl	8000764 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000698:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_USART1_UART_Init+0x94>)
 800069a:	2100      	movs	r1, #0
 800069c:	0018      	movs	r0, r3
 800069e:	f003 fb63 	bl	8003d68 <HAL_UARTEx_SetTxFifoThreshold>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006a6:	f000 f85d 	bl	8000764 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006aa:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <MX_USART1_UART_Init+0x94>)
 80006ac:	2100      	movs	r1, #0
 80006ae:	0018      	movs	r0, r3
 80006b0:	f003 fb9a 	bl	8003de8 <HAL_UARTEx_SetRxFifoThreshold>
 80006b4:	1e03      	subs	r3, r0, #0
 80006b6:	d001      	beq.n	80006bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006b8:	f000 f854 	bl	8000764 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <MX_USART1_UART_Init+0x94>)
 80006be:	0018      	movs	r0, r3
 80006c0:	f003 fb18 	bl	8003cf4 <HAL_UARTEx_DisableFifoMode>
 80006c4:	1e03      	subs	r3, r0, #0
 80006c6:	d001      	beq.n	80006cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006c8:	f000 f84c 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	2000007c 	.word	0x2000007c
 80006d8:	40013800 	.word	0x40013800

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b089      	sub	sp, #36	; 0x24
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	240c      	movs	r4, #12
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	0018      	movs	r0, r3
 80006e8:	2314      	movs	r3, #20
 80006ea:	001a      	movs	r2, r3
 80006ec:	2100      	movs	r1, #0
 80006ee:	f003 fc3f 	bl	8003f70 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	4b1a      	ldr	r3, [pc, #104]	; (800075c <MX_GPIO_Init+0x80>)
 80006f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006f6:	4b19      	ldr	r3, [pc, #100]	; (800075c <MX_GPIO_Init+0x80>)
 80006f8:	2102      	movs	r1, #2
 80006fa:	430a      	orrs	r2, r1
 80006fc:	635a      	str	r2, [r3, #52]	; 0x34
 80006fe:	4b17      	ldr	r3, [pc, #92]	; (800075c <MX_GPIO_Init+0x80>)
 8000700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000702:	2202      	movs	r2, #2
 8000704:	4013      	ands	r3, r2
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_GPIO_Init+0x80>)
 800070c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_GPIO_Init+0x80>)
 8000710:	2101      	movs	r1, #1
 8000712:	430a      	orrs	r2, r1
 8000714:	635a      	str	r2, [r3, #52]	; 0x34
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_GPIO_Init+0x80>)
 8000718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800071a:	2201      	movs	r2, #1
 800071c:	4013      	ands	r3, r2
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BCM_EN0_Pin|BCM_EN1_Pin, GPIO_PIN_RESET);
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_GPIO_Init+0x84>)
 8000724:	2200      	movs	r2, #0
 8000726:	2103      	movs	r1, #3
 8000728:	0018      	movs	r0, r3
 800072a:	f000 fd1d 	bl	8001168 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BCM_EN0_Pin BCM_EN1_Pin */
  GPIO_InitStruct.Pin = BCM_EN0_Pin|BCM_EN1_Pin;
 800072e:	0021      	movs	r1, r4
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2203      	movs	r2, #3
 8000734:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2201      	movs	r2, #1
 800073a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000748:	187b      	adds	r3, r7, r1
 800074a:	4a05      	ldr	r2, [pc, #20]	; (8000760 <MX_GPIO_Init+0x84>)
 800074c:	0019      	movs	r1, r3
 800074e:	0010      	movs	r0, r2
 8000750:	f000 fba6 	bl	8000ea0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000754:	46c0      	nop			; (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	b009      	add	sp, #36	; 0x24
 800075a:	bd90      	pop	{r4, r7, pc}
 800075c:	40021000 	.word	0x40021000
 8000760:	50000400 	.word	0x50000400

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
}
 800076a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076c:	e7fe      	b.n	800076c <Error_Handler+0x8>
	...

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <HAL_MspInit+0x44>)
 8000778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <HAL_MspInit+0x44>)
 800077c:	2101      	movs	r1, #1
 800077e:	430a      	orrs	r2, r1
 8000780:	641a      	str	r2, [r3, #64]	; 0x40
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <HAL_MspInit+0x44>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000786:	2201      	movs	r2, #1
 8000788:	4013      	ands	r3, r2
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <HAL_MspInit+0x44>)
 8000790:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <HAL_MspInit+0x44>)
 8000794:	2180      	movs	r1, #128	; 0x80
 8000796:	0549      	lsls	r1, r1, #21
 8000798:	430a      	orrs	r2, r1
 800079a:	63da      	str	r2, [r3, #60]	; 0x3c
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <HAL_MspInit+0x44>)
 800079e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007a0:	2380      	movs	r3, #128	; 0x80
 80007a2:	055b      	lsls	r3, r3, #21
 80007a4:	4013      	ands	r3, r2
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b002      	add	sp, #8
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	40021000 	.word	0x40021000

080007b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007b8:	b590      	push	{r4, r7, lr}
 80007ba:	b091      	sub	sp, #68	; 0x44
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	232c      	movs	r3, #44	; 0x2c
 80007c2:	18fb      	adds	r3, r7, r3
 80007c4:	0018      	movs	r0, r3
 80007c6:	2314      	movs	r3, #20
 80007c8:	001a      	movs	r2, r3
 80007ca:	2100      	movs	r1, #0
 80007cc:	f003 fbd0 	bl	8003f70 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d0:	2410      	movs	r4, #16
 80007d2:	193b      	adds	r3, r7, r4
 80007d4:	0018      	movs	r0, r3
 80007d6:	231c      	movs	r3, #28
 80007d8:	001a      	movs	r2, r3
 80007da:	2100      	movs	r1, #0
 80007dc:	f003 fbc8 	bl	8003f70 <memset>
  if(hi2c->Instance==I2C1)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a22      	ldr	r2, [pc, #136]	; (8000870 <HAL_I2C_MspInit+0xb8>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d13e      	bne.n	8000868 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	2220      	movs	r2, #32
 80007ee:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	0018      	movs	r0, r3
 80007fa:	f001 fb07 	bl	8001e0c <HAL_RCCEx_PeriphCLKConfig>
 80007fe:	1e03      	subs	r3, r0, #0
 8000800:	d001      	beq.n	8000806 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000802:	f7ff ffaf 	bl	8000764 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <HAL_I2C_MspInit+0xbc>)
 8000808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <HAL_I2C_MspInit+0xbc>)
 800080c:	2102      	movs	r1, #2
 800080e:	430a      	orrs	r2, r1
 8000810:	635a      	str	r2, [r3, #52]	; 0x34
 8000812:	4b18      	ldr	r3, [pc, #96]	; (8000874 <HAL_I2C_MspInit+0xbc>)
 8000814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000816:	2202      	movs	r2, #2
 8000818:	4013      	ands	r3, r2
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800081e:	212c      	movs	r1, #44	; 0x2c
 8000820:	187b      	adds	r3, r7, r1
 8000822:	22c0      	movs	r2, #192	; 0xc0
 8000824:	0052      	lsls	r2, r2, #1
 8000826:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2212      	movs	r2, #18
 800082c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2206      	movs	r2, #6
 800083e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000840:	187b      	adds	r3, r7, r1
 8000842:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <HAL_I2C_MspInit+0xc0>)
 8000844:	0019      	movs	r1, r3
 8000846:	0010      	movs	r0, r2
 8000848:	f000 fb2a 	bl	8000ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <HAL_I2C_MspInit+0xbc>)
 800084e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <HAL_I2C_MspInit+0xbc>)
 8000852:	2180      	movs	r1, #128	; 0x80
 8000854:	0389      	lsls	r1, r1, #14
 8000856:	430a      	orrs	r2, r1
 8000858:	63da      	str	r2, [r3, #60]	; 0x3c
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_I2C_MspInit+0xbc>)
 800085c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800085e:	2380      	movs	r3, #128	; 0x80
 8000860:	039b      	lsls	r3, r3, #14
 8000862:	4013      	ands	r3, r2
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	b011      	add	sp, #68	; 0x44
 800086e:	bd90      	pop	{r4, r7, pc}
 8000870:	40005400 	.word	0x40005400
 8000874:	40021000 	.word	0x40021000
 8000878:	50000400 	.word	0x50000400

0800087c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b091      	sub	sp, #68	; 0x44
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	232c      	movs	r3, #44	; 0x2c
 8000886:	18fb      	adds	r3, r7, r3
 8000888:	0018      	movs	r0, r3
 800088a:	2314      	movs	r3, #20
 800088c:	001a      	movs	r2, r3
 800088e:	2100      	movs	r1, #0
 8000890:	f003 fb6e 	bl	8003f70 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000894:	2410      	movs	r4, #16
 8000896:	193b      	adds	r3, r7, r4
 8000898:	0018      	movs	r0, r3
 800089a:	231c      	movs	r3, #28
 800089c:	001a      	movs	r2, r3
 800089e:	2100      	movs	r1, #0
 80008a0:	f003 fb66 	bl	8003f70 <memset>
  if(huart->Instance==USART1)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a27      	ldr	r2, [pc, #156]	; (8000948 <HAL_UART_MspInit+0xcc>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d147      	bne.n	800093e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008ae:	193b      	adds	r3, r7, r4
 80008b0:	2201      	movs	r2, #1
 80008b2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	2200      	movs	r2, #0
 80008b8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	0018      	movs	r0, r3
 80008be:	f001 faa5 	bl	8001e0c <HAL_RCCEx_PeriphCLKConfig>
 80008c2:	1e03      	subs	r3, r0, #0
 80008c4:	d001      	beq.n	80008ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80008c6:	f7ff ff4d 	bl	8000764 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008ca:	4b20      	ldr	r3, [pc, #128]	; (800094c <HAL_UART_MspInit+0xd0>)
 80008cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008ce:	4b1f      	ldr	r3, [pc, #124]	; (800094c <HAL_UART_MspInit+0xd0>)
 80008d0:	2180      	movs	r1, #128	; 0x80
 80008d2:	01c9      	lsls	r1, r1, #7
 80008d4:	430a      	orrs	r2, r1
 80008d6:	641a      	str	r2, [r3, #64]	; 0x40
 80008d8:	4b1c      	ldr	r3, [pc, #112]	; (800094c <HAL_UART_MspInit+0xd0>)
 80008da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	01db      	lsls	r3, r3, #7
 80008e0:	4013      	ands	r3, r2
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <HAL_UART_MspInit+0xd0>)
 80008e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <HAL_UART_MspInit+0xd0>)
 80008ec:	2101      	movs	r1, #1
 80008ee:	430a      	orrs	r2, r1
 80008f0:	635a      	str	r2, [r3, #52]	; 0x34
 80008f2:	4b16      	ldr	r3, [pc, #88]	; (800094c <HAL_UART_MspInit+0xd0>)
 80008f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008f6:	2201      	movs	r2, #1
 80008f8:	4013      	ands	r3, r2
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008fe:	212c      	movs	r1, #44	; 0x2c
 8000900:	187b      	adds	r3, r7, r1
 8000902:	22c0      	movs	r2, #192	; 0xc0
 8000904:	00d2      	lsls	r2, r2, #3
 8000906:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2202      	movs	r2, #2
 800090c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2201      	movs	r2, #1
 800091e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	187a      	adds	r2, r7, r1
 8000922:	23a0      	movs	r3, #160	; 0xa0
 8000924:	05db      	lsls	r3, r3, #23
 8000926:	0011      	movs	r1, r2
 8000928:	0018      	movs	r0, r3
 800092a:	f000 fab9 	bl	8000ea0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	201b      	movs	r0, #27
 8000934:	f000 f9b6 	bl	8000ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000938:	201b      	movs	r0, #27
 800093a:	f000 f9c8 	bl	8000cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b011      	add	sp, #68	; 0x44
 8000944:	bd90      	pop	{r4, r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	40013800 	.word	0x40013800
 800094c:	40021000 	.word	0x40021000

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000974:	f000 f8aa 	bl	8000acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <USART1_IRQHandler+0x14>)
 8000986:	0018      	movs	r0, r3
 8000988:	f001 fcbe 	bl	8002308 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	2000007c 	.word	0x2000007c

08000998 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009a4:	480d      	ldr	r0, [pc, #52]	; (80009dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009a6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009a8:	f7ff fff6 	bl	8000998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ac:	480c      	ldr	r0, [pc, #48]	; (80009e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ae:	490d      	ldr	r1, [pc, #52]	; (80009e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b0:	4a0d      	ldr	r2, [pc, #52]	; (80009e8 <LoopForever+0xe>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b4:	e002      	b.n	80009bc <LoopCopyDataInit>

080009b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ba:	3304      	adds	r3, #4

080009bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c0:	d3f9      	bcc.n	80009b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c4:	4c0a      	ldr	r4, [pc, #40]	; (80009f0 <LoopForever+0x16>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c8:	e001      	b.n	80009ce <LoopFillZerobss>

080009ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009cc:	3204      	adds	r2, #4

080009ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d0:	d3fb      	bcc.n	80009ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009d2:	f003 faa9 	bl	8003f28 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80009d6:	f7ff fd6f 	bl	80004b8 <main>

080009da <LoopForever>:

LoopForever:
  b LoopForever
 80009da:	e7fe      	b.n	80009da <LoopForever>
  ldr   r0, =_estack
 80009dc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80009e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009e8:	0800416c 	.word	0x0800416c
  ldr r2, =_sbss
 80009ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009f0:	2000021c 	.word	0x2000021c

080009f4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f4:	e7fe      	b.n	80009f4 <ADC1_IRQHandler>
	...

080009f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <HAL_Init+0x3c>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <HAL_Init+0x3c>)
 8000a0a:	2180      	movs	r1, #128	; 0x80
 8000a0c:	0049      	lsls	r1, r1, #1
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a12:	2003      	movs	r0, #3
 8000a14:	f000 f810 	bl	8000a38 <HAL_InitTick>
 8000a18:	1e03      	subs	r3, r0, #0
 8000a1a:	d003      	beq.n	8000a24 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	2201      	movs	r2, #1
 8000a20:	701a      	strb	r2, [r3, #0]
 8000a22:	e001      	b.n	8000a28 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a24:	f7ff fea4 	bl	8000770 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a28:	1dfb      	adds	r3, r7, #7
 8000a2a:	781b      	ldrb	r3, [r3, #0]
}
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b002      	add	sp, #8
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40022000 	.word	0x40022000

08000a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a40:	230f      	movs	r3, #15
 8000a42:	18fb      	adds	r3, r7, r3
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000a48:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <HAL_InitTick+0x88>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d02b      	beq.n	8000aa8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000a50:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <HAL_InitTick+0x8c>)
 8000a52:	681c      	ldr	r4, [r3, #0]
 8000a54:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <HAL_InitTick+0x88>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	0019      	movs	r1, r3
 8000a5a:	23fa      	movs	r3, #250	; 0xfa
 8000a5c:	0098      	lsls	r0, r3, #2
 8000a5e:	f7ff fb4f 	bl	8000100 <__udivsi3>
 8000a62:	0003      	movs	r3, r0
 8000a64:	0019      	movs	r1, r3
 8000a66:	0020      	movs	r0, r4
 8000a68:	f7ff fb4a 	bl	8000100 <__udivsi3>
 8000a6c:	0003      	movs	r3, r0
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f000 f93d 	bl	8000cee <HAL_SYSTICK_Config>
 8000a74:	1e03      	subs	r3, r0, #0
 8000a76:	d112      	bne.n	8000a9e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b03      	cmp	r3, #3
 8000a7c:	d80a      	bhi.n	8000a94 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	2301      	movs	r3, #1
 8000a82:	425b      	negs	r3, r3
 8000a84:	2200      	movs	r2, #0
 8000a86:	0018      	movs	r0, r3
 8000a88:	f000 f90c 	bl	8000ca4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <HAL_InitTick+0x90>)
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	e00d      	b.n	8000ab0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a94:	230f      	movs	r3, #15
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	2201      	movs	r2, #1
 8000a9a:	701a      	strb	r2, [r3, #0]
 8000a9c:	e008      	b.n	8000ab0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	18fb      	adds	r3, r7, r3
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	701a      	strb	r2, [r3, #0]
 8000aa6:	e003      	b.n	8000ab0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aa8:	230f      	movs	r3, #15
 8000aaa:	18fb      	adds	r3, r7, r3
 8000aac:	2201      	movs	r2, #1
 8000aae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	18fb      	adds	r3, r7, r3
 8000ab4:	781b      	ldrb	r3, [r3, #0]
}
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b005      	add	sp, #20
 8000abc:	bd90      	pop	{r4, r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	20000004 	.word	0x20000004

08000acc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <HAL_IncTick+0x1c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	4b05      	ldr	r3, [pc, #20]	; (8000aec <HAL_IncTick+0x20>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	18d2      	adds	r2, r2, r3
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <HAL_IncTick+0x20>)
 8000ade:	601a      	str	r2, [r3, #0]
}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	20000218 	.word	0x20000218

08000af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  return uwTick;
 8000af4:	4b02      	ldr	r3, [pc, #8]	; (8000b00 <HAL_GetTick+0x10>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	0018      	movs	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	20000218 	.word	0x20000218

08000b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b0c:	f7ff fff0 	bl	8000af0 <HAL_GetTick>
 8000b10:	0003      	movs	r3, r0
 8000b12:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	d005      	beq.n	8000b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <HAL_Delay+0x44>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	001a      	movs	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	189b      	adds	r3, r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	f7ff ffe0 	bl	8000af0 <HAL_GetTick>
 8000b30:	0002      	movs	r2, r0
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d8f7      	bhi.n	8000b2c <HAL_Delay+0x28>
  {
  }
}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b004      	add	sp, #16
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	20000008 	.word	0x20000008

08000b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	0002      	movs	r2, r0
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b58:	1dfb      	adds	r3, r7, #7
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b7f      	cmp	r3, #127	; 0x7f
 8000b5e:	d809      	bhi.n	8000b74 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b60:	1dfb      	adds	r3, r7, #7
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	001a      	movs	r2, r3
 8000b66:	231f      	movs	r3, #31
 8000b68:	401a      	ands	r2, r3
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <__NVIC_EnableIRQ+0x30>)
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	4091      	lsls	r1, r2
 8000b70:	000a      	movs	r2, r1
 8000b72:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000b74:	46c0      	nop			; (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b002      	add	sp, #8
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	e000e100 	.word	0xe000e100

08000b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	0002      	movs	r2, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b7f      	cmp	r3, #127	; 0x7f
 8000b94:	d828      	bhi.n	8000be8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b96:	4a2f      	ldr	r2, [pc, #188]	; (8000c54 <__NVIC_SetPriority+0xd4>)
 8000b98:	1dfb      	adds	r3, r7, #7
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	b25b      	sxtb	r3, r3
 8000b9e:	089b      	lsrs	r3, r3, #2
 8000ba0:	33c0      	adds	r3, #192	; 0xc0
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	589b      	ldr	r3, [r3, r2]
 8000ba6:	1dfa      	adds	r2, r7, #7
 8000ba8:	7812      	ldrb	r2, [r2, #0]
 8000baa:	0011      	movs	r1, r2
 8000bac:	2203      	movs	r2, #3
 8000bae:	400a      	ands	r2, r1
 8000bb0:	00d2      	lsls	r2, r2, #3
 8000bb2:	21ff      	movs	r1, #255	; 0xff
 8000bb4:	4091      	lsls	r1, r2
 8000bb6:	000a      	movs	r2, r1
 8000bb8:	43d2      	mvns	r2, r2
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	019b      	lsls	r3, r3, #6
 8000bc2:	22ff      	movs	r2, #255	; 0xff
 8000bc4:	401a      	ands	r2, r3
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	0018      	movs	r0, r3
 8000bcc:	2303      	movs	r3, #3
 8000bce:	4003      	ands	r3, r0
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd4:	481f      	ldr	r0, [pc, #124]	; (8000c54 <__NVIC_SetPriority+0xd4>)
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b25b      	sxtb	r3, r3
 8000bdc:	089b      	lsrs	r3, r3, #2
 8000bde:	430a      	orrs	r2, r1
 8000be0:	33c0      	adds	r3, #192	; 0xc0
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000be6:	e031      	b.n	8000c4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be8:	4a1b      	ldr	r2, [pc, #108]	; (8000c58 <__NVIC_SetPriority+0xd8>)
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	0019      	movs	r1, r3
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	400b      	ands	r3, r1
 8000bf4:	3b08      	subs	r3, #8
 8000bf6:	089b      	lsrs	r3, r3, #2
 8000bf8:	3306      	adds	r3, #6
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	18d3      	adds	r3, r2, r3
 8000bfe:	3304      	adds	r3, #4
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	1dfa      	adds	r2, r7, #7
 8000c04:	7812      	ldrb	r2, [r2, #0]
 8000c06:	0011      	movs	r1, r2
 8000c08:	2203      	movs	r2, #3
 8000c0a:	400a      	ands	r2, r1
 8000c0c:	00d2      	lsls	r2, r2, #3
 8000c0e:	21ff      	movs	r1, #255	; 0xff
 8000c10:	4091      	lsls	r1, r2
 8000c12:	000a      	movs	r2, r1
 8000c14:	43d2      	mvns	r2, r2
 8000c16:	401a      	ands	r2, r3
 8000c18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	019b      	lsls	r3, r3, #6
 8000c1e:	22ff      	movs	r2, #255	; 0xff
 8000c20:	401a      	ands	r2, r3
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	0018      	movs	r0, r3
 8000c28:	2303      	movs	r3, #3
 8000c2a:	4003      	ands	r3, r0
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c30:	4809      	ldr	r0, [pc, #36]	; (8000c58 <__NVIC_SetPriority+0xd8>)
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	001c      	movs	r4, r3
 8000c38:	230f      	movs	r3, #15
 8000c3a:	4023      	ands	r3, r4
 8000c3c:	3b08      	subs	r3, #8
 8000c3e:	089b      	lsrs	r3, r3, #2
 8000c40:	430a      	orrs	r2, r1
 8000c42:	3306      	adds	r3, #6
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	18c3      	adds	r3, r0, r3
 8000c48:	3304      	adds	r3, #4
 8000c4a:	601a      	str	r2, [r3, #0]
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b003      	add	sp, #12
 8000c52:	bd90      	pop	{r4, r7, pc}
 8000c54:	e000e100 	.word	0xe000e100
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	1e5a      	subs	r2, r3, #1
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	045b      	lsls	r3, r3, #17
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d301      	bcc.n	8000c74 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c70:	2301      	movs	r3, #1
 8000c72:	e010      	b.n	8000c96 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c74:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <SysTick_Config+0x44>)
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	3a01      	subs	r2, #1
 8000c7a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	425b      	negs	r3, r3
 8000c80:	2103      	movs	r1, #3
 8000c82:	0018      	movs	r0, r3
 8000c84:	f7ff ff7c 	bl	8000b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <SysTick_Config+0x44>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <SysTick_Config+0x44>)
 8000c90:	2207      	movs	r2, #7
 8000c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	0018      	movs	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b002      	add	sp, #8
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	e000e010 	.word	0xe000e010

08000ca4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
 8000cae:	210f      	movs	r1, #15
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	1c02      	adds	r2, r0, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	b25b      	sxtb	r3, r3
 8000cbe:	0011      	movs	r1, r2
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f7ff ff5d 	bl	8000b80 <__NVIC_SetPriority>
}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b004      	add	sp, #16
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	0002      	movs	r2, r0
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	b25b      	sxtb	r3, r3
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f7ff ff33 	bl	8000b4c <__NVIC_EnableIRQ>
}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b002      	add	sp, #8
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f7ff ffaf 	bl	8000c5c <SysTick_Config>
 8000cfe:	0003      	movs	r3, r0
}
 8000d00:	0018      	movs	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b002      	add	sp, #8
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e050      	b.n	8000dbc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2225      	movs	r2, #37	; 0x25
 8000d1e:	5c9b      	ldrb	r3, [r3, r2]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d008      	beq.n	8000d38 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2204      	movs	r2, #4
 8000d2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2224      	movs	r2, #36	; 0x24
 8000d30:	2100      	movs	r1, #0
 8000d32:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e041      	b.n	8000dbc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	210e      	movs	r1, #14
 8000d44:	438a      	bics	r2, r1
 8000d46:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	491c      	ldr	r1, [pc, #112]	; (8000dc4 <HAL_DMA_Abort+0xbc>)
 8000d54:	400a      	ands	r2, r1
 8000d56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2101      	movs	r1, #1
 8000d64:	438a      	bics	r2, r1
 8000d66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <HAL_DMA_Abort+0xc0>)
 8000d6a:	6859      	ldr	r1, [r3, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	221c      	movs	r2, #28
 8000d72:	4013      	ands	r3, r2
 8000d74:	2201      	movs	r2, #1
 8000d76:	409a      	lsls	r2, r3
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <HAL_DMA_Abort+0xc0>)
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000d86:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d00c      	beq.n	8000daa <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d9a:	490a      	ldr	r1, [pc, #40]	; (8000dc4 <HAL_DMA_Abort+0xbc>)
 8000d9c:	400a      	ands	r2, r1
 8000d9e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000da8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2225      	movs	r2, #37	; 0x25
 8000dae:	2101      	movs	r1, #1
 8000db0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2224      	movs	r2, #36	; 0x24
 8000db6:	2100      	movs	r1, #0
 8000db8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b002      	add	sp, #8
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	fffffeff 	.word	0xfffffeff
 8000dc8:	40020000 	.word	0x40020000

08000dcc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dd4:	210f      	movs	r1, #15
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2225      	movs	r2, #37	; 0x25
 8000de0:	5c9b      	ldrb	r3, [r3, r2]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d006      	beq.n	8000df6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2204      	movs	r2, #4
 8000dec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
 8000df4:	e049      	b.n	8000e8a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	210e      	movs	r1, #14
 8000e02:	438a      	bics	r2, r1
 8000e04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2101      	movs	r1, #1
 8000e12:	438a      	bics	r2, r1
 8000e14:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e20:	491d      	ldr	r1, [pc, #116]	; (8000e98 <HAL_DMA_Abort_IT+0xcc>)
 8000e22:	400a      	ands	r2, r1
 8000e24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <HAL_DMA_Abort_IT+0xd0>)
 8000e28:	6859      	ldr	r1, [r3, #4]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	221c      	movs	r2, #28
 8000e30:	4013      	ands	r3, r2
 8000e32:	2201      	movs	r2, #1
 8000e34:	409a      	lsls	r2, r3
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <HAL_DMA_Abort_IT+0xd0>)
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000e44:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d00c      	beq.n	8000e68 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e58:	490f      	ldr	r1, [pc, #60]	; (8000e98 <HAL_DMA_Abort_IT+0xcc>)
 8000e5a:	400a      	ands	r2, r1
 8000e5c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000e66:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2225      	movs	r2, #37	; 0x25
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2224      	movs	r2, #36	; 0x24
 8000e74:	2100      	movs	r1, #0
 8000e76:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d004      	beq.n	8000e8a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	0010      	movs	r0, r2
 8000e88:	4798      	blx	r3
    }
  }
  return status;
 8000e8a:	230f      	movs	r3, #15
 8000e8c:	18fb      	adds	r3, r7, r3
 8000e8e:	781b      	ldrb	r3, [r3, #0]
}
 8000e90:	0018      	movs	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b004      	add	sp, #16
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	fffffeff 	.word	0xfffffeff
 8000e9c:	40020000 	.word	0x40020000

08000ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eae:	e147      	b.n	8001140 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	4091      	lsls	r1, r2
 8000eba:	000a      	movs	r2, r1
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d100      	bne.n	8000ec8 <HAL_GPIO_Init+0x28>
 8000ec6:	e138      	b.n	800113a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	2203      	movs	r2, #3
 8000ece:	4013      	ands	r3, r2
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d005      	beq.n	8000ee0 <HAL_GPIO_Init+0x40>
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	2203      	movs	r2, #3
 8000eda:	4013      	ands	r3, r2
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d130      	bne.n	8000f42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	2203      	movs	r2, #3
 8000eec:	409a      	lsls	r2, r3
 8000eee:	0013      	movs	r3, r2
 8000ef0:	43da      	mvns	r2, r3
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	68da      	ldr	r2, [r3, #12]
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	409a      	lsls	r2, r3
 8000f02:	0013      	movs	r3, r2
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f16:	2201      	movs	r2, #1
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	409a      	lsls	r2, r3
 8000f1c:	0013      	movs	r3, r2
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	091b      	lsrs	r3, r3, #4
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
 8000f34:	0013      	movs	r3, r2
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2203      	movs	r2, #3
 8000f48:	4013      	ands	r3, r2
 8000f4a:	2b03      	cmp	r3, #3
 8000f4c:	d017      	beq.n	8000f7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	2203      	movs	r2, #3
 8000f5a:	409a      	lsls	r2, r3
 8000f5c:	0013      	movs	r3, r2
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	409a      	lsls	r2, r3
 8000f70:	0013      	movs	r3, r2
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	2203      	movs	r2, #3
 8000f84:	4013      	ands	r3, r2
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d123      	bne.n	8000fd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	08da      	lsrs	r2, r3, #3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3208      	adds	r2, #8
 8000f92:	0092      	lsls	r2, r2, #2
 8000f94:	58d3      	ldr	r3, [r2, r3]
 8000f96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	2207      	movs	r2, #7
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	220f      	movs	r2, #15
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	0013      	movs	r3, r2
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	691a      	ldr	r2, [r3, #16]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	2107      	movs	r1, #7
 8000fb6:	400b      	ands	r3, r1
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	409a      	lsls	r2, r3
 8000fbc:	0013      	movs	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	08da      	lsrs	r2, r3, #3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3208      	adds	r2, #8
 8000fcc:	0092      	lsls	r2, r2, #2
 8000fce:	6939      	ldr	r1, [r7, #16]
 8000fd0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	2203      	movs	r2, #3
 8000fde:	409a      	lsls	r2, r3
 8000fe0:	0013      	movs	r3, r2
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2203      	movs	r2, #3
 8000ff0:	401a      	ands	r2, r3
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	409a      	lsls	r2, r3
 8000ff8:	0013      	movs	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	23c0      	movs	r3, #192	; 0xc0
 800100c:	029b      	lsls	r3, r3, #10
 800100e:	4013      	ands	r3, r2
 8001010:	d100      	bne.n	8001014 <HAL_GPIO_Init+0x174>
 8001012:	e092      	b.n	800113a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001014:	4a50      	ldr	r2, [pc, #320]	; (8001158 <HAL_GPIO_Init+0x2b8>)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	089b      	lsrs	r3, r3, #2
 800101a:	3318      	adds	r3, #24
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	589b      	ldr	r3, [r3, r2]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	2203      	movs	r2, #3
 8001026:	4013      	ands	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	220f      	movs	r2, #15
 800102c:	409a      	lsls	r2, r3
 800102e:	0013      	movs	r3, r2
 8001030:	43da      	mvns	r2, r3
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	23a0      	movs	r3, #160	; 0xa0
 800103c:	05db      	lsls	r3, r3, #23
 800103e:	429a      	cmp	r2, r3
 8001040:	d013      	beq.n	800106a <HAL_GPIO_Init+0x1ca>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a45      	ldr	r2, [pc, #276]	; (800115c <HAL_GPIO_Init+0x2bc>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d00d      	beq.n	8001066 <HAL_GPIO_Init+0x1c6>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a44      	ldr	r2, [pc, #272]	; (8001160 <HAL_GPIO_Init+0x2c0>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d007      	beq.n	8001062 <HAL_GPIO_Init+0x1c2>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a43      	ldr	r2, [pc, #268]	; (8001164 <HAL_GPIO_Init+0x2c4>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d101      	bne.n	800105e <HAL_GPIO_Init+0x1be>
 800105a:	2303      	movs	r3, #3
 800105c:	e006      	b.n	800106c <HAL_GPIO_Init+0x1cc>
 800105e:	2305      	movs	r3, #5
 8001060:	e004      	b.n	800106c <HAL_GPIO_Init+0x1cc>
 8001062:	2302      	movs	r3, #2
 8001064:	e002      	b.n	800106c <HAL_GPIO_Init+0x1cc>
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <HAL_GPIO_Init+0x1cc>
 800106a:	2300      	movs	r3, #0
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	2103      	movs	r1, #3
 8001070:	400a      	ands	r2, r1
 8001072:	00d2      	lsls	r2, r2, #3
 8001074:	4093      	lsls	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800107c:	4936      	ldr	r1, [pc, #216]	; (8001158 <HAL_GPIO_Init+0x2b8>)
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	089b      	lsrs	r3, r3, #2
 8001082:	3318      	adds	r3, #24
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800108a:	4b33      	ldr	r3, [pc, #204]	; (8001158 <HAL_GPIO_Init+0x2b8>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	43da      	mvns	r2, r3
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	2380      	movs	r3, #128	; 0x80
 80010a0:	035b      	lsls	r3, r3, #13
 80010a2:	4013      	ands	r3, r2
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010ae:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <HAL_GPIO_Init+0x2b8>)
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80010b4:	4b28      	ldr	r3, [pc, #160]	; (8001158 <HAL_GPIO_Init+0x2b8>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	43da      	mvns	r2, r3
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	039b      	lsls	r3, r3, #14
 80010cc:	4013      	ands	r3, r2
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <HAL_GPIO_Init+0x2b8>)
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010de:	4a1e      	ldr	r2, [pc, #120]	; (8001158 <HAL_GPIO_Init+0x2b8>)
 80010e0:	2384      	movs	r3, #132	; 0x84
 80010e2:	58d3      	ldr	r3, [r2, r3]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	43da      	mvns	r2, r3
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	029b      	lsls	r3, r3, #10
 80010f8:	4013      	ands	r3, r2
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001104:	4914      	ldr	r1, [pc, #80]	; (8001158 <HAL_GPIO_Init+0x2b8>)
 8001106:	2284      	movs	r2, #132	; 0x84
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800110c:	4a12      	ldr	r2, [pc, #72]	; (8001158 <HAL_GPIO_Init+0x2b8>)
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	58d3      	ldr	r3, [r2, r3]
 8001112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	43da      	mvns	r2, r3
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	025b      	lsls	r3, r3, #9
 8001126:	4013      	ands	r3, r2
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4313      	orrs	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001132:	4909      	ldr	r1, [pc, #36]	; (8001158 <HAL_GPIO_Init+0x2b8>)
 8001134:	2280      	movs	r2, #128	; 0x80
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3301      	adds	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	40da      	lsrs	r2, r3
 8001148:	1e13      	subs	r3, r2, #0
 800114a:	d000      	beq.n	800114e <HAL_GPIO_Init+0x2ae>
 800114c:	e6b0      	b.n	8000eb0 <HAL_GPIO_Init+0x10>
  }
}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	46c0      	nop			; (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	b006      	add	sp, #24
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40021800 	.word	0x40021800
 800115c:	50000400 	.word	0x50000400
 8001160:	50000800 	.word	0x50000800
 8001164:	50000c00 	.word	0x50000c00

08001168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	0008      	movs	r0, r1
 8001172:	0011      	movs	r1, r2
 8001174:	1cbb      	adds	r3, r7, #2
 8001176:	1c02      	adds	r2, r0, #0
 8001178:	801a      	strh	r2, [r3, #0]
 800117a:	1c7b      	adds	r3, r7, #1
 800117c:	1c0a      	adds	r2, r1, #0
 800117e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001180:	1c7b      	adds	r3, r7, #1
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d004      	beq.n	8001192 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001188:	1cbb      	adds	r3, r7, #2
 800118a:	881a      	ldrh	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001190:	e003      	b.n	800119a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001192:	1cbb      	adds	r3, r7, #2
 8001194:	881a      	ldrh	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	629a      	str	r2, [r3, #40]	; 0x28
}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	b002      	add	sp, #8
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e082      	b.n	80012bc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2241      	movs	r2, #65	; 0x41
 80011ba:	5c9b      	ldrb	r3, [r3, r2]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d107      	bne.n	80011d2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2240      	movs	r2, #64	; 0x40
 80011c6:	2100      	movs	r1, #0
 80011c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	0018      	movs	r0, r3
 80011ce:	f7ff faf3 	bl	80007b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2241      	movs	r2, #65	; 0x41
 80011d6:	2124      	movs	r1, #36	; 0x24
 80011d8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2101      	movs	r1, #1
 80011e6:	438a      	bics	r2, r1
 80011e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4934      	ldr	r1, [pc, #208]	; (80012c4 <HAL_I2C_Init+0x120>)
 80011f4:	400a      	ands	r2, r1
 80011f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4931      	ldr	r1, [pc, #196]	; (80012c8 <HAL_I2C_Init+0x124>)
 8001204:	400a      	ands	r2, r1
 8001206:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d108      	bne.n	8001222 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2180      	movs	r1, #128	; 0x80
 800121a:	0209      	lsls	r1, r1, #8
 800121c:	430a      	orrs	r2, r1
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	e007      	b.n	8001232 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2184      	movs	r1, #132	; 0x84
 800122c:	0209      	lsls	r1, r1, #8
 800122e:	430a      	orrs	r2, r1
 8001230:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d104      	bne.n	8001244 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2280      	movs	r2, #128	; 0x80
 8001240:	0112      	lsls	r2, r2, #4
 8001242:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	491f      	ldr	r1, [pc, #124]	; (80012cc <HAL_I2C_Init+0x128>)
 8001250:	430a      	orrs	r2, r1
 8001252:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	491a      	ldr	r1, [pc, #104]	; (80012c8 <HAL_I2C_Init+0x124>)
 8001260:	400a      	ands	r2, r1
 8001262:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691a      	ldr	r2, [r3, #16]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	431a      	orrs	r2, r3
 800126e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	430a      	orrs	r2, r1
 800127c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69d9      	ldr	r1, [r3, #28]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a1a      	ldr	r2, [r3, #32]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	430a      	orrs	r2, r1
 800128c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2101      	movs	r1, #1
 800129a:	430a      	orrs	r2, r1
 800129c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2241      	movs	r2, #65	; 0x41
 80012a8:	2120      	movs	r1, #32
 80012aa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2242      	movs	r2, #66	; 0x42
 80012b6:	2100      	movs	r1, #0
 80012b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	0018      	movs	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	b002      	add	sp, #8
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	f0ffffff 	.word	0xf0ffffff
 80012c8:	ffff7fff 	.word	0xffff7fff
 80012cc:	02008000 	.word	0x02008000

080012d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2241      	movs	r2, #65	; 0x41
 80012de:	5c9b      	ldrb	r3, [r3, r2]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b20      	cmp	r3, #32
 80012e4:	d138      	bne.n	8001358 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2240      	movs	r2, #64	; 0x40
 80012ea:	5c9b      	ldrb	r3, [r3, r2]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d101      	bne.n	80012f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80012f0:	2302      	movs	r3, #2
 80012f2:	e032      	b.n	800135a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2240      	movs	r2, #64	; 0x40
 80012f8:	2101      	movs	r1, #1
 80012fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2241      	movs	r2, #65	; 0x41
 8001300:	2124      	movs	r1, #36	; 0x24
 8001302:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2101      	movs	r1, #1
 8001310:	438a      	bics	r2, r1
 8001312:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4911      	ldr	r1, [pc, #68]	; (8001364 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001320:	400a      	ands	r2, r1
 8001322:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6819      	ldr	r1, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	430a      	orrs	r2, r1
 8001332:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2101      	movs	r1, #1
 8001340:	430a      	orrs	r2, r1
 8001342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2241      	movs	r2, #65	; 0x41
 8001348:	2120      	movs	r1, #32
 800134a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2240      	movs	r2, #64	; 0x40
 8001350:	2100      	movs	r1, #0
 8001352:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	e000      	b.n	800135a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001358:	2302      	movs	r3, #2
  }
}
 800135a:	0018      	movs	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	b002      	add	sp, #8
 8001360:	bd80      	pop	{r7, pc}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	ffffefff 	.word	0xffffefff

08001368 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2241      	movs	r2, #65	; 0x41
 8001376:	5c9b      	ldrb	r3, [r3, r2]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b20      	cmp	r3, #32
 800137c:	d139      	bne.n	80013f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2240      	movs	r2, #64	; 0x40
 8001382:	5c9b      	ldrb	r3, [r3, r2]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d101      	bne.n	800138c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001388:	2302      	movs	r3, #2
 800138a:	e033      	b.n	80013f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2240      	movs	r2, #64	; 0x40
 8001390:	2101      	movs	r1, #1
 8001392:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2241      	movs	r2, #65	; 0x41
 8001398:	2124      	movs	r1, #36	; 0x24
 800139a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2101      	movs	r1, #1
 80013a8:	438a      	bics	r2, r1
 80013aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4a11      	ldr	r2, [pc, #68]	; (80013fc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2101      	movs	r1, #1
 80013da:	430a      	orrs	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2241      	movs	r2, #65	; 0x41
 80013e2:	2120      	movs	r1, #32
 80013e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2240      	movs	r2, #64	; 0x40
 80013ea:	2100      	movs	r1, #0
 80013ec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e000      	b.n	80013f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80013f2:	2302      	movs	r3, #2
  }
}
 80013f4:	0018      	movs	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	b004      	add	sp, #16
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	fffff0ff 	.word	0xfffff0ff

08001400 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a19      	ldr	r2, [pc, #100]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800140e:	4013      	ands	r3, r2
 8001410:	0019      	movs	r1, r3
 8001412:	4b17      	ldr	r3, [pc, #92]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	430a      	orrs	r2, r1
 8001418:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	2380      	movs	r3, #128	; 0x80
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	429a      	cmp	r2, r3
 8001422:	d11f      	bne.n	8001464 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001424:	4b14      	ldr	r3, [pc, #80]	; (8001478 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	0013      	movs	r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	189b      	adds	r3, r3, r2
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	4912      	ldr	r1, [pc, #72]	; (800147c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001432:	0018      	movs	r0, r3
 8001434:	f7fe fe64 	bl	8000100 <__udivsi3>
 8001438:	0003      	movs	r3, r0
 800143a:	3301      	adds	r3, #1
 800143c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800143e:	e008      	b.n	8001452 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	3b01      	subs	r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	e001      	b.n	8001452 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e009      	b.n	8001466 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001452:	4b07      	ldr	r3, [pc, #28]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001454:	695a      	ldr	r2, [r3, #20]
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	401a      	ands	r2, r3
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	429a      	cmp	r2, r3
 8001462:	d0ed      	beq.n	8001440 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	0018      	movs	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	b004      	add	sp, #16
 800146c:	bd80      	pop	{r7, pc}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	40007000 	.word	0x40007000
 8001474:	fffff9ff 	.word	0xfffff9ff
 8001478:	20000000 	.word	0x20000000
 800147c:	000f4240 	.word	0x000f4240

08001480 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	23e0      	movs	r3, #224	; 0xe0
 800148a:	01db      	lsls	r3, r3, #7
 800148c:	4013      	ands	r3, r2
}
 800148e:	0018      	movs	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40021000 	.word	0x40021000

08001498 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e2f3      	b.n	8001a92 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2201      	movs	r2, #1
 80014b0:	4013      	ands	r3, r2
 80014b2:	d100      	bne.n	80014b6 <HAL_RCC_OscConfig+0x1e>
 80014b4:	e07c      	b.n	80015b0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014b6:	4bc3      	ldr	r3, [pc, #780]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2238      	movs	r2, #56	; 0x38
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014c0:	4bc0      	ldr	r3, [pc, #768]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2203      	movs	r2, #3
 80014c6:	4013      	ands	r3, r2
 80014c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	2b10      	cmp	r3, #16
 80014ce:	d102      	bne.n	80014d6 <HAL_RCC_OscConfig+0x3e>
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d002      	beq.n	80014dc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d10b      	bne.n	80014f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014dc:	4bb9      	ldr	r3, [pc, #740]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	029b      	lsls	r3, r3, #10
 80014e4:	4013      	ands	r3, r2
 80014e6:	d062      	beq.n	80015ae <HAL_RCC_OscConfig+0x116>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d15e      	bne.n	80015ae <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e2ce      	b.n	8001a92 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	025b      	lsls	r3, r3, #9
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d107      	bne.n	8001510 <HAL_RCC_OscConfig+0x78>
 8001500:	4bb0      	ldr	r3, [pc, #704]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4baf      	ldr	r3, [pc, #700]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001506:	2180      	movs	r1, #128	; 0x80
 8001508:	0249      	lsls	r1, r1, #9
 800150a:	430a      	orrs	r2, r1
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	e020      	b.n	8001552 <HAL_RCC_OscConfig+0xba>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	23a0      	movs	r3, #160	; 0xa0
 8001516:	02db      	lsls	r3, r3, #11
 8001518:	429a      	cmp	r2, r3
 800151a:	d10e      	bne.n	800153a <HAL_RCC_OscConfig+0xa2>
 800151c:	4ba9      	ldr	r3, [pc, #676]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4ba8      	ldr	r3, [pc, #672]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001522:	2180      	movs	r1, #128	; 0x80
 8001524:	02c9      	lsls	r1, r1, #11
 8001526:	430a      	orrs	r2, r1
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	4ba6      	ldr	r3, [pc, #664]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	4ba5      	ldr	r3, [pc, #660]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001530:	2180      	movs	r1, #128	; 0x80
 8001532:	0249      	lsls	r1, r1, #9
 8001534:	430a      	orrs	r2, r1
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	e00b      	b.n	8001552 <HAL_RCC_OscConfig+0xba>
 800153a:	4ba2      	ldr	r3, [pc, #648]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	4ba1      	ldr	r3, [pc, #644]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001540:	49a1      	ldr	r1, [pc, #644]	; (80017c8 <HAL_RCC_OscConfig+0x330>)
 8001542:	400a      	ands	r2, r1
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	4b9f      	ldr	r3, [pc, #636]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4b9e      	ldr	r3, [pc, #632]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 800154c:	499f      	ldr	r1, [pc, #636]	; (80017cc <HAL_RCC_OscConfig+0x334>)
 800154e:	400a      	ands	r2, r1
 8001550:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d014      	beq.n	8001584 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155a:	f7ff fac9 	bl	8000af0 <HAL_GetTick>
 800155e:	0003      	movs	r3, r0
 8001560:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001564:	f7ff fac4 	bl	8000af0 <HAL_GetTick>
 8001568:	0002      	movs	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b64      	cmp	r3, #100	; 0x64
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e28d      	b.n	8001a92 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001576:	4b93      	ldr	r3, [pc, #588]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	2380      	movs	r3, #128	; 0x80
 800157c:	029b      	lsls	r3, r3, #10
 800157e:	4013      	ands	r3, r2
 8001580:	d0f0      	beq.n	8001564 <HAL_RCC_OscConfig+0xcc>
 8001582:	e015      	b.n	80015b0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001584:	f7ff fab4 	bl	8000af0 <HAL_GetTick>
 8001588:	0003      	movs	r3, r0
 800158a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800158e:	f7ff faaf 	bl	8000af0 <HAL_GetTick>
 8001592:	0002      	movs	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b64      	cmp	r3, #100	; 0x64
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e278      	b.n	8001a92 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015a0:	4b88      	ldr	r3, [pc, #544]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	029b      	lsls	r3, r3, #10
 80015a8:	4013      	ands	r3, r2
 80015aa:	d1f0      	bne.n	800158e <HAL_RCC_OscConfig+0xf6>
 80015ac:	e000      	b.n	80015b0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2202      	movs	r2, #2
 80015b6:	4013      	ands	r3, r2
 80015b8:	d100      	bne.n	80015bc <HAL_RCC_OscConfig+0x124>
 80015ba:	e099      	b.n	80016f0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015bc:	4b81      	ldr	r3, [pc, #516]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	2238      	movs	r2, #56	; 0x38
 80015c2:	4013      	ands	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015c6:	4b7f      	ldr	r3, [pc, #508]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	2203      	movs	r2, #3
 80015cc:	4013      	ands	r3, r2
 80015ce:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	2b10      	cmp	r3, #16
 80015d4:	d102      	bne.n	80015dc <HAL_RCC_OscConfig+0x144>
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d002      	beq.n	80015e2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d135      	bne.n	800164e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e2:	4b78      	ldr	r3, [pc, #480]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	2380      	movs	r3, #128	; 0x80
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	4013      	ands	r3, r2
 80015ec:	d005      	beq.n	80015fa <HAL_RCC_OscConfig+0x162>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e24b      	b.n	8001a92 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fa:	4b72      	ldr	r3, [pc, #456]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	4a74      	ldr	r2, [pc, #464]	; (80017d0 <HAL_RCC_OscConfig+0x338>)
 8001600:	4013      	ands	r3, r2
 8001602:	0019      	movs	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	021a      	lsls	r2, r3, #8
 800160a:	4b6e      	ldr	r3, [pc, #440]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 800160c:	430a      	orrs	r2, r1
 800160e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d112      	bne.n	800163c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001616:	4b6b      	ldr	r3, [pc, #428]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a6e      	ldr	r2, [pc, #440]	; (80017d4 <HAL_RCC_OscConfig+0x33c>)
 800161c:	4013      	ands	r3, r2
 800161e:	0019      	movs	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691a      	ldr	r2, [r3, #16]
 8001624:	4b67      	ldr	r3, [pc, #412]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001626:	430a      	orrs	r2, r1
 8001628:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800162a:	4b66      	ldr	r3, [pc, #408]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	0adb      	lsrs	r3, r3, #11
 8001630:	2207      	movs	r2, #7
 8001632:	4013      	ands	r3, r2
 8001634:	4a68      	ldr	r2, [pc, #416]	; (80017d8 <HAL_RCC_OscConfig+0x340>)
 8001636:	40da      	lsrs	r2, r3
 8001638:	4b68      	ldr	r3, [pc, #416]	; (80017dc <HAL_RCC_OscConfig+0x344>)
 800163a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800163c:	4b68      	ldr	r3, [pc, #416]	; (80017e0 <HAL_RCC_OscConfig+0x348>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	0018      	movs	r0, r3
 8001642:	f7ff f9f9 	bl	8000a38 <HAL_InitTick>
 8001646:	1e03      	subs	r3, r0, #0
 8001648:	d051      	beq.n	80016ee <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e221      	b.n	8001a92 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d030      	beq.n	80016b8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001656:	4b5b      	ldr	r3, [pc, #364]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a5e      	ldr	r2, [pc, #376]	; (80017d4 <HAL_RCC_OscConfig+0x33c>)
 800165c:	4013      	ands	r3, r2
 800165e:	0019      	movs	r1, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691a      	ldr	r2, [r3, #16]
 8001664:	4b57      	ldr	r3, [pc, #348]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001666:	430a      	orrs	r2, r1
 8001668:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800166a:	4b56      	ldr	r3, [pc, #344]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	4b55      	ldr	r3, [pc, #340]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001670:	2180      	movs	r1, #128	; 0x80
 8001672:	0049      	lsls	r1, r1, #1
 8001674:	430a      	orrs	r2, r1
 8001676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001678:	f7ff fa3a 	bl	8000af0 <HAL_GetTick>
 800167c:	0003      	movs	r3, r0
 800167e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001682:	f7ff fa35 	bl	8000af0 <HAL_GetTick>
 8001686:	0002      	movs	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e1fe      	b.n	8001a92 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001694:	4b4b      	ldr	r3, [pc, #300]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	4013      	ands	r3, r2
 800169e:	d0f0      	beq.n	8001682 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a0:	4b48      	ldr	r3, [pc, #288]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	4a4a      	ldr	r2, [pc, #296]	; (80017d0 <HAL_RCC_OscConfig+0x338>)
 80016a6:	4013      	ands	r3, r2
 80016a8:	0019      	movs	r1, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	021a      	lsls	r2, r3, #8
 80016b0:	4b44      	ldr	r3, [pc, #272]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80016b2:	430a      	orrs	r2, r1
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	e01b      	b.n	80016f0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80016b8:	4b42      	ldr	r3, [pc, #264]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b41      	ldr	r3, [pc, #260]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80016be:	4949      	ldr	r1, [pc, #292]	; (80017e4 <HAL_RCC_OscConfig+0x34c>)
 80016c0:	400a      	ands	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c4:	f7ff fa14 	bl	8000af0 <HAL_GetTick>
 80016c8:	0003      	movs	r3, r0
 80016ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ce:	f7ff fa0f 	bl	8000af0 <HAL_GetTick>
 80016d2:	0002      	movs	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e1d8      	b.n	8001a92 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016e0:	4b38      	ldr	r3, [pc, #224]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	4013      	ands	r3, r2
 80016ea:	d1f0      	bne.n	80016ce <HAL_RCC_OscConfig+0x236>
 80016ec:	e000      	b.n	80016f0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016ee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2208      	movs	r2, #8
 80016f6:	4013      	ands	r3, r2
 80016f8:	d047      	beq.n	800178a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80016fa:	4b32      	ldr	r3, [pc, #200]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2238      	movs	r2, #56	; 0x38
 8001700:	4013      	ands	r3, r2
 8001702:	2b18      	cmp	r3, #24
 8001704:	d10a      	bne.n	800171c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001706:	4b2f      	ldr	r3, [pc, #188]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170a:	2202      	movs	r2, #2
 800170c:	4013      	ands	r3, r2
 800170e:	d03c      	beq.n	800178a <HAL_RCC_OscConfig+0x2f2>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d138      	bne.n	800178a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e1ba      	b.n	8001a92 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d019      	beq.n	8001758 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001724:	4b27      	ldr	r3, [pc, #156]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001726:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001728:	4b26      	ldr	r3, [pc, #152]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 800172a:	2101      	movs	r1, #1
 800172c:	430a      	orrs	r2, r1
 800172e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001730:	f7ff f9de 	bl	8000af0 <HAL_GetTick>
 8001734:	0003      	movs	r3, r0
 8001736:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800173a:	f7ff f9d9 	bl	8000af0 <HAL_GetTick>
 800173e:	0002      	movs	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e1a2      	b.n	8001a92 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800174c:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 800174e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001750:	2202      	movs	r2, #2
 8001752:	4013      	ands	r3, r2
 8001754:	d0f1      	beq.n	800173a <HAL_RCC_OscConfig+0x2a2>
 8001756:	e018      	b.n	800178a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001758:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 800175a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 800175e:	2101      	movs	r1, #1
 8001760:	438a      	bics	r2, r1
 8001762:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001764:	f7ff f9c4 	bl	8000af0 <HAL_GetTick>
 8001768:	0003      	movs	r3, r0
 800176a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800176e:	f7ff f9bf 	bl	8000af0 <HAL_GetTick>
 8001772:	0002      	movs	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e188      	b.n	8001a92 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001780:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001784:	2202      	movs	r2, #2
 8001786:	4013      	ands	r3, r2
 8001788:	d1f1      	bne.n	800176e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2204      	movs	r2, #4
 8001790:	4013      	ands	r3, r2
 8001792:	d100      	bne.n	8001796 <HAL_RCC_OscConfig+0x2fe>
 8001794:	e0c6      	b.n	8001924 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001796:	231f      	movs	r3, #31
 8001798:	18fb      	adds	r3, r7, r3
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2238      	movs	r2, #56	; 0x38
 80017a4:	4013      	ands	r3, r2
 80017a6:	2b20      	cmp	r3, #32
 80017a8:	d11e      	bne.n	80017e8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80017ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ae:	2202      	movs	r2, #2
 80017b0:	4013      	ands	r3, r2
 80017b2:	d100      	bne.n	80017b6 <HAL_RCC_OscConfig+0x31e>
 80017b4:	e0b6      	b.n	8001924 <HAL_RCC_OscConfig+0x48c>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d000      	beq.n	80017c0 <HAL_RCC_OscConfig+0x328>
 80017be:	e0b1      	b.n	8001924 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e166      	b.n	8001a92 <HAL_RCC_OscConfig+0x5fa>
 80017c4:	40021000 	.word	0x40021000
 80017c8:	fffeffff 	.word	0xfffeffff
 80017cc:	fffbffff 	.word	0xfffbffff
 80017d0:	ffff80ff 	.word	0xffff80ff
 80017d4:	ffffc7ff 	.word	0xffffc7ff
 80017d8:	00f42400 	.word	0x00f42400
 80017dc:	20000000 	.word	0x20000000
 80017e0:	20000004 	.word	0x20000004
 80017e4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017e8:	4bac      	ldr	r3, [pc, #688]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 80017ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	055b      	lsls	r3, r3, #21
 80017f0:	4013      	ands	r3, r2
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_OscConfig+0x360>
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <HAL_RCC_OscConfig+0x362>
 80017f8:	2300      	movs	r3, #0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d011      	beq.n	8001822 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	4ba7      	ldr	r3, [pc, #668]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 8001800:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001802:	4ba6      	ldr	r3, [pc, #664]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 8001804:	2180      	movs	r1, #128	; 0x80
 8001806:	0549      	lsls	r1, r1, #21
 8001808:	430a      	orrs	r2, r1
 800180a:	63da      	str	r2, [r3, #60]	; 0x3c
 800180c:	4ba3      	ldr	r3, [pc, #652]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 800180e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	055b      	lsls	r3, r3, #21
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800181a:	231f      	movs	r3, #31
 800181c:	18fb      	adds	r3, r7, r3
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001822:	4b9f      	ldr	r3, [pc, #636]	; (8001aa0 <HAL_RCC_OscConfig+0x608>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4013      	ands	r3, r2
 800182c:	d11a      	bne.n	8001864 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800182e:	4b9c      	ldr	r3, [pc, #624]	; (8001aa0 <HAL_RCC_OscConfig+0x608>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4b9b      	ldr	r3, [pc, #620]	; (8001aa0 <HAL_RCC_OscConfig+0x608>)
 8001834:	2180      	movs	r1, #128	; 0x80
 8001836:	0049      	lsls	r1, r1, #1
 8001838:	430a      	orrs	r2, r1
 800183a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800183c:	f7ff f958 	bl	8000af0 <HAL_GetTick>
 8001840:	0003      	movs	r3, r0
 8001842:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001846:	f7ff f953 	bl	8000af0 <HAL_GetTick>
 800184a:	0002      	movs	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e11c      	b.n	8001a92 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001858:	4b91      	ldr	r3, [pc, #580]	; (8001aa0 <HAL_RCC_OscConfig+0x608>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4013      	ands	r3, r2
 8001862:	d0f0      	beq.n	8001846 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d106      	bne.n	800187a <HAL_RCC_OscConfig+0x3e2>
 800186c:	4b8b      	ldr	r3, [pc, #556]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 800186e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001870:	4b8a      	ldr	r3, [pc, #552]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 8001872:	2101      	movs	r1, #1
 8001874:	430a      	orrs	r2, r1
 8001876:	65da      	str	r2, [r3, #92]	; 0x5c
 8001878:	e01c      	b.n	80018b4 <HAL_RCC_OscConfig+0x41c>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2b05      	cmp	r3, #5
 8001880:	d10c      	bne.n	800189c <HAL_RCC_OscConfig+0x404>
 8001882:	4b86      	ldr	r3, [pc, #536]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 8001884:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001886:	4b85      	ldr	r3, [pc, #532]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 8001888:	2104      	movs	r1, #4
 800188a:	430a      	orrs	r2, r1
 800188c:	65da      	str	r2, [r3, #92]	; 0x5c
 800188e:	4b83      	ldr	r3, [pc, #524]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 8001890:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001892:	4b82      	ldr	r3, [pc, #520]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 8001894:	2101      	movs	r1, #1
 8001896:	430a      	orrs	r2, r1
 8001898:	65da      	str	r2, [r3, #92]	; 0x5c
 800189a:	e00b      	b.n	80018b4 <HAL_RCC_OscConfig+0x41c>
 800189c:	4b7f      	ldr	r3, [pc, #508]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 800189e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018a0:	4b7e      	ldr	r3, [pc, #504]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 80018a2:	2101      	movs	r1, #1
 80018a4:	438a      	bics	r2, r1
 80018a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80018a8:	4b7c      	ldr	r3, [pc, #496]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 80018aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018ac:	4b7b      	ldr	r3, [pc, #492]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 80018ae:	2104      	movs	r1, #4
 80018b0:	438a      	bics	r2, r1
 80018b2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d014      	beq.n	80018e6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018bc:	f7ff f918 	bl	8000af0 <HAL_GetTick>
 80018c0:	0003      	movs	r3, r0
 80018c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018c4:	e009      	b.n	80018da <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c6:	f7ff f913 	bl	8000af0 <HAL_GetTick>
 80018ca:	0002      	movs	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	4a74      	ldr	r2, [pc, #464]	; (8001aa4 <HAL_RCC_OscConfig+0x60c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e0db      	b.n	8001a92 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018da:	4b70      	ldr	r3, [pc, #448]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 80018dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018de:	2202      	movs	r2, #2
 80018e0:	4013      	ands	r3, r2
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x42e>
 80018e4:	e013      	b.n	800190e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e6:	f7ff f903 	bl	8000af0 <HAL_GetTick>
 80018ea:	0003      	movs	r3, r0
 80018ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018ee:	e009      	b.n	8001904 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f0:	f7ff f8fe 	bl	8000af0 <HAL_GetTick>
 80018f4:	0002      	movs	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	4a6a      	ldr	r2, [pc, #424]	; (8001aa4 <HAL_RCC_OscConfig+0x60c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e0c6      	b.n	8001a92 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001904:	4b65      	ldr	r3, [pc, #404]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 8001906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001908:	2202      	movs	r2, #2
 800190a:	4013      	ands	r3, r2
 800190c:	d1f0      	bne.n	80018f0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800190e:	231f      	movs	r3, #31
 8001910:	18fb      	adds	r3, r7, r3
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d105      	bne.n	8001924 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001918:	4b60      	ldr	r3, [pc, #384]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 800191a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800191c:	4b5f      	ldr	r3, [pc, #380]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 800191e:	4962      	ldr	r1, [pc, #392]	; (8001aa8 <HAL_RCC_OscConfig+0x610>)
 8001920:	400a      	ands	r2, r1
 8001922:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d100      	bne.n	800192e <HAL_RCC_OscConfig+0x496>
 800192c:	e0b0      	b.n	8001a90 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800192e:	4b5b      	ldr	r3, [pc, #364]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2238      	movs	r2, #56	; 0x38
 8001934:	4013      	ands	r3, r2
 8001936:	2b10      	cmp	r3, #16
 8001938:	d100      	bne.n	800193c <HAL_RCC_OscConfig+0x4a4>
 800193a:	e078      	b.n	8001a2e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d153      	bne.n	80019ec <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001944:	4b55      	ldr	r3, [pc, #340]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b54      	ldr	r3, [pc, #336]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 800194a:	4958      	ldr	r1, [pc, #352]	; (8001aac <HAL_RCC_OscConfig+0x614>)
 800194c:	400a      	ands	r2, r1
 800194e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff f8ce 	bl	8000af0 <HAL_GetTick>
 8001954:	0003      	movs	r3, r0
 8001956:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195a:	f7ff f8c9 	bl	8000af0 <HAL_GetTick>
 800195e:	0002      	movs	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e092      	b.n	8001a92 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800196c:	4b4b      	ldr	r3, [pc, #300]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	049b      	lsls	r3, r3, #18
 8001974:	4013      	ands	r3, r2
 8001976:	d1f0      	bne.n	800195a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001978:	4b48      	ldr	r3, [pc, #288]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	4a4c      	ldr	r2, [pc, #304]	; (8001ab0 <HAL_RCC_OscConfig+0x618>)
 800197e:	4013      	ands	r3, r2
 8001980:	0019      	movs	r1, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a1a      	ldr	r2, [r3, #32]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	021b      	lsls	r3, r3, #8
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	431a      	orrs	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	431a      	orrs	r2, r3
 80019a0:	4b3e      	ldr	r3, [pc, #248]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 80019a2:	430a      	orrs	r2, r1
 80019a4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019a6:	4b3d      	ldr	r3, [pc, #244]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	4b3c      	ldr	r3, [pc, #240]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 80019ac:	2180      	movs	r1, #128	; 0x80
 80019ae:	0449      	lsls	r1, r1, #17
 80019b0:	430a      	orrs	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80019b4:	4b39      	ldr	r3, [pc, #228]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	4b38      	ldr	r3, [pc, #224]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 80019ba:	2180      	movs	r1, #128	; 0x80
 80019bc:	0549      	lsls	r1, r1, #21
 80019be:	430a      	orrs	r2, r1
 80019c0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c2:	f7ff f895 	bl	8000af0 <HAL_GetTick>
 80019c6:	0003      	movs	r3, r0
 80019c8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019cc:	f7ff f890 	bl	8000af0 <HAL_GetTick>
 80019d0:	0002      	movs	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e059      	b.n	8001a92 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019de:	4b2f      	ldr	r3, [pc, #188]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	2380      	movs	r3, #128	; 0x80
 80019e4:	049b      	lsls	r3, r3, #18
 80019e6:	4013      	ands	r3, r2
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x534>
 80019ea:	e051      	b.n	8001a90 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ec:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b2a      	ldr	r3, [pc, #168]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 80019f2:	492e      	ldr	r1, [pc, #184]	; (8001aac <HAL_RCC_OscConfig+0x614>)
 80019f4:	400a      	ands	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f8:	f7ff f87a 	bl	8000af0 <HAL_GetTick>
 80019fc:	0003      	movs	r3, r0
 80019fe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a02:	f7ff f875 	bl	8000af0 <HAL_GetTick>
 8001a06:	0002      	movs	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e03e      	b.n	8001a92 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a14:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	049b      	lsls	r3, r3, #18
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d1f0      	bne.n	8001a02 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001a20:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 8001a22:	68da      	ldr	r2, [r3, #12]
 8001a24:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 8001a26:	4923      	ldr	r1, [pc, #140]	; (8001ab4 <HAL_RCC_OscConfig+0x61c>)
 8001a28:	400a      	ands	r2, r1
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	e030      	b.n	8001a90 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d101      	bne.n	8001a3a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e02b      	b.n	8001a92 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001a3a:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <HAL_RCC_OscConfig+0x604>)
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	2203      	movs	r2, #3
 8001a44:	401a      	ands	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d11e      	bne.n	8001a8c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2270      	movs	r2, #112	; 0x70
 8001a52:	401a      	ands	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d117      	bne.n	8001a8c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	23fe      	movs	r3, #254	; 0xfe
 8001a60:	01db      	lsls	r3, r3, #7
 8001a62:	401a      	ands	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d10e      	bne.n	8001a8c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	23f8      	movs	r3, #248	; 0xf8
 8001a72:	039b      	lsls	r3, r3, #14
 8001a74:	401a      	ands	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d106      	bne.n	8001a8c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	0f5b      	lsrs	r3, r3, #29
 8001a82:	075a      	lsls	r2, r3, #29
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	0018      	movs	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	b008      	add	sp, #32
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40007000 	.word	0x40007000
 8001aa4:	00001388 	.word	0x00001388
 8001aa8:	efffffff 	.word	0xefffffff
 8001aac:	feffffff 	.word	0xfeffffff
 8001ab0:	1fc1808c 	.word	0x1fc1808c
 8001ab4:	effefffc 	.word	0xeffefffc

08001ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0e9      	b.n	8001ca0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001acc:	4b76      	ldr	r3, [pc, #472]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2207      	movs	r2, #7
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d91e      	bls.n	8001b18 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ada:	4b73      	ldr	r3, [pc, #460]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2207      	movs	r2, #7
 8001ae0:	4393      	bics	r3, r2
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	4b70      	ldr	r3, [pc, #448]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001aec:	f7ff f800 	bl	8000af0 <HAL_GetTick>
 8001af0:	0003      	movs	r3, r0
 8001af2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001af4:	e009      	b.n	8001b0a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af6:	f7fe fffb 	bl	8000af0 <HAL_GetTick>
 8001afa:	0002      	movs	r2, r0
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	4a6a      	ldr	r2, [pc, #424]	; (8001cac <HAL_RCC_ClockConfig+0x1f4>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e0ca      	b.n	8001ca0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b0a:	4b67      	ldr	r3, [pc, #412]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2207      	movs	r2, #7
 8001b10:	4013      	ands	r3, r2
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d1ee      	bne.n	8001af6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d015      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2204      	movs	r2, #4
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d006      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b2c:	4b60      	ldr	r3, [pc, #384]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	4b5f      	ldr	r3, [pc, #380]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001b32:	21e0      	movs	r1, #224	; 0xe0
 8001b34:	01c9      	lsls	r1, r1, #7
 8001b36:	430a      	orrs	r2, r1
 8001b38:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b3a:	4b5d      	ldr	r3, [pc, #372]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	4a5d      	ldr	r2, [pc, #372]	; (8001cb4 <HAL_RCC_ClockConfig+0x1fc>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	0019      	movs	r1, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	4b59      	ldr	r3, [pc, #356]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2201      	movs	r2, #1
 8001b54:	4013      	ands	r3, r2
 8001b56:	d057      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d107      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b60:	4b53      	ldr	r3, [pc, #332]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	029b      	lsls	r3, r3, #10
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d12b      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e097      	b.n	8001ca0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d107      	bne.n	8001b88 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b78:	4b4d      	ldr	r3, [pc, #308]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	049b      	lsls	r3, r3, #18
 8001b80:	4013      	ands	r3, r2
 8001b82:	d11f      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e08b      	b.n	8001ca0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d107      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b90:	4b47      	ldr	r3, [pc, #284]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	2380      	movs	r3, #128	; 0x80
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d113      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e07f      	b.n	8001ca0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b03      	cmp	r3, #3
 8001ba6:	d106      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ba8:	4b41      	ldr	r3, [pc, #260]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bac:	2202      	movs	r2, #2
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d108      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e074      	b.n	8001ca0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bb6:	4b3e      	ldr	r3, [pc, #248]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bba:	2202      	movs	r2, #2
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e06d      	b.n	8001ca0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bc4:	4b3a      	ldr	r3, [pc, #232]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2207      	movs	r2, #7
 8001bca:	4393      	bics	r3, r2
 8001bcc:	0019      	movs	r1, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	4b37      	ldr	r3, [pc, #220]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bd8:	f7fe ff8a 	bl	8000af0 <HAL_GetTick>
 8001bdc:	0003      	movs	r3, r0
 8001bde:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be0:	e009      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be2:	f7fe ff85 	bl	8000af0 <HAL_GetTick>
 8001be6:	0002      	movs	r2, r0
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	4a2f      	ldr	r2, [pc, #188]	; (8001cac <HAL_RCC_ClockConfig+0x1f4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e054      	b.n	8001ca0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf6:	4b2e      	ldr	r3, [pc, #184]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2238      	movs	r2, #56	; 0x38
 8001bfc:	401a      	ands	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d1ec      	bne.n	8001be2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c08:	4b27      	ldr	r3, [pc, #156]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2207      	movs	r2, #7
 8001c0e:	4013      	ands	r3, r2
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d21e      	bcs.n	8001c54 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2207      	movs	r2, #7
 8001c1c:	4393      	bics	r3, r2
 8001c1e:	0019      	movs	r1, r3
 8001c20:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c28:	f7fe ff62 	bl	8000af0 <HAL_GetTick>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c30:	e009      	b.n	8001c46 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c32:	f7fe ff5d 	bl	8000af0 <HAL_GetTick>
 8001c36:	0002      	movs	r2, r0
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	4a1b      	ldr	r2, [pc, #108]	; (8001cac <HAL_RCC_ClockConfig+0x1f4>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e02c      	b.n	8001ca0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c46:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2207      	movs	r2, #7
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d1ee      	bne.n	8001c32 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2204      	movs	r2, #4
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d009      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c5e:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	4a15      	ldr	r2, [pc, #84]	; (8001cb8 <HAL_RCC_ClockConfig+0x200>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	0019      	movs	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001c72:	f000 f829 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8001c76:	0001      	movs	r1, r0
 8001c78:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	0a1b      	lsrs	r3, r3, #8
 8001c7e:	220f      	movs	r2, #15
 8001c80:	401a      	ands	r2, r3
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <HAL_RCC_ClockConfig+0x204>)
 8001c84:	0092      	lsls	r2, r2, #2
 8001c86:	58d3      	ldr	r3, [r2, r3]
 8001c88:	221f      	movs	r2, #31
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	000a      	movs	r2, r1
 8001c8e:	40da      	lsrs	r2, r3
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_RCC_ClockConfig+0x208>)
 8001c92:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <HAL_RCC_ClockConfig+0x20c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f7fe fecd 	bl	8000a38 <HAL_InitTick>
 8001c9e:	0003      	movs	r3, r0
}
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b004      	add	sp, #16
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40022000 	.word	0x40022000
 8001cac:	00001388 	.word	0x00001388
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	fffff0ff 	.word	0xfffff0ff
 8001cb8:	ffff8fff 	.word	0xffff8fff
 8001cbc:	080040dc 	.word	0x080040dc
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cce:	4b3c      	ldr	r3, [pc, #240]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2238      	movs	r2, #56	; 0x38
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d10f      	bne.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001cd8:	4b39      	ldr	r3, [pc, #228]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	0adb      	lsrs	r3, r3, #11
 8001cde:	2207      	movs	r2, #7
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	409a      	lsls	r2, r3
 8001ce6:	0013      	movs	r3, r2
 8001ce8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001cea:	6839      	ldr	r1, [r7, #0]
 8001cec:	4835      	ldr	r0, [pc, #212]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001cee:	f7fe fa07 	bl	8000100 <__udivsi3>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	e05d      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cf8:	4b31      	ldr	r3, [pc, #196]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2238      	movs	r2, #56	; 0x38
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d102      	bne.n	8001d0a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d04:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	e054      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d0a:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2238      	movs	r2, #56	; 0x38
 8001d10:	4013      	ands	r3, r2
 8001d12:	2b10      	cmp	r3, #16
 8001d14:	d138      	bne.n	8001d88 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001d16:	4b2a      	ldr	r3, [pc, #168]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d20:	4b27      	ldr	r3, [pc, #156]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	2207      	movs	r2, #7
 8001d28:	4013      	ands	r3, r2
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d10d      	bne.n	8001d50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	4824      	ldr	r0, [pc, #144]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001d38:	f7fe f9e2 	bl	8000100 <__udivsi3>
 8001d3c:	0003      	movs	r3, r0
 8001d3e:	0019      	movs	r1, r3
 8001d40:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	227f      	movs	r2, #127	; 0x7f
 8001d48:	4013      	ands	r3, r2
 8001d4a:	434b      	muls	r3, r1
 8001d4c:	617b      	str	r3, [r7, #20]
        break;
 8001d4e:	e00d      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	481c      	ldr	r0, [pc, #112]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d54:	f7fe f9d4 	bl	8000100 <__udivsi3>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	0019      	movs	r1, r3
 8001d5c:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	0a1b      	lsrs	r3, r3, #8
 8001d62:	227f      	movs	r2, #127	; 0x7f
 8001d64:	4013      	ands	r3, r2
 8001d66:	434b      	muls	r3, r1
 8001d68:	617b      	str	r3, [r7, #20]
        break;
 8001d6a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001d6c:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	0f5b      	lsrs	r3, r3, #29
 8001d72:	2207      	movs	r2, #7
 8001d74:	4013      	ands	r3, r2
 8001d76:	3301      	adds	r3, #1
 8001d78:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	6978      	ldr	r0, [r7, #20]
 8001d7e:	f7fe f9bf 	bl	8000100 <__udivsi3>
 8001d82:	0003      	movs	r3, r0
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	e015      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d88:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	2238      	movs	r2, #56	; 0x38
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2b20      	cmp	r3, #32
 8001d92:	d103      	bne.n	8001d9c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	021b      	lsls	r3, r3, #8
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	e00b      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2238      	movs	r2, #56	; 0x38
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b18      	cmp	r3, #24
 8001da6:	d103      	bne.n	8001db0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001da8:	23fa      	movs	r3, #250	; 0xfa
 8001daa:	01db      	lsls	r3, r3, #7
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	e001      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001db4:	693b      	ldr	r3, [r7, #16]
}
 8001db6:	0018      	movs	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	b006      	add	sp, #24
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	00f42400 	.word	0x00f42400
 8001dc8:	007a1200 	.word	0x007a1200

08001dcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dd0:	4b02      	ldr	r3, [pc, #8]	; (8001ddc <HAL_RCC_GetHCLKFreq+0x10>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	20000000 	.word	0x20000000

08001de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001de0:	b5b0      	push	{r4, r5, r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001de4:	f7ff fff2 	bl	8001dcc <HAL_RCC_GetHCLKFreq>
 8001de8:	0004      	movs	r4, r0
 8001dea:	f7ff fb49 	bl	8001480 <LL_RCC_GetAPB1Prescaler>
 8001dee:	0003      	movs	r3, r0
 8001df0:	0b1a      	lsrs	r2, r3, #12
 8001df2:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001df4:	0092      	lsls	r2, r2, #2
 8001df6:	58d3      	ldr	r3, [r2, r3]
 8001df8:	221f      	movs	r2, #31
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	40dc      	lsrs	r4, r3
 8001dfe:	0023      	movs	r3, r4
}
 8001e00:	0018      	movs	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bdb0      	pop	{r4, r5, r7, pc}
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	0800411c 	.word	0x0800411c

08001e0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001e14:	2313      	movs	r3, #19
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e1c:	2312      	movs	r3, #18
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	029b      	lsls	r3, r3, #10
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d100      	bne.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001e30:	e0a3      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e32:	2011      	movs	r0, #17
 8001e34:	183b      	adds	r3, r7, r0
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3a:	4b86      	ldr	r3, [pc, #536]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e3e:	2380      	movs	r3, #128	; 0x80
 8001e40:	055b      	lsls	r3, r3, #21
 8001e42:	4013      	ands	r3, r2
 8001e44:	d110      	bne.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	4b83      	ldr	r3, [pc, #524]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e4a:	4b82      	ldr	r3, [pc, #520]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e4c:	2180      	movs	r1, #128	; 0x80
 8001e4e:	0549      	lsls	r1, r1, #21
 8001e50:	430a      	orrs	r2, r1
 8001e52:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e54:	4b7f      	ldr	r3, [pc, #508]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	055b      	lsls	r3, r3, #21
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e62:	183b      	adds	r3, r7, r0
 8001e64:	2201      	movs	r2, #1
 8001e66:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e68:	4b7b      	ldr	r3, [pc, #492]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b7a      	ldr	r3, [pc, #488]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e6e:	2180      	movs	r1, #128	; 0x80
 8001e70:	0049      	lsls	r1, r1, #1
 8001e72:	430a      	orrs	r2, r1
 8001e74:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e76:	f7fe fe3b 	bl	8000af0 <HAL_GetTick>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e7e:	e00b      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e80:	f7fe fe36 	bl	8000af0 <HAL_GetTick>
 8001e84:	0002      	movs	r2, r0
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d904      	bls.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001e8e:	2313      	movs	r3, #19
 8001e90:	18fb      	adds	r3, r7, r3
 8001e92:	2203      	movs	r2, #3
 8001e94:	701a      	strb	r2, [r3, #0]
        break;
 8001e96:	e005      	b.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e98:	4b6f      	ldr	r3, [pc, #444]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d0ed      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001ea4:	2313      	movs	r3, #19
 8001ea6:	18fb      	adds	r3, r7, r3
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d154      	bne.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001eae:	4b69      	ldr	r3, [pc, #420]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001eb0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001eb2:	23c0      	movs	r3, #192	; 0xc0
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d019      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d014      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001eca:	4b62      	ldr	r3, [pc, #392]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ece:	4a63      	ldr	r2, [pc, #396]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ed4:	4b5f      	ldr	r3, [pc, #380]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ed6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ed8:	4b5e      	ldr	r3, [pc, #376]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001eda:	2180      	movs	r1, #128	; 0x80
 8001edc:	0249      	lsls	r1, r1, #9
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ee2:	4b5c      	ldr	r3, [pc, #368]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ee4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ee6:	4b5b      	ldr	r3, [pc, #364]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ee8:	495d      	ldr	r1, [pc, #372]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001eea:	400a      	ands	r2, r1
 8001eec:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001eee:	4b59      	ldr	r3, [pc, #356]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d016      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efc:	f7fe fdf8 	bl	8000af0 <HAL_GetTick>
 8001f00:	0003      	movs	r3, r0
 8001f02:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f04:	e00c      	b.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f06:	f7fe fdf3 	bl	8000af0 <HAL_GetTick>
 8001f0a:	0002      	movs	r2, r0
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	4a54      	ldr	r2, [pc, #336]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d904      	bls.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001f16:	2313      	movs	r3, #19
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	701a      	strb	r2, [r3, #0]
            break;
 8001f1e:	e004      	b.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f20:	4b4c      	ldr	r3, [pc, #304]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f24:	2202      	movs	r2, #2
 8001f26:	4013      	ands	r3, r2
 8001f28:	d0ed      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001f2a:	2313      	movs	r3, #19
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10a      	bne.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f34:	4b47      	ldr	r3, [pc, #284]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f38:	4a48      	ldr	r2, [pc, #288]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699a      	ldr	r2, [r3, #24]
 8001f42:	4b44      	ldr	r3, [pc, #272]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f44:	430a      	orrs	r2, r1
 8001f46:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f48:	e00c      	b.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f4a:	2312      	movs	r3, #18
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	2213      	movs	r2, #19
 8001f50:	18ba      	adds	r2, r7, r2
 8001f52:	7812      	ldrb	r2, [r2, #0]
 8001f54:	701a      	strb	r2, [r3, #0]
 8001f56:	e005      	b.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f58:	2312      	movs	r3, #18
 8001f5a:	18fb      	adds	r3, r7, r3
 8001f5c:	2213      	movs	r2, #19
 8001f5e:	18ba      	adds	r2, r7, r2
 8001f60:	7812      	ldrb	r2, [r2, #0]
 8001f62:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f64:	2311      	movs	r3, #17
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d105      	bne.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6e:	4b39      	ldr	r3, [pc, #228]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f72:	4b38      	ldr	r3, [pc, #224]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f74:	493c      	ldr	r1, [pc, #240]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001f76:	400a      	ands	r2, r1
 8001f78:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	4013      	ands	r3, r2
 8001f82:	d009      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f84:	4b33      	ldr	r3, [pc, #204]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f88:	2203      	movs	r2, #3
 8001f8a:	4393      	bics	r3, r2
 8001f8c:	0019      	movs	r1, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	4b30      	ldr	r3, [pc, #192]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f94:	430a      	orrs	r2, r1
 8001f96:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d009      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fa2:	4b2c      	ldr	r3, [pc, #176]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	4393      	bics	r3, r2
 8001faa:	0019      	movs	r1, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	4b28      	ldr	r3, [pc, #160]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d009      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fc0:	4b24      	ldr	r3, [pc, #144]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc4:	4a29      	ldr	r2, [pc, #164]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	0019      	movs	r1, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	4b21      	ldr	r3, [pc, #132]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	01db      	lsls	r3, r3, #7
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d015      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fe0:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	0899      	lsrs	r1, r3, #2
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	695a      	ldr	r2, [r3, #20]
 8001fec:	4b19      	ldr	r3, [pc, #100]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	695a      	ldr	r2, [r3, #20]
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	05db      	lsls	r3, r3, #23
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d106      	bne.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ffe:	4b15      	ldr	r3, [pc, #84]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	4b14      	ldr	r3, [pc, #80]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002004:	2180      	movs	r1, #128	; 0x80
 8002006:	0249      	lsls	r1, r1, #9
 8002008:	430a      	orrs	r2, r1
 800200a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	4013      	ands	r3, r2
 8002016:	d016      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002018:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800201a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201c:	4a14      	ldr	r2, [pc, #80]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800201e:	4013      	ands	r3, r2
 8002020:	0019      	movs	r1, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691a      	ldr	r2, [r3, #16]
 8002026:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002028:	430a      	orrs	r2, r1
 800202a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	01db      	lsls	r3, r3, #7
 8002034:	429a      	cmp	r2, r3
 8002036:	d106      	bne.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800203a:	68da      	ldr	r2, [r3, #12]
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800203e:	2180      	movs	r1, #128	; 0x80
 8002040:	0249      	lsls	r1, r1, #9
 8002042:	430a      	orrs	r2, r1
 8002044:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002046:	2312      	movs	r3, #18
 8002048:	18fb      	adds	r3, r7, r3
 800204a:	781b      	ldrb	r3, [r3, #0]
}
 800204c:	0018      	movs	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	b006      	add	sp, #24
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40021000 	.word	0x40021000
 8002058:	40007000 	.word	0x40007000
 800205c:	fffffcff 	.word	0xfffffcff
 8002060:	fffeffff 	.word	0xfffeffff
 8002064:	00001388 	.word	0x00001388
 8002068:	efffffff 	.word	0xefffffff
 800206c:	ffffcfff 	.word	0xffffcfff
 8002070:	ffff3fff 	.word	0xffff3fff

08002074 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e046      	b.n	8002114 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2288      	movs	r2, #136	; 0x88
 800208a:	589b      	ldr	r3, [r3, r2]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d107      	bne.n	80020a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2284      	movs	r2, #132	; 0x84
 8002094:	2100      	movs	r1, #0
 8002096:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	0018      	movs	r0, r3
 800209c:	f7fe fbee 	bl	800087c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2288      	movs	r2, #136	; 0x88
 80020a4:	2124      	movs	r1, #36	; 0x24
 80020a6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2101      	movs	r1, #1
 80020b4:	438a      	bics	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	0018      	movs	r0, r3
 80020bc:	f000 fc66 	bl	800298c <UART_SetConfig>
 80020c0:	0003      	movs	r3, r0
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e024      	b.n	8002114 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	0018      	movs	r0, r3
 80020d6:	f000 fdfd 	bl	8002cd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	490d      	ldr	r1, [pc, #52]	; (800211c <HAL_UART_Init+0xa8>)
 80020e6:	400a      	ands	r2, r1
 80020e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	212a      	movs	r1, #42	; 0x2a
 80020f6:	438a      	bics	r2, r1
 80020f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2101      	movs	r1, #1
 8002106:	430a      	orrs	r2, r1
 8002108:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	0018      	movs	r0, r3
 800210e:	f000 fe95 	bl	8002e3c <UART_CheckIdleState>
 8002112:	0003      	movs	r3, r0
}
 8002114:	0018      	movs	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	b002      	add	sp, #8
 800211a:	bd80      	pop	{r7, pc}
 800211c:	ffffb7ff 	.word	0xffffb7ff

08002120 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	; 0x28
 8002124:	af02      	add	r7, sp, #8
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	1dbb      	adds	r3, r7, #6
 800212e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2288      	movs	r2, #136	; 0x88
 8002134:	589b      	ldr	r3, [r3, r2]
 8002136:	2b20      	cmp	r3, #32
 8002138:	d000      	beq.n	800213c <HAL_UART_Transmit+0x1c>
 800213a:	e088      	b.n	800224e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_UART_Transmit+0x2a>
 8002142:	1dbb      	adds	r3, r7, #6
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e080      	b.n	8002250 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	015b      	lsls	r3, r3, #5
 8002156:	429a      	cmp	r2, r3
 8002158:	d109      	bne.n	800216e <HAL_UART_Transmit+0x4e>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d105      	bne.n	800216e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2201      	movs	r2, #1
 8002166:	4013      	ands	r3, r2
 8002168:	d001      	beq.n	800216e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e070      	b.n	8002250 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2290      	movs	r2, #144	; 0x90
 8002172:	2100      	movs	r1, #0
 8002174:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2288      	movs	r2, #136	; 0x88
 800217a:	2121      	movs	r1, #33	; 0x21
 800217c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800217e:	f7fe fcb7 	bl	8000af0 <HAL_GetTick>
 8002182:	0003      	movs	r3, r0
 8002184:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1dba      	adds	r2, r7, #6
 800218a:	2154      	movs	r1, #84	; 0x54
 800218c:	8812      	ldrh	r2, [r2, #0]
 800218e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1dba      	adds	r2, r7, #6
 8002194:	2156      	movs	r1, #86	; 0x56
 8002196:	8812      	ldrh	r2, [r2, #0]
 8002198:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	015b      	lsls	r3, r3, #5
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d108      	bne.n	80021b8 <HAL_UART_Transmit+0x98>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d104      	bne.n	80021b8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	61bb      	str	r3, [r7, #24]
 80021b6:	e003      	b.n	80021c0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80021c0:	e02c      	b.n	800221c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	0013      	movs	r3, r2
 80021cc:	2200      	movs	r2, #0
 80021ce:	2180      	movs	r1, #128	; 0x80
 80021d0:	f000 fe82 	bl	8002ed8 <UART_WaitOnFlagUntilTimeout>
 80021d4:	1e03      	subs	r3, r0, #0
 80021d6:	d001      	beq.n	80021dc <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e039      	b.n	8002250 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10b      	bne.n	80021fa <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	001a      	movs	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	05d2      	lsls	r2, r2, #23
 80021ee:	0dd2      	lsrs	r2, r2, #23
 80021f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	3302      	adds	r3, #2
 80021f6:	61bb      	str	r3, [r7, #24]
 80021f8:	e007      	b.n	800220a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	781a      	ldrb	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	3301      	adds	r3, #1
 8002208:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2256      	movs	r2, #86	; 0x56
 800220e:	5a9b      	ldrh	r3, [r3, r2]
 8002210:	b29b      	uxth	r3, r3
 8002212:	3b01      	subs	r3, #1
 8002214:	b299      	uxth	r1, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2256      	movs	r2, #86	; 0x56
 800221a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2256      	movs	r2, #86	; 0x56
 8002220:	5a9b      	ldrh	r3, [r3, r2]
 8002222:	b29b      	uxth	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1cc      	bne.n	80021c2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	0013      	movs	r3, r2
 8002232:	2200      	movs	r2, #0
 8002234:	2140      	movs	r1, #64	; 0x40
 8002236:	f000 fe4f 	bl	8002ed8 <UART_WaitOnFlagUntilTimeout>
 800223a:	1e03      	subs	r3, r0, #0
 800223c:	d001      	beq.n	8002242 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e006      	b.n	8002250 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2288      	movs	r2, #136	; 0x88
 8002246:	2120      	movs	r1, #32
 8002248:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	e000      	b.n	8002250 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800224e:	2302      	movs	r3, #2
  }
}
 8002250:	0018      	movs	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	b008      	add	sp, #32
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	1dbb      	adds	r3, r7, #6
 8002264:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	228c      	movs	r2, #140	; 0x8c
 800226a:	589b      	ldr	r3, [r3, r2]
 800226c:	2b20      	cmp	r3, #32
 800226e:	d145      	bne.n	80022fc <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_UART_Receive_IT+0x26>
 8002276:	1dbb      	adds	r3, r7, #6
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e03d      	b.n	80022fe <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	2380      	movs	r3, #128	; 0x80
 8002288:	015b      	lsls	r3, r3, #5
 800228a:	429a      	cmp	r2, r3
 800228c:	d109      	bne.n	80022a2 <HAL_UART_Receive_IT+0x4a>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d105      	bne.n	80022a2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2201      	movs	r2, #1
 800229a:	4013      	ands	r3, r2
 800229c:	d001      	beq.n	80022a2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e02d      	b.n	80022fe <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	041b      	lsls	r3, r3, #16
 80022b2:	4013      	ands	r3, r2
 80022b4:	d019      	beq.n	80022ea <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022b6:	f3ef 8310 	mrs	r3, PRIMASK
 80022ba:	613b      	str	r3, [r7, #16]
  return(result);
 80022bc:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80022be:	61fb      	str	r3, [r7, #28]
 80022c0:	2301      	movs	r3, #1
 80022c2:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f383 8810 	msr	PRIMASK, r3
}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2180      	movs	r1, #128	; 0x80
 80022d8:	04c9      	lsls	r1, r1, #19
 80022da:	430a      	orrs	r2, r1
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	f383 8810 	msr	PRIMASK, r3
}
 80022e8:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80022ea:	1dbb      	adds	r3, r7, #6
 80022ec:	881a      	ldrh	r2, [r3, #0]
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	0018      	movs	r0, r3
 80022f4:	f000 feb8 	bl	8003068 <UART_Start_Receive_IT>
 80022f8:	0003      	movs	r3, r0
 80022fa:	e000      	b.n	80022fe <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80022fc:	2302      	movs	r3, #2
  }
}
 80022fe:	0018      	movs	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	b008      	add	sp, #32
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002308:	b5b0      	push	{r4, r5, r7, lr}
 800230a:	b0aa      	sub	sp, #168	; 0xa8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	22a4      	movs	r2, #164	; 0xa4
 8002318:	18b9      	adds	r1, r7, r2
 800231a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	20a0      	movs	r0, #160	; 0xa0
 8002324:	1839      	adds	r1, r7, r0
 8002326:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	249c      	movs	r4, #156	; 0x9c
 8002330:	1939      	adds	r1, r7, r4
 8002332:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002334:	0011      	movs	r1, r2
 8002336:	18bb      	adds	r3, r7, r2
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4aa2      	ldr	r2, [pc, #648]	; (80025c4 <HAL_UART_IRQHandler+0x2bc>)
 800233c:	4013      	ands	r3, r2
 800233e:	2298      	movs	r2, #152	; 0x98
 8002340:	18bd      	adds	r5, r7, r2
 8002342:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002344:	18bb      	adds	r3, r7, r2
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d11a      	bne.n	8002382 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800234c:	187b      	adds	r3, r7, r1
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2220      	movs	r2, #32
 8002352:	4013      	ands	r3, r2
 8002354:	d015      	beq.n	8002382 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002356:	183b      	adds	r3, r7, r0
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2220      	movs	r2, #32
 800235c:	4013      	ands	r3, r2
 800235e:	d105      	bne.n	800236c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002360:	193b      	adds	r3, r7, r4
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	055b      	lsls	r3, r3, #21
 8002368:	4013      	ands	r3, r2
 800236a:	d00a      	beq.n	8002382 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002370:	2b00      	cmp	r3, #0
 8002372:	d100      	bne.n	8002376 <HAL_UART_IRQHandler+0x6e>
 8002374:	e2dc      	b.n	8002930 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	0010      	movs	r0, r2
 800237e:	4798      	blx	r3
      }
      return;
 8002380:	e2d6      	b.n	8002930 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002382:	2398      	movs	r3, #152	; 0x98
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d100      	bne.n	800238e <HAL_UART_IRQHandler+0x86>
 800238c:	e122      	b.n	80025d4 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800238e:	239c      	movs	r3, #156	; 0x9c
 8002390:	18fb      	adds	r3, r7, r3
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a8c      	ldr	r2, [pc, #560]	; (80025c8 <HAL_UART_IRQHandler+0x2c0>)
 8002396:	4013      	ands	r3, r2
 8002398:	d106      	bne.n	80023a8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800239a:	23a0      	movs	r3, #160	; 0xa0
 800239c:	18fb      	adds	r3, r7, r3
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a8a      	ldr	r2, [pc, #552]	; (80025cc <HAL_UART_IRQHandler+0x2c4>)
 80023a2:	4013      	ands	r3, r2
 80023a4:	d100      	bne.n	80023a8 <HAL_UART_IRQHandler+0xa0>
 80023a6:	e115      	b.n	80025d4 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80023a8:	23a4      	movs	r3, #164	; 0xa4
 80023aa:	18fb      	adds	r3, r7, r3
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2201      	movs	r2, #1
 80023b0:	4013      	ands	r3, r2
 80023b2:	d012      	beq.n	80023da <HAL_UART_IRQHandler+0xd2>
 80023b4:	23a0      	movs	r3, #160	; 0xa0
 80023b6:	18fb      	adds	r3, r7, r3
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	4013      	ands	r3, r2
 80023c0:	d00b      	beq.n	80023da <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2201      	movs	r2, #1
 80023c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2290      	movs	r2, #144	; 0x90
 80023ce:	589b      	ldr	r3, [r3, r2]
 80023d0:	2201      	movs	r2, #1
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2190      	movs	r1, #144	; 0x90
 80023d8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80023da:	23a4      	movs	r3, #164	; 0xa4
 80023dc:	18fb      	adds	r3, r7, r3
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2202      	movs	r2, #2
 80023e2:	4013      	ands	r3, r2
 80023e4:	d011      	beq.n	800240a <HAL_UART_IRQHandler+0x102>
 80023e6:	239c      	movs	r3, #156	; 0x9c
 80023e8:	18fb      	adds	r3, r7, r3
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2201      	movs	r2, #1
 80023ee:	4013      	ands	r3, r2
 80023f0:	d00b      	beq.n	800240a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2202      	movs	r2, #2
 80023f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2290      	movs	r2, #144	; 0x90
 80023fe:	589b      	ldr	r3, [r3, r2]
 8002400:	2204      	movs	r2, #4
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2190      	movs	r1, #144	; 0x90
 8002408:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800240a:	23a4      	movs	r3, #164	; 0xa4
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2204      	movs	r2, #4
 8002412:	4013      	ands	r3, r2
 8002414:	d011      	beq.n	800243a <HAL_UART_IRQHandler+0x132>
 8002416:	239c      	movs	r3, #156	; 0x9c
 8002418:	18fb      	adds	r3, r7, r3
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2201      	movs	r2, #1
 800241e:	4013      	ands	r3, r2
 8002420:	d00b      	beq.n	800243a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2204      	movs	r2, #4
 8002428:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2290      	movs	r2, #144	; 0x90
 800242e:	589b      	ldr	r3, [r3, r2]
 8002430:	2202      	movs	r2, #2
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2190      	movs	r1, #144	; 0x90
 8002438:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800243a:	23a4      	movs	r3, #164	; 0xa4
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2208      	movs	r2, #8
 8002442:	4013      	ands	r3, r2
 8002444:	d017      	beq.n	8002476 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002446:	23a0      	movs	r3, #160	; 0xa0
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2220      	movs	r2, #32
 800244e:	4013      	ands	r3, r2
 8002450:	d105      	bne.n	800245e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002452:	239c      	movs	r3, #156	; 0x9c
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a5b      	ldr	r2, [pc, #364]	; (80025c8 <HAL_UART_IRQHandler+0x2c0>)
 800245a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800245c:	d00b      	beq.n	8002476 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2208      	movs	r2, #8
 8002464:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2290      	movs	r2, #144	; 0x90
 800246a:	589b      	ldr	r3, [r3, r2]
 800246c:	2208      	movs	r2, #8
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2190      	movs	r1, #144	; 0x90
 8002474:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002476:	23a4      	movs	r3, #164	; 0xa4
 8002478:	18fb      	adds	r3, r7, r3
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	2380      	movs	r3, #128	; 0x80
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	4013      	ands	r3, r2
 8002482:	d013      	beq.n	80024ac <HAL_UART_IRQHandler+0x1a4>
 8002484:	23a0      	movs	r3, #160	; 0xa0
 8002486:	18fb      	adds	r3, r7, r3
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	04db      	lsls	r3, r3, #19
 800248e:	4013      	ands	r3, r2
 8002490:	d00c      	beq.n	80024ac <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2280      	movs	r2, #128	; 0x80
 8002498:	0112      	lsls	r2, r2, #4
 800249a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2290      	movs	r2, #144	; 0x90
 80024a0:	589b      	ldr	r3, [r3, r2]
 80024a2:	2220      	movs	r2, #32
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2190      	movs	r1, #144	; 0x90
 80024aa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2290      	movs	r2, #144	; 0x90
 80024b0:	589b      	ldr	r3, [r3, r2]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d100      	bne.n	80024b8 <HAL_UART_IRQHandler+0x1b0>
 80024b6:	e23d      	b.n	8002934 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80024b8:	23a4      	movs	r3, #164	; 0xa4
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2220      	movs	r2, #32
 80024c0:	4013      	ands	r3, r2
 80024c2:	d015      	beq.n	80024f0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80024c4:	23a0      	movs	r3, #160	; 0xa0
 80024c6:	18fb      	adds	r3, r7, r3
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2220      	movs	r2, #32
 80024cc:	4013      	ands	r3, r2
 80024ce:	d106      	bne.n	80024de <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80024d0:	239c      	movs	r3, #156	; 0x9c
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	055b      	lsls	r3, r3, #21
 80024da:	4013      	ands	r3, r2
 80024dc:	d008      	beq.n	80024f0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d004      	beq.n	80024f0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	0010      	movs	r0, r2
 80024ee:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2290      	movs	r2, #144	; 0x90
 80024f4:	589b      	ldr	r3, [r3, r2]
 80024f6:	2194      	movs	r1, #148	; 0x94
 80024f8:	187a      	adds	r2, r7, r1
 80024fa:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2240      	movs	r2, #64	; 0x40
 8002504:	4013      	ands	r3, r2
 8002506:	2b40      	cmp	r3, #64	; 0x40
 8002508:	d004      	beq.n	8002514 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800250a:	187b      	adds	r3, r7, r1
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2228      	movs	r2, #40	; 0x28
 8002510:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002512:	d04c      	beq.n	80025ae <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	0018      	movs	r0, r3
 8002518:	f000 feca 	bl	80032b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2240      	movs	r2, #64	; 0x40
 8002524:	4013      	ands	r3, r2
 8002526:	2b40      	cmp	r3, #64	; 0x40
 8002528:	d13c      	bne.n	80025a4 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800252a:	f3ef 8310 	mrs	r3, PRIMASK
 800252e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002530:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002532:	2090      	movs	r0, #144	; 0x90
 8002534:	183a      	adds	r2, r7, r0
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	2301      	movs	r3, #1
 800253a:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800253c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800253e:	f383 8810 	msr	PRIMASK, r3
}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2140      	movs	r1, #64	; 0x40
 8002550:	438a      	bics	r2, r1
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	183b      	adds	r3, r7, r0
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800255a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800255c:	f383 8810 	msr	PRIMASK, r3
}
 8002560:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2280      	movs	r2, #128	; 0x80
 8002566:	589b      	ldr	r3, [r3, r2]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d016      	beq.n	800259a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2280      	movs	r2, #128	; 0x80
 8002570:	589b      	ldr	r3, [r3, r2]
 8002572:	4a17      	ldr	r2, [pc, #92]	; (80025d0 <HAL_UART_IRQHandler+0x2c8>)
 8002574:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2280      	movs	r2, #128	; 0x80
 800257a:	589b      	ldr	r3, [r3, r2]
 800257c:	0018      	movs	r0, r3
 800257e:	f7fe fc25 	bl	8000dcc <HAL_DMA_Abort_IT>
 8002582:	1e03      	subs	r3, r0, #0
 8002584:	d01c      	beq.n	80025c0 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2280      	movs	r2, #128	; 0x80
 800258a:	589b      	ldr	r3, [r3, r2]
 800258c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	2180      	movs	r1, #128	; 0x80
 8002592:	5852      	ldr	r2, [r2, r1]
 8002594:	0010      	movs	r0, r2
 8002596:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002598:	e012      	b.n	80025c0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	0018      	movs	r0, r3
 800259e:	f000 f9e1 	bl	8002964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a2:	e00d      	b.n	80025c0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	0018      	movs	r0, r3
 80025a8:	f000 f9dc 	bl	8002964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ac:	e008      	b.n	80025c0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	0018      	movs	r0, r3
 80025b2:	f000 f9d7 	bl	8002964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2290      	movs	r2, #144	; 0x90
 80025ba:	2100      	movs	r1, #0
 80025bc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80025be:	e1b9      	b.n	8002934 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c0:	46c0      	nop			; (mov r8, r8)
    return;
 80025c2:	e1b7      	b.n	8002934 <HAL_UART_IRQHandler+0x62c>
 80025c4:	0000080f 	.word	0x0000080f
 80025c8:	10000001 	.word	0x10000001
 80025cc:	04000120 	.word	0x04000120
 80025d0:	0800337d 	.word	0x0800337d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d000      	beq.n	80025de <HAL_UART_IRQHandler+0x2d6>
 80025dc:	e13e      	b.n	800285c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80025de:	23a4      	movs	r3, #164	; 0xa4
 80025e0:	18fb      	adds	r3, r7, r3
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2210      	movs	r2, #16
 80025e6:	4013      	ands	r3, r2
 80025e8:	d100      	bne.n	80025ec <HAL_UART_IRQHandler+0x2e4>
 80025ea:	e137      	b.n	800285c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80025ec:	23a0      	movs	r3, #160	; 0xa0
 80025ee:	18fb      	adds	r3, r7, r3
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2210      	movs	r2, #16
 80025f4:	4013      	ands	r3, r2
 80025f6:	d100      	bne.n	80025fa <HAL_UART_IRQHandler+0x2f2>
 80025f8:	e130      	b.n	800285c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2210      	movs	r2, #16
 8002600:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2240      	movs	r2, #64	; 0x40
 800260a:	4013      	ands	r3, r2
 800260c:	2b40      	cmp	r3, #64	; 0x40
 800260e:	d000      	beq.n	8002612 <HAL_UART_IRQHandler+0x30a>
 8002610:	e0a4      	b.n	800275c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2280      	movs	r2, #128	; 0x80
 8002616:	589b      	ldr	r3, [r3, r2]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	217e      	movs	r1, #126	; 0x7e
 800261e:	187b      	adds	r3, r7, r1
 8002620:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002622:	187b      	adds	r3, r7, r1
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d100      	bne.n	800262c <HAL_UART_IRQHandler+0x324>
 800262a:	e185      	b.n	8002938 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	225c      	movs	r2, #92	; 0x5c
 8002630:	5a9b      	ldrh	r3, [r3, r2]
 8002632:	187a      	adds	r2, r7, r1
 8002634:	8812      	ldrh	r2, [r2, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d300      	bcc.n	800263c <HAL_UART_IRQHandler+0x334>
 800263a:	e17d      	b.n	8002938 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	187a      	adds	r2, r7, r1
 8002640:	215e      	movs	r1, #94	; 0x5e
 8002642:	8812      	ldrh	r2, [r2, #0]
 8002644:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2280      	movs	r2, #128	; 0x80
 800264a:	589b      	ldr	r3, [r3, r2]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2220      	movs	r2, #32
 8002652:	4013      	ands	r3, r2
 8002654:	d170      	bne.n	8002738 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002656:	f3ef 8310 	mrs	r3, PRIMASK
 800265a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800265c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800265e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002660:	2301      	movs	r3, #1
 8002662:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002666:	f383 8810 	msr	PRIMASK, r3
}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	49b4      	ldr	r1, [pc, #720]	; (8002948 <HAL_UART_IRQHandler+0x640>)
 8002678:	400a      	ands	r2, r1
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800267e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002682:	f383 8810 	msr	PRIMASK, r3
}
 8002686:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002688:	f3ef 8310 	mrs	r3, PRIMASK
 800268c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800268e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002690:	677b      	str	r3, [r7, #116]	; 0x74
 8002692:	2301      	movs	r3, #1
 8002694:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002698:	f383 8810 	msr	PRIMASK, r3
}
 800269c:	46c0      	nop			; (mov r8, r8)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2101      	movs	r1, #1
 80026aa:	438a      	bics	r2, r1
 80026ac:	609a      	str	r2, [r3, #8]
 80026ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026b0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b4:	f383 8810 	msr	PRIMASK, r3
}
 80026b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ba:	f3ef 8310 	mrs	r3, PRIMASK
 80026be:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80026c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026c2:	673b      	str	r3, [r7, #112]	; 0x70
 80026c4:	2301      	movs	r3, #1
 80026c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ca:	f383 8810 	msr	PRIMASK, r3
}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2140      	movs	r1, #64	; 0x40
 80026dc:	438a      	bics	r2, r1
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026e2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026e6:	f383 8810 	msr	PRIMASK, r3
}
 80026ea:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	228c      	movs	r2, #140	; 0x8c
 80026f0:	2120      	movs	r1, #32
 80026f2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026fa:	f3ef 8310 	mrs	r3, PRIMASK
 80026fe:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002700:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002702:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002704:	2301      	movs	r3, #1
 8002706:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002708:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800270a:	f383 8810 	msr	PRIMASK, r3
}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2110      	movs	r1, #16
 800271c:	438a      	bics	r2, r1
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002722:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002726:	f383 8810 	msr	PRIMASK, r3
}
 800272a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2280      	movs	r2, #128	; 0x80
 8002730:	589b      	ldr	r3, [r3, r2]
 8002732:	0018      	movs	r0, r3
 8002734:	f7fe fae8 	bl	8000d08 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	225c      	movs	r2, #92	; 0x5c
 8002742:	5a9a      	ldrh	r2, [r3, r2]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	215e      	movs	r1, #94	; 0x5e
 8002748:	5a5b      	ldrh	r3, [r3, r1]
 800274a:	b29b      	uxth	r3, r3
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	b29a      	uxth	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	0011      	movs	r1, r2
 8002754:	0018      	movs	r0, r3
 8002756:	f000 f90d 	bl	8002974 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800275a:	e0ed      	b.n	8002938 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	225c      	movs	r2, #92	; 0x5c
 8002760:	5a99      	ldrh	r1, [r3, r2]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	225e      	movs	r2, #94	; 0x5e
 8002766:	5a9b      	ldrh	r3, [r3, r2]
 8002768:	b29a      	uxth	r2, r3
 800276a:	208e      	movs	r0, #142	; 0x8e
 800276c:	183b      	adds	r3, r7, r0
 800276e:	1a8a      	subs	r2, r1, r2
 8002770:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	225e      	movs	r2, #94	; 0x5e
 8002776:	5a9b      	ldrh	r3, [r3, r2]
 8002778:	b29b      	uxth	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d100      	bne.n	8002780 <HAL_UART_IRQHandler+0x478>
 800277e:	e0dd      	b.n	800293c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002780:	183b      	adds	r3, r7, r0
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d100      	bne.n	800278a <HAL_UART_IRQHandler+0x482>
 8002788:	e0d8      	b.n	800293c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800278a:	f3ef 8310 	mrs	r3, PRIMASK
 800278e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002790:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002792:	2488      	movs	r4, #136	; 0x88
 8002794:	193a      	adds	r2, r7, r4
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	2301      	movs	r3, #1
 800279a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	f383 8810 	msr	PRIMASK, r3
}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4967      	ldr	r1, [pc, #412]	; (800294c <HAL_UART_IRQHandler+0x644>)
 80027b0:	400a      	ands	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	193b      	adds	r3, r7, r4
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f383 8810 	msr	PRIMASK, r3
}
 80027c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027c2:	f3ef 8310 	mrs	r3, PRIMASK
 80027c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80027c8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80027ca:	2484      	movs	r4, #132	; 0x84
 80027cc:	193a      	adds	r2, r7, r4
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	2301      	movs	r3, #1
 80027d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f383 8810 	msr	PRIMASK, r3
}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	495a      	ldr	r1, [pc, #360]	; (8002950 <HAL_UART_IRQHandler+0x648>)
 80027e8:	400a      	ands	r2, r1
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	193b      	adds	r3, r7, r4
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	f383 8810 	msr	PRIMASK, r3
}
 80027f8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	228c      	movs	r2, #140	; 0x8c
 80027fe:	2120      	movs	r1, #32
 8002800:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800280e:	f3ef 8310 	mrs	r3, PRIMASK
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002816:	2480      	movs	r4, #128	; 0x80
 8002818:	193a      	adds	r2, r7, r4
 800281a:	6013      	str	r3, [r2, #0]
 800281c:	2301      	movs	r3, #1
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002822:	f383 8810 	msr	PRIMASK, r3
}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2110      	movs	r1, #16
 8002834:	438a      	bics	r2, r1
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	193b      	adds	r3, r7, r4
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800283e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002840:	f383 8810 	msr	PRIMASK, r3
}
 8002844:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2202      	movs	r2, #2
 800284a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800284c:	183b      	adds	r3, r7, r0
 800284e:	881a      	ldrh	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	0011      	movs	r1, r2
 8002854:	0018      	movs	r0, r3
 8002856:	f000 f88d 	bl	8002974 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800285a:	e06f      	b.n	800293c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800285c:	23a4      	movs	r3, #164	; 0xa4
 800285e:	18fb      	adds	r3, r7, r3
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	2380      	movs	r3, #128	; 0x80
 8002864:	035b      	lsls	r3, r3, #13
 8002866:	4013      	ands	r3, r2
 8002868:	d010      	beq.n	800288c <HAL_UART_IRQHandler+0x584>
 800286a:	239c      	movs	r3, #156	; 0x9c
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	03db      	lsls	r3, r3, #15
 8002874:	4013      	ands	r3, r2
 8002876:	d009      	beq.n	800288c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2280      	movs	r2, #128	; 0x80
 800287e:	0352      	lsls	r2, r2, #13
 8002880:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	0018      	movs	r0, r3
 8002886:	f001 fa1d 	bl	8003cc4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800288a:	e05a      	b.n	8002942 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800288c:	23a4      	movs	r3, #164	; 0xa4
 800288e:	18fb      	adds	r3, r7, r3
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2280      	movs	r2, #128	; 0x80
 8002894:	4013      	ands	r3, r2
 8002896:	d016      	beq.n	80028c6 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002898:	23a0      	movs	r3, #160	; 0xa0
 800289a:	18fb      	adds	r3, r7, r3
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2280      	movs	r2, #128	; 0x80
 80028a0:	4013      	ands	r3, r2
 80028a2:	d106      	bne.n	80028b2 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80028a4:	239c      	movs	r3, #156	; 0x9c
 80028a6:	18fb      	adds	r3, r7, r3
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	041b      	lsls	r3, r3, #16
 80028ae:	4013      	ands	r3, r2
 80028b0:	d009      	beq.n	80028c6 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d042      	beq.n	8002940 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	0010      	movs	r0, r2
 80028c2:	4798      	blx	r3
    }
    return;
 80028c4:	e03c      	b.n	8002940 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80028c6:	23a4      	movs	r3, #164	; 0xa4
 80028c8:	18fb      	adds	r3, r7, r3
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2240      	movs	r2, #64	; 0x40
 80028ce:	4013      	ands	r3, r2
 80028d0:	d00a      	beq.n	80028e8 <HAL_UART_IRQHandler+0x5e0>
 80028d2:	23a0      	movs	r3, #160	; 0xa0
 80028d4:	18fb      	adds	r3, r7, r3
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2240      	movs	r2, #64	; 0x40
 80028da:	4013      	ands	r3, r2
 80028dc:	d004      	beq.n	80028e8 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	0018      	movs	r0, r3
 80028e2:	f000 fd62 	bl	80033aa <UART_EndTransmit_IT>
    return;
 80028e6:	e02c      	b.n	8002942 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80028e8:	23a4      	movs	r3, #164	; 0xa4
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	2380      	movs	r3, #128	; 0x80
 80028f0:	041b      	lsls	r3, r3, #16
 80028f2:	4013      	ands	r3, r2
 80028f4:	d00b      	beq.n	800290e <HAL_UART_IRQHandler+0x606>
 80028f6:	23a0      	movs	r3, #160	; 0xa0
 80028f8:	18fb      	adds	r3, r7, r3
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	05db      	lsls	r3, r3, #23
 8002900:	4013      	ands	r3, r2
 8002902:	d004      	beq.n	800290e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	0018      	movs	r0, r3
 8002908:	f001 f9ec 	bl	8003ce4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800290c:	e019      	b.n	8002942 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800290e:	23a4      	movs	r3, #164	; 0xa4
 8002910:	18fb      	adds	r3, r7, r3
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	2380      	movs	r3, #128	; 0x80
 8002916:	045b      	lsls	r3, r3, #17
 8002918:	4013      	ands	r3, r2
 800291a:	d012      	beq.n	8002942 <HAL_UART_IRQHandler+0x63a>
 800291c:	23a0      	movs	r3, #160	; 0xa0
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	da0d      	bge.n	8002942 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	0018      	movs	r0, r3
 800292a:	f001 f9d3 	bl	8003cd4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800292e:	e008      	b.n	8002942 <HAL_UART_IRQHandler+0x63a>
      return;
 8002930:	46c0      	nop			; (mov r8, r8)
 8002932:	e006      	b.n	8002942 <HAL_UART_IRQHandler+0x63a>
    return;
 8002934:	46c0      	nop			; (mov r8, r8)
 8002936:	e004      	b.n	8002942 <HAL_UART_IRQHandler+0x63a>
      return;
 8002938:	46c0      	nop			; (mov r8, r8)
 800293a:	e002      	b.n	8002942 <HAL_UART_IRQHandler+0x63a>
      return;
 800293c:	46c0      	nop			; (mov r8, r8)
 800293e:	e000      	b.n	8002942 <HAL_UART_IRQHandler+0x63a>
    return;
 8002940:	46c0      	nop			; (mov r8, r8)
  }
}
 8002942:	46bd      	mov	sp, r7
 8002944:	b02a      	add	sp, #168	; 0xa8
 8002946:	bdb0      	pop	{r4, r5, r7, pc}
 8002948:	fffffeff 	.word	0xfffffeff
 800294c:	fffffedf 	.word	0xfffffedf
 8002950:	effffffe 	.word	0xeffffffe

08002954 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800295c:	46c0      	nop			; (mov r8, r8)
 800295e:	46bd      	mov	sp, r7
 8002960:	b002      	add	sp, #8
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800296c:	46c0      	nop			; (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	b002      	add	sp, #8
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	000a      	movs	r2, r1
 800297e:	1cbb      	adds	r3, r7, #2
 8002980:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	46bd      	mov	sp, r7
 8002986:	b002      	add	sp, #8
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002994:	231a      	movs	r3, #26
 8002996:	18fb      	adds	r3, r7, r3
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	431a      	orrs	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4abc      	ldr	r2, [pc, #752]	; (8002cac <UART_SetConfig+0x320>)
 80029bc:	4013      	ands	r3, r2
 80029be:	0019      	movs	r1, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	69fa      	ldr	r2, [r7, #28]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	4ab7      	ldr	r2, [pc, #732]	; (8002cb0 <UART_SetConfig+0x324>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	0019      	movs	r1, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	69fa      	ldr	r2, [r7, #28]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	4aae      	ldr	r2, [pc, #696]	; (8002cb4 <UART_SetConfig+0x328>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	0019      	movs	r1, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	69fa      	ldr	r2, [r7, #28]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0e:	220f      	movs	r2, #15
 8002a10:	4393      	bics	r3, r2
 8002a12:	0019      	movs	r1, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4aa4      	ldr	r2, [pc, #656]	; (8002cb8 <UART_SetConfig+0x32c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d127      	bne.n	8002a7a <UART_SetConfig+0xee>
 8002a2a:	4ba4      	ldr	r3, [pc, #656]	; (8002cbc <UART_SetConfig+0x330>)
 8002a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2e:	2203      	movs	r2, #3
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b03      	cmp	r3, #3
 8002a34:	d017      	beq.n	8002a66 <UART_SetConfig+0xda>
 8002a36:	d81b      	bhi.n	8002a70 <UART_SetConfig+0xe4>
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d00a      	beq.n	8002a52 <UART_SetConfig+0xc6>
 8002a3c:	d818      	bhi.n	8002a70 <UART_SetConfig+0xe4>
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d002      	beq.n	8002a48 <UART_SetConfig+0xbc>
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d00a      	beq.n	8002a5c <UART_SetConfig+0xd0>
 8002a46:	e013      	b.n	8002a70 <UART_SetConfig+0xe4>
 8002a48:	231b      	movs	r3, #27
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]
 8002a50:	e058      	b.n	8002b04 <UART_SetConfig+0x178>
 8002a52:	231b      	movs	r3, #27
 8002a54:	18fb      	adds	r3, r7, r3
 8002a56:	2202      	movs	r2, #2
 8002a58:	701a      	strb	r2, [r3, #0]
 8002a5a:	e053      	b.n	8002b04 <UART_SetConfig+0x178>
 8002a5c:	231b      	movs	r3, #27
 8002a5e:	18fb      	adds	r3, r7, r3
 8002a60:	2204      	movs	r2, #4
 8002a62:	701a      	strb	r2, [r3, #0]
 8002a64:	e04e      	b.n	8002b04 <UART_SetConfig+0x178>
 8002a66:	231b      	movs	r3, #27
 8002a68:	18fb      	adds	r3, r7, r3
 8002a6a:	2208      	movs	r2, #8
 8002a6c:	701a      	strb	r2, [r3, #0]
 8002a6e:	e049      	b.n	8002b04 <UART_SetConfig+0x178>
 8002a70:	231b      	movs	r3, #27
 8002a72:	18fb      	adds	r3, r7, r3
 8002a74:	2210      	movs	r2, #16
 8002a76:	701a      	strb	r2, [r3, #0]
 8002a78:	e044      	b.n	8002b04 <UART_SetConfig+0x178>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a90      	ldr	r2, [pc, #576]	; (8002cc0 <UART_SetConfig+0x334>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d127      	bne.n	8002ad4 <UART_SetConfig+0x148>
 8002a84:	4b8d      	ldr	r3, [pc, #564]	; (8002cbc <UART_SetConfig+0x330>)
 8002a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a88:	220c      	movs	r2, #12
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	2b0c      	cmp	r3, #12
 8002a8e:	d017      	beq.n	8002ac0 <UART_SetConfig+0x134>
 8002a90:	d81b      	bhi.n	8002aca <UART_SetConfig+0x13e>
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d00a      	beq.n	8002aac <UART_SetConfig+0x120>
 8002a96:	d818      	bhi.n	8002aca <UART_SetConfig+0x13e>
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <UART_SetConfig+0x116>
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d00a      	beq.n	8002ab6 <UART_SetConfig+0x12a>
 8002aa0:	e013      	b.n	8002aca <UART_SetConfig+0x13e>
 8002aa2:	231b      	movs	r3, #27
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
 8002aaa:	e02b      	b.n	8002b04 <UART_SetConfig+0x178>
 8002aac:	231b      	movs	r3, #27
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	701a      	strb	r2, [r3, #0]
 8002ab4:	e026      	b.n	8002b04 <UART_SetConfig+0x178>
 8002ab6:	231b      	movs	r3, #27
 8002ab8:	18fb      	adds	r3, r7, r3
 8002aba:	2204      	movs	r2, #4
 8002abc:	701a      	strb	r2, [r3, #0]
 8002abe:	e021      	b.n	8002b04 <UART_SetConfig+0x178>
 8002ac0:	231b      	movs	r3, #27
 8002ac2:	18fb      	adds	r3, r7, r3
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	701a      	strb	r2, [r3, #0]
 8002ac8:	e01c      	b.n	8002b04 <UART_SetConfig+0x178>
 8002aca:	231b      	movs	r3, #27
 8002acc:	18fb      	adds	r3, r7, r3
 8002ace:	2210      	movs	r2, #16
 8002ad0:	701a      	strb	r2, [r3, #0]
 8002ad2:	e017      	b.n	8002b04 <UART_SetConfig+0x178>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a7a      	ldr	r2, [pc, #488]	; (8002cc4 <UART_SetConfig+0x338>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d104      	bne.n	8002ae8 <UART_SetConfig+0x15c>
 8002ade:	231b      	movs	r3, #27
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]
 8002ae6:	e00d      	b.n	8002b04 <UART_SetConfig+0x178>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a76      	ldr	r2, [pc, #472]	; (8002cc8 <UART_SetConfig+0x33c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d104      	bne.n	8002afc <UART_SetConfig+0x170>
 8002af2:	231b      	movs	r3, #27
 8002af4:	18fb      	adds	r3, r7, r3
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]
 8002afa:	e003      	b.n	8002b04 <UART_SetConfig+0x178>
 8002afc:	231b      	movs	r3, #27
 8002afe:	18fb      	adds	r3, r7, r3
 8002b00:	2210      	movs	r2, #16
 8002b02:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69da      	ldr	r2, [r3, #28]
 8002b08:	2380      	movs	r3, #128	; 0x80
 8002b0a:	021b      	lsls	r3, r3, #8
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d000      	beq.n	8002b12 <UART_SetConfig+0x186>
 8002b10:	e065      	b.n	8002bde <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8002b12:	231b      	movs	r3, #27
 8002b14:	18fb      	adds	r3, r7, r3
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d015      	beq.n	8002b48 <UART_SetConfig+0x1bc>
 8002b1c:	dc18      	bgt.n	8002b50 <UART_SetConfig+0x1c4>
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d00d      	beq.n	8002b3e <UART_SetConfig+0x1b2>
 8002b22:	dc15      	bgt.n	8002b50 <UART_SetConfig+0x1c4>
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <UART_SetConfig+0x1a2>
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d005      	beq.n	8002b38 <UART_SetConfig+0x1ac>
 8002b2c:	e010      	b.n	8002b50 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b2e:	f7ff f957 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 8002b32:	0003      	movs	r3, r0
 8002b34:	617b      	str	r3, [r7, #20]
        break;
 8002b36:	e012      	b.n	8002b5e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b38:	4b64      	ldr	r3, [pc, #400]	; (8002ccc <UART_SetConfig+0x340>)
 8002b3a:	617b      	str	r3, [r7, #20]
        break;
 8002b3c:	e00f      	b.n	8002b5e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b3e:	f7ff f8c3 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8002b42:	0003      	movs	r3, r0
 8002b44:	617b      	str	r3, [r7, #20]
        break;
 8002b46:	e00a      	b.n	8002b5e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	021b      	lsls	r3, r3, #8
 8002b4c:	617b      	str	r3, [r7, #20]
        break;
 8002b4e:	e006      	b.n	8002b5e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002b54:	231a      	movs	r3, #26
 8002b56:	18fb      	adds	r3, r7, r3
 8002b58:	2201      	movs	r2, #1
 8002b5a:	701a      	strb	r2, [r3, #0]
        break;
 8002b5c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d100      	bne.n	8002b66 <UART_SetConfig+0x1da>
 8002b64:	e08d      	b.n	8002c82 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b6a:	4b59      	ldr	r3, [pc, #356]	; (8002cd0 <UART_SetConfig+0x344>)
 8002b6c:	0052      	lsls	r2, r2, #1
 8002b6e:	5ad3      	ldrh	r3, [r2, r3]
 8002b70:	0019      	movs	r1, r3
 8002b72:	6978      	ldr	r0, [r7, #20]
 8002b74:	f7fd fac4 	bl	8000100 <__udivsi3>
 8002b78:	0003      	movs	r3, r0
 8002b7a:	005a      	lsls	r2, r3, #1
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	085b      	lsrs	r3, r3, #1
 8002b82:	18d2      	adds	r2, r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	0019      	movs	r1, r3
 8002b8a:	0010      	movs	r0, r2
 8002b8c:	f7fd fab8 	bl	8000100 <__udivsi3>
 8002b90:	0003      	movs	r3, r0
 8002b92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	2b0f      	cmp	r3, #15
 8002b98:	d91c      	bls.n	8002bd4 <UART_SetConfig+0x248>
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	2380      	movs	r3, #128	; 0x80
 8002b9e:	025b      	lsls	r3, r3, #9
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d217      	bcs.n	8002bd4 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	200e      	movs	r0, #14
 8002baa:	183b      	adds	r3, r7, r0
 8002bac:	210f      	movs	r1, #15
 8002bae:	438a      	bics	r2, r1
 8002bb0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	085b      	lsrs	r3, r3, #1
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	2207      	movs	r2, #7
 8002bba:	4013      	ands	r3, r2
 8002bbc:	b299      	uxth	r1, r3
 8002bbe:	183b      	adds	r3, r7, r0
 8002bc0:	183a      	adds	r2, r7, r0
 8002bc2:	8812      	ldrh	r2, [r2, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	183a      	adds	r2, r7, r0
 8002bce:	8812      	ldrh	r2, [r2, #0]
 8002bd0:	60da      	str	r2, [r3, #12]
 8002bd2:	e056      	b.n	8002c82 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002bd4:	231a      	movs	r3, #26
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	2201      	movs	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]
 8002bdc:	e051      	b.n	8002c82 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bde:	231b      	movs	r3, #27
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d015      	beq.n	8002c14 <UART_SetConfig+0x288>
 8002be8:	dc18      	bgt.n	8002c1c <UART_SetConfig+0x290>
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d00d      	beq.n	8002c0a <UART_SetConfig+0x27e>
 8002bee:	dc15      	bgt.n	8002c1c <UART_SetConfig+0x290>
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <UART_SetConfig+0x26e>
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d005      	beq.n	8002c04 <UART_SetConfig+0x278>
 8002bf8:	e010      	b.n	8002c1c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bfa:	f7ff f8f1 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	617b      	str	r3, [r7, #20]
        break;
 8002c02:	e012      	b.n	8002c2a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c04:	4b31      	ldr	r3, [pc, #196]	; (8002ccc <UART_SetConfig+0x340>)
 8002c06:	617b      	str	r3, [r7, #20]
        break;
 8002c08:	e00f      	b.n	8002c2a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c0a:	f7ff f85d 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8002c0e:	0003      	movs	r3, r0
 8002c10:	617b      	str	r3, [r7, #20]
        break;
 8002c12:	e00a      	b.n	8002c2a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	617b      	str	r3, [r7, #20]
        break;
 8002c1a:	e006      	b.n	8002c2a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002c20:	231a      	movs	r3, #26
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	2201      	movs	r2, #1
 8002c26:	701a      	strb	r2, [r3, #0]
        break;
 8002c28:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d028      	beq.n	8002c82 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c34:	4b26      	ldr	r3, [pc, #152]	; (8002cd0 <UART_SetConfig+0x344>)
 8002c36:	0052      	lsls	r2, r2, #1
 8002c38:	5ad3      	ldrh	r3, [r2, r3]
 8002c3a:	0019      	movs	r1, r3
 8002c3c:	6978      	ldr	r0, [r7, #20]
 8002c3e:	f7fd fa5f 	bl	8000100 <__udivsi3>
 8002c42:	0003      	movs	r3, r0
 8002c44:	001a      	movs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	085b      	lsrs	r3, r3, #1
 8002c4c:	18d2      	adds	r2, r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	0019      	movs	r1, r3
 8002c54:	0010      	movs	r0, r2
 8002c56:	f7fd fa53 	bl	8000100 <__udivsi3>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	2b0f      	cmp	r3, #15
 8002c62:	d90a      	bls.n	8002c7a <UART_SetConfig+0x2ee>
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	2380      	movs	r3, #128	; 0x80
 8002c68:	025b      	lsls	r3, r3, #9
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d205      	bcs.n	8002c7a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60da      	str	r2, [r3, #12]
 8002c78:	e003      	b.n	8002c82 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002c7a:	231a      	movs	r3, #26
 8002c7c:	18fb      	adds	r3, r7, r3
 8002c7e:	2201      	movs	r2, #1
 8002c80:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	226a      	movs	r2, #106	; 0x6a
 8002c86:	2101      	movs	r1, #1
 8002c88:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2268      	movs	r2, #104	; 0x68
 8002c8e:	2101      	movs	r1, #1
 8002c90:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002c9e:	231a      	movs	r3, #26
 8002ca0:	18fb      	adds	r3, r7, r3
 8002ca2:	781b      	ldrb	r3, [r3, #0]
}
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	b008      	add	sp, #32
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	cfff69f3 	.word	0xcfff69f3
 8002cb0:	ffffcfff 	.word	0xffffcfff
 8002cb4:	11fff4ff 	.word	0x11fff4ff
 8002cb8:	40013800 	.word	0x40013800
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40004400 	.word	0x40004400
 8002cc4:	40004800 	.word	0x40004800
 8002cc8:	40004c00 	.word	0x40004c00
 8002ccc:	00f42400 	.word	0x00f42400
 8002cd0:	0800413c 	.word	0x0800413c

08002cd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d00b      	beq.n	8002cfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	4a4a      	ldr	r2, [pc, #296]	; (8002e18 <UART_AdvFeatureConfig+0x144>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	0019      	movs	r1, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d02:	2202      	movs	r2, #2
 8002d04:	4013      	ands	r3, r2
 8002d06:	d00b      	beq.n	8002d20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	4a43      	ldr	r2, [pc, #268]	; (8002e1c <UART_AdvFeatureConfig+0x148>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	0019      	movs	r1, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d24:	2204      	movs	r2, #4
 8002d26:	4013      	ands	r3, r2
 8002d28:	d00b      	beq.n	8002d42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	4a3b      	ldr	r2, [pc, #236]	; (8002e20 <UART_AdvFeatureConfig+0x14c>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	0019      	movs	r1, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d46:	2208      	movs	r2, #8
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d00b      	beq.n	8002d64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	4a34      	ldr	r2, [pc, #208]	; (8002e24 <UART_AdvFeatureConfig+0x150>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	0019      	movs	r1, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d68:	2210      	movs	r2, #16
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d00b      	beq.n	8002d86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	4a2c      	ldr	r2, [pc, #176]	; (8002e28 <UART_AdvFeatureConfig+0x154>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	0019      	movs	r1, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d00b      	beq.n	8002da8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	4a25      	ldr	r2, [pc, #148]	; (8002e2c <UART_AdvFeatureConfig+0x158>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	0019      	movs	r1, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dac:	2240      	movs	r2, #64	; 0x40
 8002dae:	4013      	ands	r3, r2
 8002db0:	d01d      	beq.n	8002dee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	4a1d      	ldr	r2, [pc, #116]	; (8002e30 <UART_AdvFeatureConfig+0x15c>)
 8002dba:	4013      	ands	r3, r2
 8002dbc:	0019      	movs	r1, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dce:	2380      	movs	r3, #128	; 0x80
 8002dd0:	035b      	lsls	r3, r3, #13
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d10b      	bne.n	8002dee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	4a15      	ldr	r2, [pc, #84]	; (8002e34 <UART_AdvFeatureConfig+0x160>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	0019      	movs	r1, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df2:	2280      	movs	r2, #128	; 0x80
 8002df4:	4013      	ands	r3, r2
 8002df6:	d00b      	beq.n	8002e10 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	4a0e      	ldr	r2, [pc, #56]	; (8002e38 <UART_AdvFeatureConfig+0x164>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	0019      	movs	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	605a      	str	r2, [r3, #4]
  }
}
 8002e10:	46c0      	nop			; (mov r8, r8)
 8002e12:	46bd      	mov	sp, r7
 8002e14:	b002      	add	sp, #8
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	fffdffff 	.word	0xfffdffff
 8002e1c:	fffeffff 	.word	0xfffeffff
 8002e20:	fffbffff 	.word	0xfffbffff
 8002e24:	ffff7fff 	.word	0xffff7fff
 8002e28:	ffffefff 	.word	0xffffefff
 8002e2c:	ffffdfff 	.word	0xffffdfff
 8002e30:	ffefffff 	.word	0xffefffff
 8002e34:	ff9fffff 	.word	0xff9fffff
 8002e38:	fff7ffff 	.word	0xfff7ffff

08002e3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2290      	movs	r2, #144	; 0x90
 8002e48:	2100      	movs	r1, #0
 8002e4a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e4c:	f7fd fe50 	bl	8000af0 <HAL_GetTick>
 8002e50:	0003      	movs	r3, r0
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2208      	movs	r2, #8
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d10c      	bne.n	8002e7c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2280      	movs	r2, #128	; 0x80
 8002e66:	0391      	lsls	r1, r2, #14
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	4a1a      	ldr	r2, [pc, #104]	; (8002ed4 <UART_CheckIdleState+0x98>)
 8002e6c:	9200      	str	r2, [sp, #0]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f000 f832 	bl	8002ed8 <UART_WaitOnFlagUntilTimeout>
 8002e74:	1e03      	subs	r3, r0, #0
 8002e76:	d001      	beq.n	8002e7c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e026      	b.n	8002eca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2204      	movs	r2, #4
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d10c      	bne.n	8002ea4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2280      	movs	r2, #128	; 0x80
 8002e8e:	03d1      	lsls	r1, r2, #15
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	4a10      	ldr	r2, [pc, #64]	; (8002ed4 <UART_CheckIdleState+0x98>)
 8002e94:	9200      	str	r2, [sp, #0]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f000 f81e 	bl	8002ed8 <UART_WaitOnFlagUntilTimeout>
 8002e9c:	1e03      	subs	r3, r0, #0
 8002e9e:	d001      	beq.n	8002ea4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e012      	b.n	8002eca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2288      	movs	r2, #136	; 0x88
 8002ea8:	2120      	movs	r1, #32
 8002eaa:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	228c      	movs	r2, #140	; 0x8c
 8002eb0:	2120      	movs	r1, #32
 8002eb2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2284      	movs	r2, #132	; 0x84
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	0018      	movs	r0, r3
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b004      	add	sp, #16
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	01ffffff 	.word	0x01ffffff

08002ed8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b094      	sub	sp, #80	; 0x50
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	1dfb      	adds	r3, r7, #7
 8002ee6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ee8:	e0a7      	b.n	800303a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eec:	3301      	adds	r3, #1
 8002eee:	d100      	bne.n	8002ef2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002ef0:	e0a3      	b.n	800303a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef2:	f7fd fdfd 	bl	8000af0 <HAL_GetTick>
 8002ef6:	0002      	movs	r2, r0
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d302      	bcc.n	8002f08 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d13f      	bne.n	8002f88 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f08:	f3ef 8310 	mrs	r3, PRIMASK
 8002f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002f10:	647b      	str	r3, [r7, #68]	; 0x44
 8002f12:	2301      	movs	r3, #1
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f18:	f383 8810 	msr	PRIMASK, r3
}
 8002f1c:	46c0      	nop			; (mov r8, r8)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	494e      	ldr	r1, [pc, #312]	; (8003064 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002f2a:	400a      	ands	r2, r1
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f30:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f34:	f383 8810 	msr	PRIMASK, r3
}
 8002f38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f3a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f3e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f42:	643b      	str	r3, [r7, #64]	; 0x40
 8002f44:	2301      	movs	r3, #1
 8002f46:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4a:	f383 8810 	msr	PRIMASK, r3
}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	438a      	bics	r2, r1
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f62:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f66:	f383 8810 	msr	PRIMASK, r3
}
 8002f6a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2288      	movs	r2, #136	; 0x88
 8002f70:	2120      	movs	r1, #32
 8002f72:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	228c      	movs	r2, #140	; 0x8c
 8002f78:	2120      	movs	r1, #32
 8002f7a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2284      	movs	r2, #132	; 0x84
 8002f80:	2100      	movs	r1, #0
 8002f82:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e069      	b.n	800305c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2204      	movs	r2, #4
 8002f90:	4013      	ands	r3, r2
 8002f92:	d052      	beq.n	800303a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	69da      	ldr	r2, [r3, #28]
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	401a      	ands	r2, r3
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d148      	bne.n	800303a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2280      	movs	r2, #128	; 0x80
 8002fae:	0112      	lsls	r2, r2, #4
 8002fb0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8002fb6:	613b      	str	r3, [r7, #16]
  return(result);
 8002fb8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f383 8810 	msr	PRIMASK, r3
}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4924      	ldr	r1, [pc, #144]	; (8003064 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002fd4:	400a      	ands	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fda:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	f383 8810 	msr	PRIMASK, r3
}
 8002fe2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8002fe8:	61fb      	str	r3, [r7, #28]
  return(result);
 8002fea:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fec:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fee:	2301      	movs	r3, #1
 8002ff0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	f383 8810 	msr	PRIMASK, r3
}
 8002ff8:	46c0      	nop			; (mov r8, r8)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2101      	movs	r1, #1
 8003006:	438a      	bics	r2, r1
 8003008:	609a      	str	r2, [r3, #8]
 800300a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	f383 8810 	msr	PRIMASK, r3
}
 8003014:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2288      	movs	r2, #136	; 0x88
 800301a:	2120      	movs	r1, #32
 800301c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	228c      	movs	r2, #140	; 0x8c
 8003022:	2120      	movs	r1, #32
 8003024:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2290      	movs	r2, #144	; 0x90
 800302a:	2120      	movs	r1, #32
 800302c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2284      	movs	r2, #132	; 0x84
 8003032:	2100      	movs	r1, #0
 8003034:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e010      	b.n	800305c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	4013      	ands	r3, r2
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	425a      	negs	r2, r3
 800304a:	4153      	adcs	r3, r2
 800304c:	b2db      	uxtb	r3, r3
 800304e:	001a      	movs	r2, r3
 8003050:	1dfb      	adds	r3, r7, #7
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d100      	bne.n	800305a <UART_WaitOnFlagUntilTimeout+0x182>
 8003058:	e747      	b.n	8002eea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	0018      	movs	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	b014      	add	sp, #80	; 0x50
 8003062:	bd80      	pop	{r7, pc}
 8003064:	fffffe5f 	.word	0xfffffe5f

08003068 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b098      	sub	sp, #96	; 0x60
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	1dbb      	adds	r3, r7, #6
 8003074:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	1dba      	adds	r2, r7, #6
 8003080:	215c      	movs	r1, #92	; 0x5c
 8003082:	8812      	ldrh	r2, [r2, #0]
 8003084:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1dba      	adds	r2, r7, #6
 800308a:	215e      	movs	r1, #94	; 0x5e
 800308c:	8812      	ldrh	r2, [r2, #0]
 800308e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	015b      	lsls	r3, r3, #5
 800309e:	429a      	cmp	r2, r3
 80030a0:	d10d      	bne.n	80030be <UART_Start_Receive_IT+0x56>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d104      	bne.n	80030b4 <UART_Start_Receive_IT+0x4c>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2260      	movs	r2, #96	; 0x60
 80030ae:	497b      	ldr	r1, [pc, #492]	; (800329c <UART_Start_Receive_IT+0x234>)
 80030b0:	5299      	strh	r1, [r3, r2]
 80030b2:	e02e      	b.n	8003112 <UART_Start_Receive_IT+0xaa>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2260      	movs	r2, #96	; 0x60
 80030b8:	21ff      	movs	r1, #255	; 0xff
 80030ba:	5299      	strh	r1, [r3, r2]
 80030bc:	e029      	b.n	8003112 <UART_Start_Receive_IT+0xaa>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10d      	bne.n	80030e2 <UART_Start_Receive_IT+0x7a>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d104      	bne.n	80030d8 <UART_Start_Receive_IT+0x70>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2260      	movs	r2, #96	; 0x60
 80030d2:	21ff      	movs	r1, #255	; 0xff
 80030d4:	5299      	strh	r1, [r3, r2]
 80030d6:	e01c      	b.n	8003112 <UART_Start_Receive_IT+0xaa>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2260      	movs	r2, #96	; 0x60
 80030dc:	217f      	movs	r1, #127	; 0x7f
 80030de:	5299      	strh	r1, [r3, r2]
 80030e0:	e017      	b.n	8003112 <UART_Start_Receive_IT+0xaa>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	2380      	movs	r3, #128	; 0x80
 80030e8:	055b      	lsls	r3, r3, #21
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d10d      	bne.n	800310a <UART_Start_Receive_IT+0xa2>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d104      	bne.n	8003100 <UART_Start_Receive_IT+0x98>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2260      	movs	r2, #96	; 0x60
 80030fa:	217f      	movs	r1, #127	; 0x7f
 80030fc:	5299      	strh	r1, [r3, r2]
 80030fe:	e008      	b.n	8003112 <UART_Start_Receive_IT+0xaa>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2260      	movs	r2, #96	; 0x60
 8003104:	213f      	movs	r1, #63	; 0x3f
 8003106:	5299      	strh	r1, [r3, r2]
 8003108:	e003      	b.n	8003112 <UART_Start_Receive_IT+0xaa>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2260      	movs	r2, #96	; 0x60
 800310e:	2100      	movs	r1, #0
 8003110:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2290      	movs	r2, #144	; 0x90
 8003116:	2100      	movs	r1, #0
 8003118:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	228c      	movs	r2, #140	; 0x8c
 800311e:	2122      	movs	r1, #34	; 0x22
 8003120:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003122:	f3ef 8310 	mrs	r3, PRIMASK
 8003126:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8003128:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800312a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800312c:	2301      	movs	r3, #1
 800312e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003132:	f383 8810 	msr	PRIMASK, r3
}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2101      	movs	r1, #1
 8003144:	430a      	orrs	r2, r1
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800314a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800314c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800314e:	f383 8810 	msr	PRIMASK, r3
}
 8003152:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003158:	2380      	movs	r3, #128	; 0x80
 800315a:	059b      	lsls	r3, r3, #22
 800315c:	429a      	cmp	r2, r3
 800315e:	d150      	bne.n	8003202 <UART_Start_Receive_IT+0x19a>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2268      	movs	r2, #104	; 0x68
 8003164:	5a9b      	ldrh	r3, [r3, r2]
 8003166:	1dba      	adds	r2, r7, #6
 8003168:	8812      	ldrh	r2, [r2, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d349      	bcc.n	8003202 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	2380      	movs	r3, #128	; 0x80
 8003174:	015b      	lsls	r3, r3, #5
 8003176:	429a      	cmp	r2, r3
 8003178:	d107      	bne.n	800318a <UART_Start_Receive_IT+0x122>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d103      	bne.n	800318a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4a46      	ldr	r2, [pc, #280]	; (80032a0 <UART_Start_Receive_IT+0x238>)
 8003186:	675a      	str	r2, [r3, #116]	; 0x74
 8003188:	e002      	b.n	8003190 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4a45      	ldr	r2, [pc, #276]	; (80032a4 <UART_Start_Receive_IT+0x23c>)
 800318e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d019      	beq.n	80031cc <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003198:	f3ef 8310 	mrs	r3, PRIMASK
 800319c:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800319e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80031a2:	2301      	movs	r3, #1
 80031a4:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a8:	f383 8810 	msr	PRIMASK, r3
}
 80031ac:	46c0      	nop			; (mov r8, r8)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2180      	movs	r1, #128	; 0x80
 80031ba:	0049      	lsls	r1, r1, #1
 80031bc:	430a      	orrs	r2, r1
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c6:	f383 8810 	msr	PRIMASK, r3
}
 80031ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031cc:	f3ef 8310 	mrs	r3, PRIMASK
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80031d4:	657b      	str	r3, [r7, #84]	; 0x54
 80031d6:	2301      	movs	r3, #1
 80031d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031dc:	f383 8810 	msr	PRIMASK, r3
}
 80031e0:	46c0      	nop			; (mov r8, r8)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2180      	movs	r1, #128	; 0x80
 80031ee:	0549      	lsls	r1, r1, #21
 80031f0:	430a      	orrs	r2, r1
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031f6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fa:	f383 8810 	msr	PRIMASK, r3
}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	e047      	b.n	8003292 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	2380      	movs	r3, #128	; 0x80
 8003208:	015b      	lsls	r3, r3, #5
 800320a:	429a      	cmp	r2, r3
 800320c:	d107      	bne.n	800321e <UART_Start_Receive_IT+0x1b6>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d103      	bne.n	800321e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4a23      	ldr	r2, [pc, #140]	; (80032a8 <UART_Start_Receive_IT+0x240>)
 800321a:	675a      	str	r2, [r3, #116]	; 0x74
 800321c:	e002      	b.n	8003224 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4a22      	ldr	r2, [pc, #136]	; (80032ac <UART_Start_Receive_IT+0x244>)
 8003222:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d019      	beq.n	8003260 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800322c:	f3ef 8310 	mrs	r3, PRIMASK
 8003230:	61fb      	str	r3, [r7, #28]
  return(result);
 8003232:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003234:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003236:	2301      	movs	r3, #1
 8003238:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	f383 8810 	msr	PRIMASK, r3
}
 8003240:	46c0      	nop			; (mov r8, r8)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2190      	movs	r1, #144	; 0x90
 800324e:	0049      	lsls	r1, r1, #1
 8003250:	430a      	orrs	r2, r1
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003256:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	f383 8810 	msr	PRIMASK, r3
}
 800325e:	e018      	b.n	8003292 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003260:	f3ef 8310 	mrs	r3, PRIMASK
 8003264:	613b      	str	r3, [r7, #16]
  return(result);
 8003266:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003268:	653b      	str	r3, [r7, #80]	; 0x50
 800326a:	2301      	movs	r3, #1
 800326c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f383 8810 	msr	PRIMASK, r3
}
 8003274:	46c0      	nop			; (mov r8, r8)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2120      	movs	r1, #32
 8003282:	430a      	orrs	r2, r1
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003288:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	f383 8810 	msr	PRIMASK, r3
}
 8003290:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	0018      	movs	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	b018      	add	sp, #96	; 0x60
 800329a:	bd80      	pop	{r7, pc}
 800329c:	000001ff 	.word	0x000001ff
 80032a0:	080039d9 	.word	0x080039d9
 80032a4:	080036ed 	.word	0x080036ed
 80032a8:	08003579 	.word	0x08003579
 80032ac:	08003405 	.word	0x08003405

080032b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08e      	sub	sp, #56	; 0x38
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032b8:	f3ef 8310 	mrs	r3, PRIMASK
 80032bc:	617b      	str	r3, [r7, #20]
  return(result);
 80032be:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80032c0:	637b      	str	r3, [r7, #52]	; 0x34
 80032c2:	2301      	movs	r3, #1
 80032c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	f383 8810 	msr	PRIMASK, r3
}
 80032cc:	46c0      	nop			; (mov r8, r8)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4926      	ldr	r1, [pc, #152]	; (8003374 <UART_EndRxTransfer+0xc4>)
 80032da:	400a      	ands	r2, r1
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	f383 8810 	msr	PRIMASK, r3
}
 80032e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ea:	f3ef 8310 	mrs	r3, PRIMASK
 80032ee:	623b      	str	r3, [r7, #32]
  return(result);
 80032f0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80032f2:	633b      	str	r3, [r7, #48]	; 0x30
 80032f4:	2301      	movs	r3, #1
 80032f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	f383 8810 	msr	PRIMASK, r3
}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	491b      	ldr	r1, [pc, #108]	; (8003378 <UART_EndRxTransfer+0xc8>)
 800330c:	400a      	ands	r2, r1
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003312:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003316:	f383 8810 	msr	PRIMASK, r3
}
 800331a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003320:	2b01      	cmp	r3, #1
 8003322:	d118      	bne.n	8003356 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003324:	f3ef 8310 	mrs	r3, PRIMASK
 8003328:	60bb      	str	r3, [r7, #8]
  return(result);
 800332a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800332c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800332e:	2301      	movs	r3, #1
 8003330:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f383 8810 	msr	PRIMASK, r3
}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2110      	movs	r1, #16
 8003346:	438a      	bics	r2, r1
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	f383 8810 	msr	PRIMASK, r3
}
 8003354:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	228c      	movs	r2, #140	; 0x8c
 800335a:	2120      	movs	r1, #32
 800335c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	675a      	str	r2, [r3, #116]	; 0x74
}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	46bd      	mov	sp, r7
 800336e:	b00e      	add	sp, #56	; 0x38
 8003370:	bd80      	pop	{r7, pc}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	fffffedf 	.word	0xfffffedf
 8003378:	effffffe 	.word	0xeffffffe

0800337c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	225e      	movs	r2, #94	; 0x5e
 800338e:	2100      	movs	r1, #0
 8003390:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2256      	movs	r2, #86	; 0x56
 8003396:	2100      	movs	r1, #0
 8003398:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	0018      	movs	r0, r3
 800339e:	f7ff fae1 	bl	8002964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	46bd      	mov	sp, r7
 80033a6:	b004      	add	sp, #16
 80033a8:	bd80      	pop	{r7, pc}

080033aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b086      	sub	sp, #24
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033b2:	f3ef 8310 	mrs	r3, PRIMASK
 80033b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80033b8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	2301      	movs	r3, #1
 80033be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f383 8810 	msr	PRIMASK, r3
}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2140      	movs	r1, #64	; 0x40
 80033d4:	438a      	bics	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	f383 8810 	msr	PRIMASK, r3
}
 80033e2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2288      	movs	r2, #136	; 0x88
 80033e8:	2120      	movs	r1, #32
 80033ea:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	0018      	movs	r0, r3
 80033f6:	f7ff faad 	bl	8002954 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	46bd      	mov	sp, r7
 80033fe:	b006      	add	sp, #24
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b090      	sub	sp, #64	; 0x40
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800340c:	203e      	movs	r0, #62	; 0x3e
 800340e:	183b      	adds	r3, r7, r0
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	2160      	movs	r1, #96	; 0x60
 8003414:	5a52      	ldrh	r2, [r2, r1]
 8003416:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	228c      	movs	r2, #140	; 0x8c
 800341c:	589b      	ldr	r3, [r3, r2]
 800341e:	2b22      	cmp	r3, #34	; 0x22
 8003420:	d000      	beq.n	8003424 <UART_RxISR_8BIT+0x20>
 8003422:	e09a      	b.n	800355a <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800342a:	213c      	movs	r1, #60	; 0x3c
 800342c:	187b      	adds	r3, r7, r1
 800342e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003430:	187b      	adds	r3, r7, r1
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	b2da      	uxtb	r2, r3
 8003436:	183b      	adds	r3, r7, r0
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	b2d9      	uxtb	r1, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003440:	400a      	ands	r2, r1
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	225e      	movs	r2, #94	; 0x5e
 8003454:	5a9b      	ldrh	r3, [r3, r2]
 8003456:	b29b      	uxth	r3, r3
 8003458:	3b01      	subs	r3, #1
 800345a:	b299      	uxth	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	225e      	movs	r2, #94	; 0x5e
 8003460:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	225e      	movs	r2, #94	; 0x5e
 8003466:	5a9b      	ldrh	r3, [r3, r2]
 8003468:	b29b      	uxth	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d000      	beq.n	8003470 <UART_RxISR_8BIT+0x6c>
 800346e:	e07c      	b.n	800356a <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003470:	f3ef 8310 	mrs	r3, PRIMASK
 8003474:	61bb      	str	r3, [r7, #24]
  return(result);
 8003476:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003478:	63bb      	str	r3, [r7, #56]	; 0x38
 800347a:	2301      	movs	r3, #1
 800347c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	f383 8810 	msr	PRIMASK, r3
}
 8003484:	46c0      	nop			; (mov r8, r8)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4938      	ldr	r1, [pc, #224]	; (8003574 <UART_RxISR_8BIT+0x170>)
 8003492:	400a      	ands	r2, r1
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003498:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	f383 8810 	msr	PRIMASK, r3
}
 80034a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034a2:	f3ef 8310 	mrs	r3, PRIMASK
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034aa:	637b      	str	r3, [r7, #52]	; 0x34
 80034ac:	2301      	movs	r3, #1
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	f383 8810 	msr	PRIMASK, r3
}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2101      	movs	r1, #1
 80034c4:	438a      	bics	r2, r1
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ce:	f383 8810 	msr	PRIMASK, r3
}
 80034d2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	228c      	movs	r2, #140	; 0x8c
 80034d8:	2120      	movs	r1, #32
 80034da:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d12f      	bne.n	8003550 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f6:	f3ef 8310 	mrs	r3, PRIMASK
 80034fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80034fc:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034fe:	633b      	str	r3, [r7, #48]	; 0x30
 8003500:	2301      	movs	r3, #1
 8003502:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f383 8810 	msr	PRIMASK, r3
}
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2110      	movs	r1, #16
 8003518:	438a      	bics	r2, r1
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f383 8810 	msr	PRIMASK, r3
}
 8003526:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	2210      	movs	r2, #16
 8003530:	4013      	ands	r3, r2
 8003532:	2b10      	cmp	r3, #16
 8003534:	d103      	bne.n	800353e <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2210      	movs	r2, #16
 800353c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	225c      	movs	r2, #92	; 0x5c
 8003542:	5a9a      	ldrh	r2, [r3, r2]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	0011      	movs	r1, r2
 8003548:	0018      	movs	r0, r3
 800354a:	f7ff fa13 	bl	8002974 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800354e:	e00c      	b.n	800356a <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	0018      	movs	r0, r3
 8003554:	f7fc ff4a 	bl	80003ec <HAL_UART_RxCpltCallback>
}
 8003558:	e007      	b.n	800356a <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699a      	ldr	r2, [r3, #24]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2108      	movs	r1, #8
 8003566:	430a      	orrs	r2, r1
 8003568:	619a      	str	r2, [r3, #24]
}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	46bd      	mov	sp, r7
 800356e:	b010      	add	sp, #64	; 0x40
 8003570:	bd80      	pop	{r7, pc}
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	fffffedf 	.word	0xfffffedf

08003578 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b090      	sub	sp, #64	; 0x40
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003580:	203e      	movs	r0, #62	; 0x3e
 8003582:	183b      	adds	r3, r7, r0
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	2160      	movs	r1, #96	; 0x60
 8003588:	5a52      	ldrh	r2, [r2, r1]
 800358a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	228c      	movs	r2, #140	; 0x8c
 8003590:	589b      	ldr	r3, [r3, r2]
 8003592:	2b22      	cmp	r3, #34	; 0x22
 8003594:	d000      	beq.n	8003598 <UART_RxISR_16BIT+0x20>
 8003596:	e09a      	b.n	80036ce <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800359e:	213c      	movs	r1, #60	; 0x3c
 80035a0:	187b      	adds	r3, r7, r1
 80035a2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a8:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80035aa:	187b      	adds	r3, r7, r1
 80035ac:	183a      	adds	r2, r7, r0
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	8812      	ldrh	r2, [r2, #0]
 80035b2:	4013      	ands	r3, r2
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035be:	1c9a      	adds	r2, r3, #2
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	225e      	movs	r2, #94	; 0x5e
 80035c8:	5a9b      	ldrh	r3, [r3, r2]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b299      	uxth	r1, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	225e      	movs	r2, #94	; 0x5e
 80035d4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	225e      	movs	r2, #94	; 0x5e
 80035da:	5a9b      	ldrh	r3, [r3, r2]
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d000      	beq.n	80035e4 <UART_RxISR_16BIT+0x6c>
 80035e2:	e07c      	b.n	80036de <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035e4:	f3ef 8310 	mrs	r3, PRIMASK
 80035e8:	617b      	str	r3, [r7, #20]
  return(result);
 80035ea:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80035ec:	637b      	str	r3, [r7, #52]	; 0x34
 80035ee:	2301      	movs	r3, #1
 80035f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	f383 8810 	msr	PRIMASK, r3
}
 80035f8:	46c0      	nop			; (mov r8, r8)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4938      	ldr	r1, [pc, #224]	; (80036e8 <UART_RxISR_16BIT+0x170>)
 8003606:	400a      	ands	r2, r1
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800360c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	f383 8810 	msr	PRIMASK, r3
}
 8003614:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003616:	f3ef 8310 	mrs	r3, PRIMASK
 800361a:	623b      	str	r3, [r7, #32]
  return(result);
 800361c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800361e:	633b      	str	r3, [r7, #48]	; 0x30
 8003620:	2301      	movs	r3, #1
 8003622:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	f383 8810 	msr	PRIMASK, r3
}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2101      	movs	r1, #1
 8003638:	438a      	bics	r2, r1
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003642:	f383 8810 	msr	PRIMASK, r3
}
 8003646:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	228c      	movs	r2, #140	; 0x8c
 800364c:	2120      	movs	r1, #32
 800364e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003660:	2b01      	cmp	r3, #1
 8003662:	d12f      	bne.n	80036c4 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800366a:	f3ef 8310 	mrs	r3, PRIMASK
 800366e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003670:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003672:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003674:	2301      	movs	r3, #1
 8003676:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f383 8810 	msr	PRIMASK, r3
}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2110      	movs	r1, #16
 800368c:	438a      	bics	r2, r1
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003692:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f383 8810 	msr	PRIMASK, r3
}
 800369a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	2210      	movs	r2, #16
 80036a4:	4013      	ands	r3, r2
 80036a6:	2b10      	cmp	r3, #16
 80036a8:	d103      	bne.n	80036b2 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2210      	movs	r2, #16
 80036b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	225c      	movs	r2, #92	; 0x5c
 80036b6:	5a9a      	ldrh	r2, [r3, r2]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	0011      	movs	r1, r2
 80036bc:	0018      	movs	r0, r3
 80036be:	f7ff f959 	bl	8002974 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80036c2:	e00c      	b.n	80036de <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	0018      	movs	r0, r3
 80036c8:	f7fc fe90 	bl	80003ec <HAL_UART_RxCpltCallback>
}
 80036cc:	e007      	b.n	80036de <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	699a      	ldr	r2, [r3, #24]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2108      	movs	r1, #8
 80036da:	430a      	orrs	r2, r1
 80036dc:	619a      	str	r2, [r3, #24]
}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	46bd      	mov	sp, r7
 80036e2:	b010      	add	sp, #64	; 0x40
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	fffffedf 	.word	0xfffffedf

080036ec <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b09c      	sub	sp, #112	; 0x70
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80036f4:	236a      	movs	r3, #106	; 0x6a
 80036f6:	18fb      	adds	r3, r7, r3
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	2160      	movs	r1, #96	; 0x60
 80036fc:	5a52      	ldrh	r2, [r2, r1]
 80036fe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	228c      	movs	r2, #140	; 0x8c
 800371c:	589b      	ldr	r3, [r3, r2]
 800371e:	2b22      	cmp	r3, #34	; 0x22
 8003720:	d000      	beq.n	8003724 <UART_RxISR_8BIT_FIFOEN+0x38>
 8003722:	e144      	b.n	80039ae <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003724:	235e      	movs	r3, #94	; 0x5e
 8003726:	18fb      	adds	r3, r7, r3
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	2168      	movs	r1, #104	; 0x68
 800372c:	5a52      	ldrh	r2, [r2, r1]
 800372e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003730:	e0eb      	b.n	800390a <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003738:	215c      	movs	r1, #92	; 0x5c
 800373a:	187b      	adds	r3, r7, r1
 800373c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800373e:	187b      	adds	r3, r7, r1
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	b2da      	uxtb	r2, r3
 8003744:	236a      	movs	r3, #106	; 0x6a
 8003746:	18fb      	adds	r3, r7, r3
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	b2d9      	uxtb	r1, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003750:	400a      	ands	r2, r1
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	225e      	movs	r2, #94	; 0x5e
 8003764:	5a9b      	ldrh	r3, [r3, r2]
 8003766:	b29b      	uxth	r3, r3
 8003768:	3b01      	subs	r3, #1
 800376a:	b299      	uxth	r1, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	225e      	movs	r2, #94	; 0x5e
 8003770:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800377a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800377c:	2207      	movs	r2, #7
 800377e:	4013      	ands	r3, r2
 8003780:	d049      	beq.n	8003816 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003784:	2201      	movs	r2, #1
 8003786:	4013      	ands	r3, r2
 8003788:	d010      	beq.n	80037ac <UART_RxISR_8BIT_FIFOEN+0xc0>
 800378a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800378c:	2380      	movs	r3, #128	; 0x80
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	4013      	ands	r3, r2
 8003792:	d00b      	beq.n	80037ac <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2201      	movs	r2, #1
 800379a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2290      	movs	r2, #144	; 0x90
 80037a0:	589b      	ldr	r3, [r3, r2]
 80037a2:	2201      	movs	r2, #1
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2190      	movs	r1, #144	; 0x90
 80037aa:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ae:	2202      	movs	r2, #2
 80037b0:	4013      	ands	r3, r2
 80037b2:	d00f      	beq.n	80037d4 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80037b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037b6:	2201      	movs	r2, #1
 80037b8:	4013      	ands	r3, r2
 80037ba:	d00b      	beq.n	80037d4 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2202      	movs	r2, #2
 80037c2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2290      	movs	r2, #144	; 0x90
 80037c8:	589b      	ldr	r3, [r3, r2]
 80037ca:	2204      	movs	r2, #4
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2190      	movs	r1, #144	; 0x90
 80037d2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037d6:	2204      	movs	r2, #4
 80037d8:	4013      	ands	r3, r2
 80037da:	d00f      	beq.n	80037fc <UART_RxISR_8BIT_FIFOEN+0x110>
 80037dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037de:	2201      	movs	r2, #1
 80037e0:	4013      	ands	r3, r2
 80037e2:	d00b      	beq.n	80037fc <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2204      	movs	r2, #4
 80037ea:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2290      	movs	r2, #144	; 0x90
 80037f0:	589b      	ldr	r3, [r3, r2]
 80037f2:	2202      	movs	r2, #2
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2190      	movs	r1, #144	; 0x90
 80037fa:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2290      	movs	r2, #144	; 0x90
 8003800:	589b      	ldr	r3, [r3, r2]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d007      	beq.n	8003816 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	0018      	movs	r0, r3
 800380a:	f7ff f8ab 	bl	8002964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2290      	movs	r2, #144	; 0x90
 8003812:	2100      	movs	r1, #0
 8003814:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	225e      	movs	r2, #94	; 0x5e
 800381a:	5a9b      	ldrh	r3, [r3, r2]
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d173      	bne.n	800390a <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003822:	f3ef 8310 	mrs	r3, PRIMASK
 8003826:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800382a:	65bb      	str	r3, [r7, #88]	; 0x58
 800382c:	2301      	movs	r3, #1
 800382e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003832:	f383 8810 	msr	PRIMASK, r3
}
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4961      	ldr	r1, [pc, #388]	; (80039c8 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8003844:	400a      	ands	r2, r1
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800384a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384e:	f383 8810 	msr	PRIMASK, r3
}
 8003852:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003854:	f3ef 8310 	mrs	r3, PRIMASK
 8003858:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800385a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800385c:	657b      	str	r3, [r7, #84]	; 0x54
 800385e:	2301      	movs	r3, #1
 8003860:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003864:	f383 8810 	msr	PRIMASK, r3
}
 8003868:	46c0      	nop			; (mov r8, r8)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4955      	ldr	r1, [pc, #340]	; (80039cc <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8003876:	400a      	ands	r2, r1
 8003878:	609a      	str	r2, [r3, #8]
 800387a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800387c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003880:	f383 8810 	msr	PRIMASK, r3
}
 8003884:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	228c      	movs	r2, #140	; 0x8c
 800388a:	2120      	movs	r1, #32
 800388c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d12f      	bne.n	8003902 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038a8:	f3ef 8310 	mrs	r3, PRIMASK
 80038ac:	623b      	str	r3, [r7, #32]
  return(result);
 80038ae:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038b0:	653b      	str	r3, [r7, #80]	; 0x50
 80038b2:	2301      	movs	r3, #1
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	f383 8810 	msr	PRIMASK, r3
}
 80038bc:	46c0      	nop			; (mov r8, r8)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2110      	movs	r1, #16
 80038ca:	438a      	bics	r2, r1
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038d0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d4:	f383 8810 	msr	PRIMASK, r3
}
 80038d8:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	2210      	movs	r2, #16
 80038e2:	4013      	ands	r3, r2
 80038e4:	2b10      	cmp	r3, #16
 80038e6:	d103      	bne.n	80038f0 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2210      	movs	r2, #16
 80038ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	225c      	movs	r2, #92	; 0x5c
 80038f4:	5a9a      	ldrh	r2, [r3, r2]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	0011      	movs	r1, r2
 80038fa:	0018      	movs	r0, r3
 80038fc:	f7ff f83a 	bl	8002974 <HAL_UARTEx_RxEventCallback>
 8003900:	e003      	b.n	800390a <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	0018      	movs	r0, r3
 8003906:	f7fc fd71 	bl	80003ec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800390a:	235e      	movs	r3, #94	; 0x5e
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d004      	beq.n	800391e <UART_RxISR_8BIT_FIFOEN+0x232>
 8003914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003916:	2220      	movs	r2, #32
 8003918:	4013      	ands	r3, r2
 800391a:	d000      	beq.n	800391e <UART_RxISR_8BIT_FIFOEN+0x232>
 800391c:	e709      	b.n	8003732 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800391e:	204e      	movs	r0, #78	; 0x4e
 8003920:	183b      	adds	r3, r7, r0
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	215e      	movs	r1, #94	; 0x5e
 8003926:	5a52      	ldrh	r2, [r2, r1]
 8003928:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800392a:	0001      	movs	r1, r0
 800392c:	187b      	adds	r3, r7, r1
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d044      	beq.n	80039be <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2268      	movs	r2, #104	; 0x68
 8003938:	5a9b      	ldrh	r3, [r3, r2]
 800393a:	187a      	adds	r2, r7, r1
 800393c:	8812      	ldrh	r2, [r2, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d23d      	bcs.n	80039be <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003942:	f3ef 8310 	mrs	r3, PRIMASK
 8003946:	60bb      	str	r3, [r7, #8]
  return(result);
 8003948:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800394a:	64bb      	str	r3, [r7, #72]	; 0x48
 800394c:	2301      	movs	r3, #1
 800394e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f383 8810 	msr	PRIMASK, r3
}
 8003956:	46c0      	nop			; (mov r8, r8)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	491b      	ldr	r1, [pc, #108]	; (80039d0 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8003964:	400a      	ands	r2, r1
 8003966:	609a      	str	r2, [r3, #8]
 8003968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800396a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	f383 8810 	msr	PRIMASK, r3
}
 8003972:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a17      	ldr	r2, [pc, #92]	; (80039d4 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8003978:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800397a:	f3ef 8310 	mrs	r3, PRIMASK
 800397e:	617b      	str	r3, [r7, #20]
  return(result);
 8003980:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003982:	647b      	str	r3, [r7, #68]	; 0x44
 8003984:	2301      	movs	r3, #1
 8003986:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	f383 8810 	msr	PRIMASK, r3
}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2120      	movs	r1, #32
 800399c:	430a      	orrs	r2, r1
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f383 8810 	msr	PRIMASK, r3
}
 80039aa:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80039ac:	e007      	b.n	80039be <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	699a      	ldr	r2, [r3, #24]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2108      	movs	r1, #8
 80039ba:	430a      	orrs	r2, r1
 80039bc:	619a      	str	r2, [r3, #24]
}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	46bd      	mov	sp, r7
 80039c2:	b01c      	add	sp, #112	; 0x70
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	fffffeff 	.word	0xfffffeff
 80039cc:	effffffe 	.word	0xeffffffe
 80039d0:	efffffff 	.word	0xefffffff
 80039d4:	08003405 	.word	0x08003405

080039d8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b09e      	sub	sp, #120	; 0x78
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80039e0:	2372      	movs	r3, #114	; 0x72
 80039e2:	18fb      	adds	r3, r7, r3
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	2160      	movs	r1, #96	; 0x60
 80039e8:	5a52      	ldrh	r2, [r2, r1]
 80039ea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	228c      	movs	r2, #140	; 0x8c
 8003a08:	589b      	ldr	r3, [r3, r2]
 8003a0a:	2b22      	cmp	r3, #34	; 0x22
 8003a0c:	d000      	beq.n	8003a10 <UART_RxISR_16BIT_FIFOEN+0x38>
 8003a0e:	e144      	b.n	8003c9a <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003a10:	2366      	movs	r3, #102	; 0x66
 8003a12:	18fb      	adds	r3, r7, r3
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	2168      	movs	r1, #104	; 0x68
 8003a18:	5a52      	ldrh	r2, [r2, r1]
 8003a1a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003a1c:	e0eb      	b.n	8003bf6 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a24:	2164      	movs	r1, #100	; 0x64
 8003a26:	187b      	adds	r3, r7, r1
 8003a28:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2e:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8003a30:	187b      	adds	r3, r7, r1
 8003a32:	2272      	movs	r2, #114	; 0x72
 8003a34:	18ba      	adds	r2, r7, r2
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	8812      	ldrh	r2, [r2, #0]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a46:	1c9a      	adds	r2, r3, #2
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	225e      	movs	r2, #94	; 0x5e
 8003a50:	5a9b      	ldrh	r3, [r3, r2]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b299      	uxth	r1, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	225e      	movs	r2, #94	; 0x5e
 8003a5c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a68:	2207      	movs	r2, #7
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d049      	beq.n	8003b02 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a70:	2201      	movs	r2, #1
 8003a72:	4013      	ands	r3, r2
 8003a74:	d010      	beq.n	8003a98 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8003a76:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a78:	2380      	movs	r3, #128	; 0x80
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d00b      	beq.n	8003a98 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2201      	movs	r2, #1
 8003a86:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2290      	movs	r2, #144	; 0x90
 8003a8c:	589b      	ldr	r3, [r3, r2]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2190      	movs	r1, #144	; 0x90
 8003a96:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	d00f      	beq.n	8003ac0 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8003aa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	d00b      	beq.n	8003ac0 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2202      	movs	r2, #2
 8003aae:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2290      	movs	r2, #144	; 0x90
 8003ab4:	589b      	ldr	r3, [r3, r2]
 8003ab6:	2204      	movs	r2, #4
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2190      	movs	r1, #144	; 0x90
 8003abe:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ac2:	2204      	movs	r2, #4
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	d00f      	beq.n	8003ae8 <UART_RxISR_16BIT_FIFOEN+0x110>
 8003ac8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003aca:	2201      	movs	r2, #1
 8003acc:	4013      	ands	r3, r2
 8003ace:	d00b      	beq.n	8003ae8 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2204      	movs	r2, #4
 8003ad6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2290      	movs	r2, #144	; 0x90
 8003adc:	589b      	ldr	r3, [r3, r2]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2190      	movs	r1, #144	; 0x90
 8003ae6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2290      	movs	r2, #144	; 0x90
 8003aec:	589b      	ldr	r3, [r3, r2]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d007      	beq.n	8003b02 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	0018      	movs	r0, r3
 8003af6:	f7fe ff35 	bl	8002964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2290      	movs	r2, #144	; 0x90
 8003afe:	2100      	movs	r1, #0
 8003b00:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	225e      	movs	r2, #94	; 0x5e
 8003b06:	5a9b      	ldrh	r3, [r3, r2]
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d173      	bne.n	8003bf6 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b12:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b18:	2301      	movs	r3, #1
 8003b1a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b1e:	f383 8810 	msr	PRIMASK, r3
}
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4961      	ldr	r1, [pc, #388]	; (8003cb4 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8003b30:	400a      	ands	r2, r1
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b36:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3a:	f383 8810 	msr	PRIMASK, r3
}
 8003b3e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b40:	f3ef 8310 	mrs	r3, PRIMASK
 8003b44:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003b48:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b50:	f383 8810 	msr	PRIMASK, r3
}
 8003b54:	46c0      	nop			; (mov r8, r8)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4955      	ldr	r1, [pc, #340]	; (8003cb8 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8003b62:	400a      	ands	r2, r1
 8003b64:	609a      	str	r2, [r3, #8]
 8003b66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b68:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b6c:	f383 8810 	msr	PRIMASK, r3
}
 8003b70:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	228c      	movs	r2, #140	; 0x8c
 8003b76:	2120      	movs	r1, #32
 8003b78:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d12f      	bne.n	8003bee <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b94:	f3ef 8310 	mrs	r3, PRIMASK
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b9c:	657b      	str	r3, [r7, #84]	; 0x54
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba4:	f383 8810 	msr	PRIMASK, r3
}
 8003ba8:	46c0      	nop			; (mov r8, r8)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2110      	movs	r1, #16
 8003bb6:	438a      	bics	r2, r1
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc0:	f383 8810 	msr	PRIMASK, r3
}
 8003bc4:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	2210      	movs	r2, #16
 8003bce:	4013      	ands	r3, r2
 8003bd0:	2b10      	cmp	r3, #16
 8003bd2:	d103      	bne.n	8003bdc <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2210      	movs	r2, #16
 8003bda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	225c      	movs	r2, #92	; 0x5c
 8003be0:	5a9a      	ldrh	r2, [r3, r2]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	0011      	movs	r1, r2
 8003be6:	0018      	movs	r0, r3
 8003be8:	f7fe fec4 	bl	8002974 <HAL_UARTEx_RxEventCallback>
 8003bec:	e003      	b.n	8003bf6 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	f7fc fbfb 	bl	80003ec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003bf6:	2366      	movs	r3, #102	; 0x66
 8003bf8:	18fb      	adds	r3, r7, r3
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d004      	beq.n	8003c0a <UART_RxISR_16BIT_FIFOEN+0x232>
 8003c00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c02:	2220      	movs	r2, #32
 8003c04:	4013      	ands	r3, r2
 8003c06:	d000      	beq.n	8003c0a <UART_RxISR_16BIT_FIFOEN+0x232>
 8003c08:	e709      	b.n	8003a1e <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003c0a:	2052      	movs	r0, #82	; 0x52
 8003c0c:	183b      	adds	r3, r7, r0
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	215e      	movs	r1, #94	; 0x5e
 8003c12:	5a52      	ldrh	r2, [r2, r1]
 8003c14:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003c16:	0001      	movs	r1, r0
 8003c18:	187b      	adds	r3, r7, r1
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d044      	beq.n	8003caa <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2268      	movs	r2, #104	; 0x68
 8003c24:	5a9b      	ldrh	r3, [r3, r2]
 8003c26:	187a      	adds	r2, r7, r1
 8003c28:	8812      	ldrh	r2, [r2, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d23d      	bcs.n	8003caa <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c32:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c34:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c38:	2301      	movs	r3, #1
 8003c3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f383 8810 	msr	PRIMASK, r3
}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	491b      	ldr	r1, [pc, #108]	; (8003cbc <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8003c50:	400a      	ands	r2, r1
 8003c52:	609a      	str	r2, [r3, #8]
 8003c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f383 8810 	msr	PRIMASK, r3
}
 8003c5e:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a17      	ldr	r2, [pc, #92]	; (8003cc0 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8003c64:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c66:	f3ef 8310 	mrs	r3, PRIMASK
 8003c6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c6c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003c6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c70:	2301      	movs	r3, #1
 8003c72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f383 8810 	msr	PRIMASK, r3
}
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2120      	movs	r1, #32
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	f383 8810 	msr	PRIMASK, r3
}
 8003c96:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c98:	e007      	b.n	8003caa <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	699a      	ldr	r2, [r3, #24]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2108      	movs	r1, #8
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	619a      	str	r2, [r3, #24]
}
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	46bd      	mov	sp, r7
 8003cae:	b01e      	add	sp, #120	; 0x78
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	fffffeff 	.word	0xfffffeff
 8003cb8:	effffffe 	.word	0xeffffffe
 8003cbc:	efffffff 	.word	0xefffffff
 8003cc0:	08003579 	.word	0x08003579

08003cc4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ccc:	46c0      	nop			; (mov r8, r8)
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	b002      	add	sp, #8
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003cdc:	46c0      	nop			; (mov r8, r8)
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b002      	add	sp, #8
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003cec:	46c0      	nop			; (mov r8, r8)
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b002      	add	sp, #8
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2284      	movs	r2, #132	; 0x84
 8003d00:	5c9b      	ldrb	r3, [r3, r2]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_UARTEx_DisableFifoMode+0x16>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e027      	b.n	8003d5a <HAL_UARTEx_DisableFifoMode+0x66>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2284      	movs	r2, #132	; 0x84
 8003d0e:	2101      	movs	r1, #1
 8003d10:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2288      	movs	r2, #136	; 0x88
 8003d16:	2124      	movs	r1, #36	; 0x24
 8003d18:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	438a      	bics	r2, r1
 8003d30:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4a0b      	ldr	r2, [pc, #44]	; (8003d64 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003d36:	4013      	ands	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2288      	movs	r2, #136	; 0x88
 8003d4c:	2120      	movs	r1, #32
 8003d4e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2284      	movs	r2, #132	; 0x84
 8003d54:	2100      	movs	r1, #0
 8003d56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b004      	add	sp, #16
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	dfffffff 	.word	0xdfffffff

08003d68 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2284      	movs	r2, #132	; 0x84
 8003d76:	5c9b      	ldrb	r3, [r3, r2]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	e02e      	b.n	8003dde <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2284      	movs	r2, #132	; 0x84
 8003d84:	2101      	movs	r1, #1
 8003d86:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2288      	movs	r2, #136	; 0x88
 8003d8c:	2124      	movs	r1, #36	; 0x24
 8003d8e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2101      	movs	r1, #1
 8003da4:	438a      	bics	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	08d9      	lsrs	r1, r3, #3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	f000 f854 	bl	8003e6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2288      	movs	r2, #136	; 0x88
 8003dd0:	2120      	movs	r1, #32
 8003dd2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2284      	movs	r2, #132	; 0x84
 8003dd8:	2100      	movs	r1, #0
 8003dda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	0018      	movs	r0, r3
 8003de0:	46bd      	mov	sp, r7
 8003de2:	b004      	add	sp, #16
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2284      	movs	r2, #132	; 0x84
 8003df6:	5c9b      	ldrb	r3, [r3, r2]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e02f      	b.n	8003e60 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2284      	movs	r2, #132	; 0x84
 8003e04:	2101      	movs	r1, #1
 8003e06:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2288      	movs	r2, #136	; 0x88
 8003e0c:	2124      	movs	r1, #36	; 0x24
 8003e0e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2101      	movs	r1, #1
 8003e24:	438a      	bics	r2, r1
 8003e26:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	4a0e      	ldr	r2, [pc, #56]	; (8003e68 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	0019      	movs	r1, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	0018      	movs	r0, r3
 8003e42:	f000 f813 	bl	8003e6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2288      	movs	r2, #136	; 0x88
 8003e52:	2120      	movs	r1, #32
 8003e54:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2284      	movs	r2, #132	; 0x84
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	0018      	movs	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	b004      	add	sp, #16
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	f1ffffff 	.word	0xf1ffffff

08003e6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d108      	bne.n	8003e8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	226a      	movs	r2, #106	; 0x6a
 8003e80:	2101      	movs	r1, #1
 8003e82:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2268      	movs	r2, #104	; 0x68
 8003e88:	2101      	movs	r1, #1
 8003e8a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003e8c:	e043      	b.n	8003f16 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003e8e:	260f      	movs	r6, #15
 8003e90:	19bb      	adds	r3, r7, r6
 8003e92:	2208      	movs	r2, #8
 8003e94:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003e96:	200e      	movs	r0, #14
 8003e98:	183b      	adds	r3, r7, r0
 8003e9a:	2208      	movs	r2, #8
 8003e9c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	0e5b      	lsrs	r3, r3, #25
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	240d      	movs	r4, #13
 8003eaa:	193b      	adds	r3, r7, r4
 8003eac:	2107      	movs	r1, #7
 8003eae:	400a      	ands	r2, r1
 8003eb0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	0f5b      	lsrs	r3, r3, #29
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	250c      	movs	r5, #12
 8003ebe:	197b      	adds	r3, r7, r5
 8003ec0:	2107      	movs	r1, #7
 8003ec2:	400a      	ands	r2, r1
 8003ec4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ec6:	183b      	adds	r3, r7, r0
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	197a      	adds	r2, r7, r5
 8003ecc:	7812      	ldrb	r2, [r2, #0]
 8003ece:	4914      	ldr	r1, [pc, #80]	; (8003f20 <UARTEx_SetNbDataToProcess+0xb4>)
 8003ed0:	5c8a      	ldrb	r2, [r1, r2]
 8003ed2:	435a      	muls	r2, r3
 8003ed4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003ed6:	197b      	adds	r3, r7, r5
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	4a12      	ldr	r2, [pc, #72]	; (8003f24 <UARTEx_SetNbDataToProcess+0xb8>)
 8003edc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ede:	0019      	movs	r1, r3
 8003ee0:	f7fc f998 	bl	8000214 <__divsi3>
 8003ee4:	0003      	movs	r3, r0
 8003ee6:	b299      	uxth	r1, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	226a      	movs	r2, #106	; 0x6a
 8003eec:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003eee:	19bb      	adds	r3, r7, r6
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	193a      	adds	r2, r7, r4
 8003ef4:	7812      	ldrb	r2, [r2, #0]
 8003ef6:	490a      	ldr	r1, [pc, #40]	; (8003f20 <UARTEx_SetNbDataToProcess+0xb4>)
 8003ef8:	5c8a      	ldrb	r2, [r1, r2]
 8003efa:	435a      	muls	r2, r3
 8003efc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003efe:	193b      	adds	r3, r7, r4
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	4a08      	ldr	r2, [pc, #32]	; (8003f24 <UARTEx_SetNbDataToProcess+0xb8>)
 8003f04:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f06:	0019      	movs	r1, r3
 8003f08:	f7fc f984 	bl	8000214 <__divsi3>
 8003f0c:	0003      	movs	r3, r0
 8003f0e:	b299      	uxth	r1, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2268      	movs	r2, #104	; 0x68
 8003f14:	5299      	strh	r1, [r3, r2]
}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	b005      	add	sp, #20
 8003f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	08004154 	.word	0x08004154
 8003f24:	0800415c 	.word	0x0800415c

08003f28 <__libc_init_array>:
 8003f28:	b570      	push	{r4, r5, r6, lr}
 8003f2a:	2600      	movs	r6, #0
 8003f2c:	4d0c      	ldr	r5, [pc, #48]	; (8003f60 <__libc_init_array+0x38>)
 8003f2e:	4c0d      	ldr	r4, [pc, #52]	; (8003f64 <__libc_init_array+0x3c>)
 8003f30:	1b64      	subs	r4, r4, r5
 8003f32:	10a4      	asrs	r4, r4, #2
 8003f34:	42a6      	cmp	r6, r4
 8003f36:	d109      	bne.n	8003f4c <__libc_init_array+0x24>
 8003f38:	2600      	movs	r6, #0
 8003f3a:	f000 f837 	bl	8003fac <_init>
 8003f3e:	4d0a      	ldr	r5, [pc, #40]	; (8003f68 <__libc_init_array+0x40>)
 8003f40:	4c0a      	ldr	r4, [pc, #40]	; (8003f6c <__libc_init_array+0x44>)
 8003f42:	1b64      	subs	r4, r4, r5
 8003f44:	10a4      	asrs	r4, r4, #2
 8003f46:	42a6      	cmp	r6, r4
 8003f48:	d105      	bne.n	8003f56 <__libc_init_array+0x2e>
 8003f4a:	bd70      	pop	{r4, r5, r6, pc}
 8003f4c:	00b3      	lsls	r3, r6, #2
 8003f4e:	58eb      	ldr	r3, [r5, r3]
 8003f50:	4798      	blx	r3
 8003f52:	3601      	adds	r6, #1
 8003f54:	e7ee      	b.n	8003f34 <__libc_init_array+0xc>
 8003f56:	00b3      	lsls	r3, r6, #2
 8003f58:	58eb      	ldr	r3, [r5, r3]
 8003f5a:	4798      	blx	r3
 8003f5c:	3601      	adds	r6, #1
 8003f5e:	e7f2      	b.n	8003f46 <__libc_init_array+0x1e>
 8003f60:	08004164 	.word	0x08004164
 8003f64:	08004164 	.word	0x08004164
 8003f68:	08004164 	.word	0x08004164
 8003f6c:	08004168 	.word	0x08004168

08003f70 <memset>:
 8003f70:	0003      	movs	r3, r0
 8003f72:	1882      	adds	r2, r0, r2
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d100      	bne.n	8003f7a <memset+0xa>
 8003f78:	4770      	bx	lr
 8003f7a:	7019      	strb	r1, [r3, #0]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	e7f9      	b.n	8003f74 <memset+0x4>

08003f80 <strstr>:
 8003f80:	780a      	ldrb	r2, [r1, #0]
 8003f82:	b530      	push	{r4, r5, lr}
 8003f84:	2a00      	cmp	r2, #0
 8003f86:	d10c      	bne.n	8003fa2 <strstr+0x22>
 8003f88:	bd30      	pop	{r4, r5, pc}
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d108      	bne.n	8003fa0 <strstr+0x20>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	5ccc      	ldrb	r4, [r1, r3]
 8003f92:	2c00      	cmp	r4, #0
 8003f94:	d0f8      	beq.n	8003f88 <strstr+0x8>
 8003f96:	5cc5      	ldrb	r5, [r0, r3]
 8003f98:	42a5      	cmp	r5, r4
 8003f9a:	d101      	bne.n	8003fa0 <strstr+0x20>
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	e7f7      	b.n	8003f90 <strstr+0x10>
 8003fa0:	3001      	adds	r0, #1
 8003fa2:	7803      	ldrb	r3, [r0, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1f0      	bne.n	8003f8a <strstr+0xa>
 8003fa8:	0018      	movs	r0, r3
 8003faa:	e7ed      	b.n	8003f88 <strstr+0x8>

08003fac <_init>:
 8003fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fae:	46c0      	nop			; (mov r8, r8)
 8003fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fb2:	bc08      	pop	{r3}
 8003fb4:	469e      	mov	lr, r3
 8003fb6:	4770      	bx	lr

08003fb8 <_fini>:
 8003fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fba:	46c0      	nop			; (mov r8, r8)
 8003fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fbe:	bc08      	pop	{r3}
 8003fc0:	469e      	mov	lr, r3
 8003fc2:	4770      	bx	lr
