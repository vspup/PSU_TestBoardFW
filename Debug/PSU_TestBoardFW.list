
PSU_TestBoardFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003080  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003138  08003138  00013138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031c0  080031c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080031c0  080031c0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031c0  080031c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031c0  080031c0  000131c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031c4  080031c4  000131c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  080031d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  080031d4  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eded  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c2  00000000  00000000  0002ee21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00030ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a68  00000000  00000000  00031a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014e17  00000000  00000000  00032480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f163  00000000  00000000  00047297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082ded  00000000  00000000  000563fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d91e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002778  00000000  00000000  000d9238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003120 	.word	0x08003120

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08003120 	.word	0x08003120

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f0:	f000 fa6e 	bl	80008d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f4:	f000 f807 	bl	8000406 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f8:	f000 f8dc 	bl	80005b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80003fc:	f000 f84c 	bl	8000498 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000400:	f000 f88a 	bl	8000518 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000404:	e7fe      	b.n	8000404 <main+0x18>

08000406 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000406:	b590      	push	{r4, r7, lr}
 8000408:	b093      	sub	sp, #76	; 0x4c
 800040a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040c:	2414      	movs	r4, #20
 800040e:	193b      	adds	r3, r7, r4
 8000410:	0018      	movs	r0, r3
 8000412:	2334      	movs	r3, #52	; 0x34
 8000414:	001a      	movs	r2, r3
 8000416:	2100      	movs	r1, #0
 8000418:	f002 fe7a 	bl	8003110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	0018      	movs	r0, r3
 8000420:	2310      	movs	r3, #16
 8000422:	001a      	movs	r2, r3
 8000424:	2100      	movs	r1, #0
 8000426:	f002 fe73 	bl	8003110 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800042a:	2380      	movs	r3, #128	; 0x80
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	0018      	movs	r0, r3
 8000430:	f000 ff2e 	bl	8001290 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000434:	193b      	adds	r3, r7, r4
 8000436:	2202      	movs	r2, #2
 8000438:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800043a:	193b      	adds	r3, r7, r4
 800043c:	2280      	movs	r2, #128	; 0x80
 800043e:	0052      	lsls	r2, r2, #1
 8000440:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000442:	193b      	adds	r3, r7, r4
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000448:	193b      	adds	r3, r7, r4
 800044a:	2240      	movs	r2, #64	; 0x40
 800044c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800044e:	193b      	adds	r3, r7, r4
 8000450:	2200      	movs	r2, #0
 8000452:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000454:	193b      	adds	r3, r7, r4
 8000456:	0018      	movs	r0, r3
 8000458:	f000 ff66 	bl	8001328 <HAL_RCC_OscConfig>
 800045c:	1e03      	subs	r3, r0, #0
 800045e:	d001      	beq.n	8000464 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000460:	f000 f8ec 	bl	800063c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2207      	movs	r2, #7
 8000468:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	2200      	movs	r2, #0
 800046e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	2200      	movs	r2, #0
 800047a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	2100      	movs	r1, #0
 8000480:	0018      	movs	r0, r3
 8000482:	f001 fa61 	bl	8001948 <HAL_RCC_ClockConfig>
 8000486:	1e03      	subs	r3, r0, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x88>
  {
    Error_Handler();
 800048a:	f000 f8d7 	bl	800063c <Error_Handler>
  }
}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	b013      	add	sp, #76	; 0x4c
 8000494:	bd90      	pop	{r4, r7, pc}
	...

08000498 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800049c:	4b1b      	ldr	r3, [pc, #108]	; (800050c <MX_I2C1_Init+0x74>)
 800049e:	4a1c      	ldr	r2, [pc, #112]	; (8000510 <MX_I2C1_Init+0x78>)
 80004a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80004a2:	4b1a      	ldr	r3, [pc, #104]	; (800050c <MX_I2C1_Init+0x74>)
 80004a4:	4a1b      	ldr	r2, [pc, #108]	; (8000514 <MX_I2C1_Init+0x7c>)
 80004a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004a8:	4b18      	ldr	r3, [pc, #96]	; (800050c <MX_I2C1_Init+0x74>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004ae:	4b17      	ldr	r3, [pc, #92]	; (800050c <MX_I2C1_Init+0x74>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004b4:	4b15      	ldr	r3, [pc, #84]	; (800050c <MX_I2C1_Init+0x74>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004ba:	4b14      	ldr	r3, [pc, #80]	; (800050c <MX_I2C1_Init+0x74>)
 80004bc:	2200      	movs	r2, #0
 80004be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004c0:	4b12      	ldr	r3, [pc, #72]	; (800050c <MX_I2C1_Init+0x74>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004c6:	4b11      	ldr	r3, [pc, #68]	; (800050c <MX_I2C1_Init+0x74>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <MX_I2C1_Init+0x74>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <MX_I2C1_Init+0x74>)
 80004d4:	0018      	movs	r0, r3
 80004d6:	f000 fdad 	bl	8001034 <HAL_I2C_Init>
 80004da:	1e03      	subs	r3, r0, #0
 80004dc:	d001      	beq.n	80004e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004de:	f000 f8ad 	bl	800063c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004e2:	4b0a      	ldr	r3, [pc, #40]	; (800050c <MX_I2C1_Init+0x74>)
 80004e4:	2100      	movs	r1, #0
 80004e6:	0018      	movs	r0, r3
 80004e8:	f000 fe3a 	bl	8001160 <HAL_I2CEx_ConfigAnalogFilter>
 80004ec:	1e03      	subs	r3, r0, #0
 80004ee:	d001      	beq.n	80004f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004f0:	f000 f8a4 	bl	800063c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <MX_I2C1_Init+0x74>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	0018      	movs	r0, r3
 80004fa:	f000 fe7d 	bl	80011f8 <HAL_I2CEx_ConfigDigitalFilter>
 80004fe:	1e03      	subs	r3, r0, #0
 8000500:	d001      	beq.n	8000506 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000502:	f000 f89b 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000028 	.word	0x20000028
 8000510:	40005400 	.word	0x40005400
 8000514:	00303d5b 	.word	0x00303d5b

08000518 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800051c:	4b23      	ldr	r3, [pc, #140]	; (80005ac <MX_USART1_UART_Init+0x94>)
 800051e:	4a24      	ldr	r2, [pc, #144]	; (80005b0 <MX_USART1_UART_Init+0x98>)
 8000520:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000522:	4b22      	ldr	r3, [pc, #136]	; (80005ac <MX_USART1_UART_Init+0x94>)
 8000524:	22e1      	movs	r2, #225	; 0xe1
 8000526:	0252      	lsls	r2, r2, #9
 8000528:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800052a:	4b20      	ldr	r3, [pc, #128]	; (80005ac <MX_USART1_UART_Init+0x94>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000530:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <MX_USART1_UART_Init+0x94>)
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000536:	4b1d      	ldr	r3, [pc, #116]	; (80005ac <MX_USART1_UART_Init+0x94>)
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800053c:	4b1b      	ldr	r3, [pc, #108]	; (80005ac <MX_USART1_UART_Init+0x94>)
 800053e:	220c      	movs	r2, #12
 8000540:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000542:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <MX_USART1_UART_Init+0x94>)
 8000544:	2200      	movs	r2, #0
 8000546:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000548:	4b18      	ldr	r3, [pc, #96]	; (80005ac <MX_USART1_UART_Init+0x94>)
 800054a:	2200      	movs	r2, #0
 800054c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800054e:	4b17      	ldr	r3, [pc, #92]	; (80005ac <MX_USART1_UART_Init+0x94>)
 8000550:	2200      	movs	r2, #0
 8000552:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <MX_USART1_UART_Init+0x94>)
 8000556:	2200      	movs	r2, #0
 8000558:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800055a:	4b14      	ldr	r3, [pc, #80]	; (80005ac <MX_USART1_UART_Init+0x94>)
 800055c:	2200      	movs	r2, #0
 800055e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <MX_USART1_UART_Init+0x94>)
 8000562:	0018      	movs	r0, r3
 8000564:	f001 fcce 	bl	8001f04 <HAL_UART_Init>
 8000568:	1e03      	subs	r3, r0, #0
 800056a:	d001      	beq.n	8000570 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800056c:	f000 f866 	bl	800063c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000570:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <MX_USART1_UART_Init+0x94>)
 8000572:	2100      	movs	r1, #0
 8000574:	0018      	movs	r0, r3
 8000576:	f002 fcc7 	bl	8002f08 <HAL_UARTEx_SetTxFifoThreshold>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800057e:	f000 f85d 	bl	800063c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <MX_USART1_UART_Init+0x94>)
 8000584:	2100      	movs	r1, #0
 8000586:	0018      	movs	r0, r3
 8000588:	f002 fcfe 	bl	8002f88 <HAL_UARTEx_SetRxFifoThreshold>
 800058c:	1e03      	subs	r3, r0, #0
 800058e:	d001      	beq.n	8000594 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000590:	f000 f854 	bl	800063c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <MX_USART1_UART_Init+0x94>)
 8000596:	0018      	movs	r0, r3
 8000598:	f002 fc7c 	bl	8002e94 <HAL_UARTEx_DisableFifoMode>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80005a0:	f000 f84c 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	2000007c 	.word	0x2000007c
 80005b0:	40013800 	.word	0x40013800

080005b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b089      	sub	sp, #36	; 0x24
 80005b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	240c      	movs	r4, #12
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	0018      	movs	r0, r3
 80005c0:	2314      	movs	r3, #20
 80005c2:	001a      	movs	r2, r3
 80005c4:	2100      	movs	r1, #0
 80005c6:	f002 fda3 	bl	8003110 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <MX_GPIO_Init+0x80>)
 80005cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005ce:	4b19      	ldr	r3, [pc, #100]	; (8000634 <MX_GPIO_Init+0x80>)
 80005d0:	2102      	movs	r1, #2
 80005d2:	430a      	orrs	r2, r1
 80005d4:	635a      	str	r2, [r3, #52]	; 0x34
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <MX_GPIO_Init+0x80>)
 80005d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005da:	2202      	movs	r2, #2
 80005dc:	4013      	ands	r3, r2
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_GPIO_Init+0x80>)
 80005e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005e6:	4b13      	ldr	r3, [pc, #76]	; (8000634 <MX_GPIO_Init+0x80>)
 80005e8:	2101      	movs	r1, #1
 80005ea:	430a      	orrs	r2, r1
 80005ec:	635a      	str	r2, [r3, #52]	; 0x34
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_GPIO_Init+0x80>)
 80005f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005f2:	2201      	movs	r2, #1
 80005f4:	4013      	ands	r3, r2
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BCM_EN0_Pin|BCM_EN1_Pin, GPIO_PIN_RESET);
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_GPIO_Init+0x84>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	2103      	movs	r1, #3
 8000600:	0018      	movs	r0, r3
 8000602:	f000 fcf9 	bl	8000ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BCM_EN0_Pin BCM_EN1_Pin */
  GPIO_InitStruct.Pin = BCM_EN0_Pin|BCM_EN1_Pin;
 8000606:	0021      	movs	r1, r4
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2203      	movs	r2, #3
 800060c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2201      	movs	r2, #1
 8000612:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000620:	187b      	adds	r3, r7, r1
 8000622:	4a05      	ldr	r2, [pc, #20]	; (8000638 <MX_GPIO_Init+0x84>)
 8000624:	0019      	movs	r1, r3
 8000626:	0010      	movs	r0, r2
 8000628:	f000 fb82 	bl	8000d30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	b009      	add	sp, #36	; 0x24
 8000632:	bd90      	pop	{r4, r7, pc}
 8000634:	40021000 	.word	0x40021000
 8000638:	50000400 	.word	0x50000400

0800063c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
}
 8000642:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000644:	e7fe      	b.n	8000644 <Error_Handler+0x8>
	...

08000648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064e:	4b0f      	ldr	r3, [pc, #60]	; (800068c <HAL_MspInit+0x44>)
 8000650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <HAL_MspInit+0x44>)
 8000654:	2101      	movs	r1, #1
 8000656:	430a      	orrs	r2, r1
 8000658:	641a      	str	r2, [r3, #64]	; 0x40
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <HAL_MspInit+0x44>)
 800065c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065e:	2201      	movs	r2, #1
 8000660:	4013      	ands	r3, r2
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <HAL_MspInit+0x44>)
 8000668:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <HAL_MspInit+0x44>)
 800066c:	2180      	movs	r1, #128	; 0x80
 800066e:	0549      	lsls	r1, r1, #21
 8000670:	430a      	orrs	r2, r1
 8000672:	63da      	str	r2, [r3, #60]	; 0x3c
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <HAL_MspInit+0x44>)
 8000676:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000678:	2380      	movs	r3, #128	; 0x80
 800067a:	055b      	lsls	r3, r3, #21
 800067c:	4013      	ands	r3, r2
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b002      	add	sp, #8
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	40021000 	.word	0x40021000

08000690 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b091      	sub	sp, #68	; 0x44
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	232c      	movs	r3, #44	; 0x2c
 800069a:	18fb      	adds	r3, r7, r3
 800069c:	0018      	movs	r0, r3
 800069e:	2314      	movs	r3, #20
 80006a0:	001a      	movs	r2, r3
 80006a2:	2100      	movs	r1, #0
 80006a4:	f002 fd34 	bl	8003110 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006a8:	2410      	movs	r4, #16
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	0018      	movs	r0, r3
 80006ae:	231c      	movs	r3, #28
 80006b0:	001a      	movs	r2, r3
 80006b2:	2100      	movs	r1, #0
 80006b4:	f002 fd2c 	bl	8003110 <memset>
  if(hi2c->Instance==I2C1)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a22      	ldr	r2, [pc, #136]	; (8000748 <HAL_I2C_MspInit+0xb8>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d13e      	bne.n	8000740 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2220      	movs	r2, #32
 80006c6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	0018      	movs	r0, r3
 80006d2:	f001 fae3 	bl	8001c9c <HAL_RCCEx_PeriphCLKConfig>
 80006d6:	1e03      	subs	r3, r0, #0
 80006d8:	d001      	beq.n	80006de <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80006da:	f7ff ffaf 	bl	800063c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	4b1b      	ldr	r3, [pc, #108]	; (800074c <HAL_I2C_MspInit+0xbc>)
 80006e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <HAL_I2C_MspInit+0xbc>)
 80006e4:	2102      	movs	r1, #2
 80006e6:	430a      	orrs	r2, r1
 80006e8:	635a      	str	r2, [r3, #52]	; 0x34
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <HAL_I2C_MspInit+0xbc>)
 80006ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ee:	2202      	movs	r2, #2
 80006f0:	4013      	ands	r3, r2
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80006f6:	212c      	movs	r1, #44	; 0x2c
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	22c0      	movs	r2, #192	; 0xc0
 80006fc:	0052      	lsls	r2, r2, #1
 80006fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2212      	movs	r2, #18
 8000704:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2206      	movs	r2, #6
 8000716:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000718:	187b      	adds	r3, r7, r1
 800071a:	4a0d      	ldr	r2, [pc, #52]	; (8000750 <HAL_I2C_MspInit+0xc0>)
 800071c:	0019      	movs	r1, r3
 800071e:	0010      	movs	r0, r2
 8000720:	f000 fb06 	bl	8000d30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <HAL_I2C_MspInit+0xbc>)
 8000726:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <HAL_I2C_MspInit+0xbc>)
 800072a:	2180      	movs	r1, #128	; 0x80
 800072c:	0389      	lsls	r1, r1, #14
 800072e:	430a      	orrs	r2, r1
 8000730:	63da      	str	r2, [r3, #60]	; 0x3c
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <HAL_I2C_MspInit+0xbc>)
 8000734:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000736:	2380      	movs	r3, #128	; 0x80
 8000738:	039b      	lsls	r3, r3, #14
 800073a:	4013      	ands	r3, r2
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b011      	add	sp, #68	; 0x44
 8000746:	bd90      	pop	{r4, r7, pc}
 8000748:	40005400 	.word	0x40005400
 800074c:	40021000 	.word	0x40021000
 8000750:	50000400 	.word	0x50000400

08000754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b091      	sub	sp, #68	; 0x44
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	232c      	movs	r3, #44	; 0x2c
 800075e:	18fb      	adds	r3, r7, r3
 8000760:	0018      	movs	r0, r3
 8000762:	2314      	movs	r3, #20
 8000764:	001a      	movs	r2, r3
 8000766:	2100      	movs	r1, #0
 8000768:	f002 fcd2 	bl	8003110 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800076c:	2410      	movs	r4, #16
 800076e:	193b      	adds	r3, r7, r4
 8000770:	0018      	movs	r0, r3
 8000772:	231c      	movs	r3, #28
 8000774:	001a      	movs	r2, r3
 8000776:	2100      	movs	r1, #0
 8000778:	f002 fcca 	bl	8003110 <memset>
  if(huart->Instance==USART1)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a27      	ldr	r2, [pc, #156]	; (8000820 <HAL_UART_MspInit+0xcc>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d147      	bne.n	8000816 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2201      	movs	r2, #1
 800078a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2200      	movs	r2, #0
 8000790:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000792:	193b      	adds	r3, r7, r4
 8000794:	0018      	movs	r0, r3
 8000796:	f001 fa81 	bl	8001c9c <HAL_RCCEx_PeriphCLKConfig>
 800079a:	1e03      	subs	r3, r0, #0
 800079c:	d001      	beq.n	80007a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800079e:	f7ff ff4d 	bl	800063c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007a2:	4b20      	ldr	r3, [pc, #128]	; (8000824 <HAL_UART_MspInit+0xd0>)
 80007a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007a6:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <HAL_UART_MspInit+0xd0>)
 80007a8:	2180      	movs	r1, #128	; 0x80
 80007aa:	01c9      	lsls	r1, r1, #7
 80007ac:	430a      	orrs	r2, r1
 80007ae:	641a      	str	r2, [r3, #64]	; 0x40
 80007b0:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <HAL_UART_MspInit+0xd0>)
 80007b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007b4:	2380      	movs	r3, #128	; 0x80
 80007b6:	01db      	lsls	r3, r3, #7
 80007b8:	4013      	ands	r3, r2
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <HAL_UART_MspInit+0xd0>)
 80007c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <HAL_UART_MspInit+0xd0>)
 80007c4:	2101      	movs	r1, #1
 80007c6:	430a      	orrs	r2, r1
 80007c8:	635a      	str	r2, [r3, #52]	; 0x34
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <HAL_UART_MspInit+0xd0>)
 80007cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ce:	2201      	movs	r2, #1
 80007d0:	4013      	ands	r3, r2
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007d6:	212c      	movs	r1, #44	; 0x2c
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	22c0      	movs	r2, #192	; 0xc0
 80007dc:	00d2      	lsls	r2, r2, #3
 80007de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2202      	movs	r2, #2
 80007e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2201      	movs	r2, #1
 80007f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f8:	187a      	adds	r2, r7, r1
 80007fa:	23a0      	movs	r3, #160	; 0xa0
 80007fc:	05db      	lsls	r3, r3, #23
 80007fe:	0011      	movs	r1, r2
 8000800:	0018      	movs	r0, r3
 8000802:	f000 fa95 	bl	8000d30 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	201b      	movs	r0, #27
 800080c:	f000 f992 	bl	8000b34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000810:	201b      	movs	r0, #27
 8000812:	f000 f9a4 	bl	8000b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b011      	add	sp, #68	; 0x44
 800081c:	bd90      	pop	{r4, r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	40013800 	.word	0x40013800
 8000824:	40021000 	.word	0x40021000

08000828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800082c:	e7fe      	b.n	800082c <NMI_Handler+0x4>

0800082e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <HardFault_Handler+0x4>

08000834 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800084c:	f000 f8aa 	bl	80009a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <USART1_IRQHandler+0x14>)
 800085e:	0018      	movs	r0, r3
 8000860:	f001 fba6 	bl	8001fb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	2000007c 	.word	0x2000007c

08000870 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800087c:	480d      	ldr	r0, [pc, #52]	; (80008b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800087e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000880:	f7ff fff6 	bl	8000870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000884:	480c      	ldr	r0, [pc, #48]	; (80008b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000886:	490d      	ldr	r1, [pc, #52]	; (80008bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000888:	4a0d      	ldr	r2, [pc, #52]	; (80008c0 <LoopForever+0xe>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800088c:	e002      	b.n	8000894 <LoopCopyDataInit>

0800088e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000892:	3304      	adds	r3, #4

08000894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000898:	d3f9      	bcc.n	800088e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800089c:	4c0a      	ldr	r4, [pc, #40]	; (80008c8 <LoopForever+0x16>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a0:	e001      	b.n	80008a6 <LoopFillZerobss>

080008a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a4:	3204      	adds	r2, #4

080008a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a8:	d3fb      	bcc.n	80008a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008aa:	f002 fc0d 	bl	80030c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80008ae:	f7ff fd9d 	bl	80003ec <main>

080008b2 <LoopForever>:

LoopForever:
  b LoopForever
 80008b2:	e7fe      	b.n	80008b2 <LoopForever>
  ldr   r0, =_estack
 80008b4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80008b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008c0:	080031c8 	.word	0x080031c8
  ldr r2, =_sbss
 80008c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008c8:	20000114 	.word	0x20000114

080008cc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008cc:	e7fe      	b.n	80008cc <ADC1_IRQHandler>
	...

080008d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <HAL_Init+0x3c>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <HAL_Init+0x3c>)
 80008e2:	2180      	movs	r1, #128	; 0x80
 80008e4:	0049      	lsls	r1, r1, #1
 80008e6:	430a      	orrs	r2, r1
 80008e8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008ea:	2003      	movs	r0, #3
 80008ec:	f000 f810 	bl	8000910 <HAL_InitTick>
 80008f0:	1e03      	subs	r3, r0, #0
 80008f2:	d003      	beq.n	80008fc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	2201      	movs	r2, #1
 80008f8:	701a      	strb	r2, [r3, #0]
 80008fa:	e001      	b.n	8000900 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80008fc:	f7ff fea4 	bl	8000648 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000900:	1dfb      	adds	r3, r7, #7
 8000902:	781b      	ldrb	r3, [r3, #0]
}
 8000904:	0018      	movs	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	b002      	add	sp, #8
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40022000 	.word	0x40022000

08000910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000918:	230f      	movs	r3, #15
 800091a:	18fb      	adds	r3, r7, r3
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000920:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <HAL_InitTick+0x88>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d02b      	beq.n	8000980 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000928:	4b1c      	ldr	r3, [pc, #112]	; (800099c <HAL_InitTick+0x8c>)
 800092a:	681c      	ldr	r4, [r3, #0]
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <HAL_InitTick+0x88>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	0019      	movs	r1, r3
 8000932:	23fa      	movs	r3, #250	; 0xfa
 8000934:	0098      	lsls	r0, r3, #2
 8000936:	f7ff fbe3 	bl	8000100 <__udivsi3>
 800093a:	0003      	movs	r3, r0
 800093c:	0019      	movs	r1, r3
 800093e:	0020      	movs	r0, r4
 8000940:	f7ff fbde 	bl	8000100 <__udivsi3>
 8000944:	0003      	movs	r3, r0
 8000946:	0018      	movs	r0, r3
 8000948:	f000 f919 	bl	8000b7e <HAL_SYSTICK_Config>
 800094c:	1e03      	subs	r3, r0, #0
 800094e:	d112      	bne.n	8000976 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b03      	cmp	r3, #3
 8000954:	d80a      	bhi.n	800096c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	2301      	movs	r3, #1
 800095a:	425b      	negs	r3, r3
 800095c:	2200      	movs	r2, #0
 800095e:	0018      	movs	r0, r3
 8000960:	f000 f8e8 	bl	8000b34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000964:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <HAL_InitTick+0x90>)
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	e00d      	b.n	8000988 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800096c:	230f      	movs	r3, #15
 800096e:	18fb      	adds	r3, r7, r3
 8000970:	2201      	movs	r2, #1
 8000972:	701a      	strb	r2, [r3, #0]
 8000974:	e008      	b.n	8000988 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000976:	230f      	movs	r3, #15
 8000978:	18fb      	adds	r3, r7, r3
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
 800097e:	e003      	b.n	8000988 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000980:	230f      	movs	r3, #15
 8000982:	18fb      	adds	r3, r7, r3
 8000984:	2201      	movs	r2, #1
 8000986:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000988:	230f      	movs	r3, #15
 800098a:	18fb      	adds	r3, r7, r3
 800098c:	781b      	ldrb	r3, [r3, #0]
}
 800098e:	0018      	movs	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	b005      	add	sp, #20
 8000994:	bd90      	pop	{r4, r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	20000008 	.word	0x20000008
 800099c:	20000000 	.word	0x20000000
 80009a0:	20000004 	.word	0x20000004

080009a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <HAL_IncTick+0x1c>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	001a      	movs	r2, r3
 80009ae:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <HAL_IncTick+0x20>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	18d2      	adds	r2, r2, r3
 80009b4:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <HAL_IncTick+0x20>)
 80009b6:	601a      	str	r2, [r3, #0]
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000110 	.word	0x20000110

080009c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  return uwTick;
 80009cc:	4b02      	ldr	r3, [pc, #8]	; (80009d8 <HAL_GetTick+0x10>)
 80009ce:	681b      	ldr	r3, [r3, #0]
}
 80009d0:	0018      	movs	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	20000110 	.word	0x20000110

080009dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	0002      	movs	r2, r0
 80009e4:	1dfb      	adds	r3, r7, #7
 80009e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009e8:	1dfb      	adds	r3, r7, #7
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b7f      	cmp	r3, #127	; 0x7f
 80009ee:	d809      	bhi.n	8000a04 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009f0:	1dfb      	adds	r3, r7, #7
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	001a      	movs	r2, r3
 80009f6:	231f      	movs	r3, #31
 80009f8:	401a      	ands	r2, r3
 80009fa:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <__NVIC_EnableIRQ+0x30>)
 80009fc:	2101      	movs	r1, #1
 80009fe:	4091      	lsls	r1, r2
 8000a00:	000a      	movs	r2, r1
 8000a02:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b002      	add	sp, #8
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	e000e100 	.word	0xe000e100

08000a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	0002      	movs	r2, r0
 8000a18:	6039      	str	r1, [r7, #0]
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b7f      	cmp	r3, #127	; 0x7f
 8000a24:	d828      	bhi.n	8000a78 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a26:	4a2f      	ldr	r2, [pc, #188]	; (8000ae4 <__NVIC_SetPriority+0xd4>)
 8000a28:	1dfb      	adds	r3, r7, #7
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	b25b      	sxtb	r3, r3
 8000a2e:	089b      	lsrs	r3, r3, #2
 8000a30:	33c0      	adds	r3, #192	; 0xc0
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	589b      	ldr	r3, [r3, r2]
 8000a36:	1dfa      	adds	r2, r7, #7
 8000a38:	7812      	ldrb	r2, [r2, #0]
 8000a3a:	0011      	movs	r1, r2
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	400a      	ands	r2, r1
 8000a40:	00d2      	lsls	r2, r2, #3
 8000a42:	21ff      	movs	r1, #255	; 0xff
 8000a44:	4091      	lsls	r1, r2
 8000a46:	000a      	movs	r2, r1
 8000a48:	43d2      	mvns	r2, r2
 8000a4a:	401a      	ands	r2, r3
 8000a4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	019b      	lsls	r3, r3, #6
 8000a52:	22ff      	movs	r2, #255	; 0xff
 8000a54:	401a      	ands	r2, r3
 8000a56:	1dfb      	adds	r3, r7, #7
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	4003      	ands	r3, r0
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a64:	481f      	ldr	r0, [pc, #124]	; (8000ae4 <__NVIC_SetPriority+0xd4>)
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b25b      	sxtb	r3, r3
 8000a6c:	089b      	lsrs	r3, r3, #2
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	33c0      	adds	r3, #192	; 0xc0
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a76:	e031      	b.n	8000adc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a78:	4a1b      	ldr	r2, [pc, #108]	; (8000ae8 <__NVIC_SetPriority+0xd8>)
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	0019      	movs	r1, r3
 8000a80:	230f      	movs	r3, #15
 8000a82:	400b      	ands	r3, r1
 8000a84:	3b08      	subs	r3, #8
 8000a86:	089b      	lsrs	r3, r3, #2
 8000a88:	3306      	adds	r3, #6
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	18d3      	adds	r3, r2, r3
 8000a8e:	3304      	adds	r3, #4
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	1dfa      	adds	r2, r7, #7
 8000a94:	7812      	ldrb	r2, [r2, #0]
 8000a96:	0011      	movs	r1, r2
 8000a98:	2203      	movs	r2, #3
 8000a9a:	400a      	ands	r2, r1
 8000a9c:	00d2      	lsls	r2, r2, #3
 8000a9e:	21ff      	movs	r1, #255	; 0xff
 8000aa0:	4091      	lsls	r1, r2
 8000aa2:	000a      	movs	r2, r1
 8000aa4:	43d2      	mvns	r2, r2
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	019b      	lsls	r3, r3, #6
 8000aae:	22ff      	movs	r2, #255	; 0xff
 8000ab0:	401a      	ands	r2, r3
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	2303      	movs	r3, #3
 8000aba:	4003      	ands	r3, r0
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac0:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <__NVIC_SetPriority+0xd8>)
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	001c      	movs	r4, r3
 8000ac8:	230f      	movs	r3, #15
 8000aca:	4023      	ands	r3, r4
 8000acc:	3b08      	subs	r3, #8
 8000ace:	089b      	lsrs	r3, r3, #2
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	3306      	adds	r3, #6
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	18c3      	adds	r3, r0, r3
 8000ad8:	3304      	adds	r3, #4
 8000ada:	601a      	str	r2, [r3, #0]
}
 8000adc:	46c0      	nop			; (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b003      	add	sp, #12
 8000ae2:	bd90      	pop	{r4, r7, pc}
 8000ae4:	e000e100 	.word	0xe000e100
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	1e5a      	subs	r2, r3, #1
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	045b      	lsls	r3, r3, #17
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d301      	bcc.n	8000b04 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b00:	2301      	movs	r3, #1
 8000b02:	e010      	b.n	8000b26 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <SysTick_Config+0x44>)
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	3a01      	subs	r2, #1
 8000b0a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	425b      	negs	r3, r3
 8000b10:	2103      	movs	r1, #3
 8000b12:	0018      	movs	r0, r3
 8000b14:	f7ff ff7c 	bl	8000a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <SysTick_Config+0x44>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1e:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <SysTick_Config+0x44>)
 8000b20:	2207      	movs	r2, #7
 8000b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	0018      	movs	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b002      	add	sp, #8
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	e000e010 	.word	0xe000e010

08000b34 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
 8000b3e:	210f      	movs	r1, #15
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	1c02      	adds	r2, r0, #0
 8000b44:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	b25b      	sxtb	r3, r3
 8000b4e:	0011      	movs	r1, r2
 8000b50:	0018      	movs	r0, r3
 8000b52:	f7ff ff5d 	bl	8000a10 <__NVIC_SetPriority>
}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b004      	add	sp, #16
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	0002      	movs	r2, r0
 8000b66:	1dfb      	adds	r3, r7, #7
 8000b68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	b25b      	sxtb	r3, r3
 8000b70:	0018      	movs	r0, r3
 8000b72:	f7ff ff33 	bl	80009dc <__NVIC_EnableIRQ>
}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b002      	add	sp, #8
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f7ff ffaf 	bl	8000aec <SysTick_Config>
 8000b8e:	0003      	movs	r3, r0
}
 8000b90:	0018      	movs	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b002      	add	sp, #8
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e050      	b.n	8000c4c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2225      	movs	r2, #37	; 0x25
 8000bae:	5c9b      	ldrb	r3, [r3, r2]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d008      	beq.n	8000bc8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2204      	movs	r2, #4
 8000bba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2224      	movs	r2, #36	; 0x24
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e041      	b.n	8000c4c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	210e      	movs	r1, #14
 8000bd4:	438a      	bics	r2, r1
 8000bd6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	491c      	ldr	r1, [pc, #112]	; (8000c54 <HAL_DMA_Abort+0xbc>)
 8000be4:	400a      	ands	r2, r1
 8000be6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	438a      	bics	r2, r1
 8000bf6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8000bf8:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <HAL_DMA_Abort+0xc0>)
 8000bfa:	6859      	ldr	r1, [r3, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	221c      	movs	r2, #28
 8000c02:	4013      	ands	r3, r2
 8000c04:	2201      	movs	r2, #1
 8000c06:	409a      	lsls	r2, r3
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <HAL_DMA_Abort+0xc0>)
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000c16:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d00c      	beq.n	8000c3a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c2a:	490a      	ldr	r1, [pc, #40]	; (8000c54 <HAL_DMA_Abort+0xbc>)
 8000c2c:	400a      	ands	r2, r1
 8000c2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000c38:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2225      	movs	r2, #37	; 0x25
 8000c3e:	2101      	movs	r1, #1
 8000c40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2224      	movs	r2, #36	; 0x24
 8000c46:	2100      	movs	r1, #0
 8000c48:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
}
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b002      	add	sp, #8
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	fffffeff 	.word	0xfffffeff
 8000c58:	40020000 	.word	0x40020000

08000c5c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c64:	210f      	movs	r1, #15
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2225      	movs	r2, #37	; 0x25
 8000c70:	5c9b      	ldrb	r3, [r3, r2]
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d006      	beq.n	8000c86 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2201      	movs	r2, #1
 8000c82:	701a      	strb	r2, [r3, #0]
 8000c84:	e049      	b.n	8000d1a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	210e      	movs	r1, #14
 8000c92:	438a      	bics	r2, r1
 8000c94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	438a      	bics	r2, r1
 8000ca4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb0:	491d      	ldr	r1, [pc, #116]	; (8000d28 <HAL_DMA_Abort_IT+0xcc>)
 8000cb2:	400a      	ands	r2, r1
 8000cb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <HAL_DMA_Abort_IT+0xd0>)
 8000cb8:	6859      	ldr	r1, [r3, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	221c      	movs	r2, #28
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	409a      	lsls	r2, r3
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <HAL_DMA_Abort_IT+0xd0>)
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000cd4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d00c      	beq.n	8000cf8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ce8:	490f      	ldr	r1, [pc, #60]	; (8000d28 <HAL_DMA_Abort_IT+0xcc>)
 8000cea:	400a      	ands	r2, r1
 8000cec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000cf6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2225      	movs	r2, #37	; 0x25
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2224      	movs	r2, #36	; 0x24
 8000d04:	2100      	movs	r1, #0
 8000d06:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d004      	beq.n	8000d1a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	0010      	movs	r0, r2
 8000d18:	4798      	blx	r3
    }
  }
  return status;
 8000d1a:	230f      	movs	r3, #15
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	781b      	ldrb	r3, [r3, #0]
}
 8000d20:	0018      	movs	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b004      	add	sp, #16
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	fffffeff 	.word	0xfffffeff
 8000d2c:	40020000 	.word	0x40020000

08000d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3e:	e147      	b.n	8000fd0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2101      	movs	r1, #1
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	000a      	movs	r2, r1
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d100      	bne.n	8000d58 <HAL_GPIO_Init+0x28>
 8000d56:	e138      	b.n	8000fca <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	4013      	ands	r3, r2
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d005      	beq.n	8000d70 <HAL_GPIO_Init+0x40>
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	2203      	movs	r2, #3
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d130      	bne.n	8000dd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	409a      	lsls	r2, r3
 8000d7e:	0013      	movs	r3, r2
 8000d80:	43da      	mvns	r2, r3
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	68da      	ldr	r2, [r3, #12]
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	409a      	lsls	r2, r3
 8000d92:	0013      	movs	r3, r2
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000da6:	2201      	movs	r2, #1
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
 8000dac:	0013      	movs	r3, r2
 8000dae:	43da      	mvns	r2, r3
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	091b      	lsrs	r3, r3, #4
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	409a      	lsls	r2, r3
 8000dc4:	0013      	movs	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	4013      	ands	r3, r2
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d017      	beq.n	8000e0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	2203      	movs	r2, #3
 8000dea:	409a      	lsls	r2, r3
 8000dec:	0013      	movs	r3, r2
 8000dee:	43da      	mvns	r2, r3
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	4013      	ands	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	689a      	ldr	r2, [r3, #8]
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	409a      	lsls	r2, r3
 8000e00:	0013      	movs	r3, r2
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2203      	movs	r2, #3
 8000e14:	4013      	ands	r3, r2
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d123      	bne.n	8000e62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	08da      	lsrs	r2, r3, #3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	3208      	adds	r2, #8
 8000e22:	0092      	lsls	r2, r2, #2
 8000e24:	58d3      	ldr	r3, [r2, r3]
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	2207      	movs	r2, #7
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	220f      	movs	r2, #15
 8000e32:	409a      	lsls	r2, r3
 8000e34:	0013      	movs	r3, r2
 8000e36:	43da      	mvns	r2, r3
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	691a      	ldr	r2, [r3, #16]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	2107      	movs	r1, #7
 8000e46:	400b      	ands	r3, r1
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	409a      	lsls	r2, r3
 8000e4c:	0013      	movs	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	08da      	lsrs	r2, r3, #3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3208      	adds	r2, #8
 8000e5c:	0092      	lsls	r2, r2, #2
 8000e5e:	6939      	ldr	r1, [r7, #16]
 8000e60:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	409a      	lsls	r2, r3
 8000e70:	0013      	movs	r3, r2
 8000e72:	43da      	mvns	r2, r3
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2203      	movs	r2, #3
 8000e80:	401a      	ands	r2, r3
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	409a      	lsls	r2, r3
 8000e88:	0013      	movs	r3, r2
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	23c0      	movs	r3, #192	; 0xc0
 8000e9c:	029b      	lsls	r3, r3, #10
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d100      	bne.n	8000ea4 <HAL_GPIO_Init+0x174>
 8000ea2:	e092      	b.n	8000fca <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000ea4:	4a50      	ldr	r2, [pc, #320]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	089b      	lsrs	r3, r3, #2
 8000eaa:	3318      	adds	r3, #24
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	589b      	ldr	r3, [r3, r2]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	220f      	movs	r2, #15
 8000ebc:	409a      	lsls	r2, r3
 8000ebe:	0013      	movs	r3, r2
 8000ec0:	43da      	mvns	r2, r3
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	23a0      	movs	r3, #160	; 0xa0
 8000ecc:	05db      	lsls	r3, r3, #23
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d013      	beq.n	8000efa <HAL_GPIO_Init+0x1ca>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a45      	ldr	r2, [pc, #276]	; (8000fec <HAL_GPIO_Init+0x2bc>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d00d      	beq.n	8000ef6 <HAL_GPIO_Init+0x1c6>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a44      	ldr	r2, [pc, #272]	; (8000ff0 <HAL_GPIO_Init+0x2c0>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d007      	beq.n	8000ef2 <HAL_GPIO_Init+0x1c2>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a43      	ldr	r2, [pc, #268]	; (8000ff4 <HAL_GPIO_Init+0x2c4>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d101      	bne.n	8000eee <HAL_GPIO_Init+0x1be>
 8000eea:	2303      	movs	r3, #3
 8000eec:	e006      	b.n	8000efc <HAL_GPIO_Init+0x1cc>
 8000eee:	2305      	movs	r3, #5
 8000ef0:	e004      	b.n	8000efc <HAL_GPIO_Init+0x1cc>
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	e002      	b.n	8000efc <HAL_GPIO_Init+0x1cc>
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e000      	b.n	8000efc <HAL_GPIO_Init+0x1cc>
 8000efa:	2300      	movs	r3, #0
 8000efc:	697a      	ldr	r2, [r7, #20]
 8000efe:	2103      	movs	r1, #3
 8000f00:	400a      	ands	r2, r1
 8000f02:	00d2      	lsls	r2, r2, #3
 8000f04:	4093      	lsls	r3, r2
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000f0c:	4936      	ldr	r1, [pc, #216]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	089b      	lsrs	r3, r3, #2
 8000f12:	3318      	adds	r3, #24
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f1a:	4b33      	ldr	r3, [pc, #204]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	43da      	mvns	r2, r3
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	2380      	movs	r3, #128	; 0x80
 8000f30:	035b      	lsls	r3, r3, #13
 8000f32:	4013      	ands	r3, r2
 8000f34:	d003      	beq.n	8000f3e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f3e:	4b2a      	ldr	r3, [pc, #168]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f44:	4b28      	ldr	r3, [pc, #160]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	43da      	mvns	r2, r3
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	2380      	movs	r3, #128	; 0x80
 8000f5a:	039b      	lsls	r3, r3, #14
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	d003      	beq.n	8000f68 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f68:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f6e:	4a1e      	ldr	r2, [pc, #120]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000f70:	2384      	movs	r3, #132	; 0x84
 8000f72:	58d3      	ldr	r3, [r2, r3]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	43da      	mvns	r2, r3
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	029b      	lsls	r3, r3, #10
 8000f88:	4013      	ands	r3, r2
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f94:	4914      	ldr	r1, [pc, #80]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000f96:	2284      	movs	r2, #132	; 0x84
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000f9c:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	58d3      	ldr	r3, [r2, r3]
 8000fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	2380      	movs	r3, #128	; 0x80
 8000fb4:	025b      	lsls	r3, r3, #9
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fc2:	4909      	ldr	r1, [pc, #36]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000fc4:	2280      	movs	r2, #128	; 0x80
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	40da      	lsrs	r2, r3
 8000fd8:	1e13      	subs	r3, r2, #0
 8000fda:	d000      	beq.n	8000fde <HAL_GPIO_Init+0x2ae>
 8000fdc:	e6b0      	b.n	8000d40 <HAL_GPIO_Init+0x10>
  }
}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b006      	add	sp, #24
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40021800 	.word	0x40021800
 8000fec:	50000400 	.word	0x50000400
 8000ff0:	50000800 	.word	0x50000800
 8000ff4:	50000c00 	.word	0x50000c00

08000ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	0008      	movs	r0, r1
 8001002:	0011      	movs	r1, r2
 8001004:	1cbb      	adds	r3, r7, #2
 8001006:	1c02      	adds	r2, r0, #0
 8001008:	801a      	strh	r2, [r3, #0]
 800100a:	1c7b      	adds	r3, r7, #1
 800100c:	1c0a      	adds	r2, r1, #0
 800100e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001010:	1c7b      	adds	r3, r7, #1
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d004      	beq.n	8001022 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001018:	1cbb      	adds	r3, r7, #2
 800101a:	881a      	ldrh	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001020:	e003      	b.n	800102a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001022:	1cbb      	adds	r3, r7, #2
 8001024:	881a      	ldrh	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	629a      	str	r2, [r3, #40]	; 0x28
}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	46bd      	mov	sp, r7
 800102e:	b002      	add	sp, #8
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e082      	b.n	800114c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2241      	movs	r2, #65	; 0x41
 800104a:	5c9b      	ldrb	r3, [r3, r2]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d107      	bne.n	8001062 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2240      	movs	r2, #64	; 0x40
 8001056:	2100      	movs	r1, #0
 8001058:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	0018      	movs	r0, r3
 800105e:	f7ff fb17 	bl	8000690 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2241      	movs	r2, #65	; 0x41
 8001066:	2124      	movs	r1, #36	; 0x24
 8001068:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2101      	movs	r1, #1
 8001076:	438a      	bics	r2, r1
 8001078:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4934      	ldr	r1, [pc, #208]	; (8001154 <HAL_I2C_Init+0x120>)
 8001084:	400a      	ands	r2, r1
 8001086:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4931      	ldr	r1, [pc, #196]	; (8001158 <HAL_I2C_Init+0x124>)
 8001094:	400a      	ands	r2, r1
 8001096:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d108      	bne.n	80010b2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2180      	movs	r1, #128	; 0x80
 80010aa:	0209      	lsls	r1, r1, #8
 80010ac:	430a      	orrs	r2, r1
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	e007      	b.n	80010c2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2184      	movs	r1, #132	; 0x84
 80010bc:	0209      	lsls	r1, r1, #8
 80010be:	430a      	orrs	r2, r1
 80010c0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d104      	bne.n	80010d4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2280      	movs	r2, #128	; 0x80
 80010d0:	0112      	lsls	r2, r2, #4
 80010d2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	491f      	ldr	r1, [pc, #124]	; (800115c <HAL_I2C_Init+0x128>)
 80010e0:	430a      	orrs	r2, r1
 80010e2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68da      	ldr	r2, [r3, #12]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	491a      	ldr	r1, [pc, #104]	; (8001158 <HAL_I2C_Init+0x124>)
 80010f0:	400a      	ands	r2, r1
 80010f2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	691a      	ldr	r2, [r3, #16]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	431a      	orrs	r2, r3
 80010fe:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	430a      	orrs	r2, r1
 800110c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69d9      	ldr	r1, [r3, #28]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a1a      	ldr	r2, [r3, #32]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	430a      	orrs	r2, r1
 800111c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2101      	movs	r1, #1
 800112a:	430a      	orrs	r2, r1
 800112c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2241      	movs	r2, #65	; 0x41
 8001138:	2120      	movs	r1, #32
 800113a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2242      	movs	r2, #66	; 0x42
 8001146:	2100      	movs	r1, #0
 8001148:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800114a:	2300      	movs	r3, #0
}
 800114c:	0018      	movs	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	b002      	add	sp, #8
 8001152:	bd80      	pop	{r7, pc}
 8001154:	f0ffffff 	.word	0xf0ffffff
 8001158:	ffff7fff 	.word	0xffff7fff
 800115c:	02008000 	.word	0x02008000

08001160 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2241      	movs	r2, #65	; 0x41
 800116e:	5c9b      	ldrb	r3, [r3, r2]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b20      	cmp	r3, #32
 8001174:	d138      	bne.n	80011e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2240      	movs	r2, #64	; 0x40
 800117a:	5c9b      	ldrb	r3, [r3, r2]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d101      	bne.n	8001184 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001180:	2302      	movs	r3, #2
 8001182:	e032      	b.n	80011ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2240      	movs	r2, #64	; 0x40
 8001188:	2101      	movs	r1, #1
 800118a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2241      	movs	r2, #65	; 0x41
 8001190:	2124      	movs	r1, #36	; 0x24
 8001192:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2101      	movs	r1, #1
 80011a0:	438a      	bics	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4911      	ldr	r1, [pc, #68]	; (80011f4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80011b0:	400a      	ands	r2, r1
 80011b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6819      	ldr	r1, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	430a      	orrs	r2, r1
 80011c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2101      	movs	r1, #1
 80011d0:	430a      	orrs	r2, r1
 80011d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2241      	movs	r2, #65	; 0x41
 80011d8:	2120      	movs	r1, #32
 80011da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2240      	movs	r2, #64	; 0x40
 80011e0:	2100      	movs	r1, #0
 80011e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	e000      	b.n	80011ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80011e8:	2302      	movs	r3, #2
  }
}
 80011ea:	0018      	movs	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b002      	add	sp, #8
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	ffffefff 	.word	0xffffefff

080011f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2241      	movs	r2, #65	; 0x41
 8001206:	5c9b      	ldrb	r3, [r3, r2]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b20      	cmp	r3, #32
 800120c:	d139      	bne.n	8001282 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2240      	movs	r2, #64	; 0x40
 8001212:	5c9b      	ldrb	r3, [r3, r2]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d101      	bne.n	800121c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001218:	2302      	movs	r3, #2
 800121a:	e033      	b.n	8001284 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2240      	movs	r2, #64	; 0x40
 8001220:	2101      	movs	r1, #1
 8001222:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2241      	movs	r2, #65	; 0x41
 8001228:	2124      	movs	r1, #36	; 0x24
 800122a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2101      	movs	r1, #1
 8001238:	438a      	bics	r2, r1
 800123a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4a11      	ldr	r2, [pc, #68]	; (800128c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001248:	4013      	ands	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	021b      	lsls	r3, r3, #8
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	4313      	orrs	r3, r2
 8001254:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2101      	movs	r1, #1
 800126a:	430a      	orrs	r2, r1
 800126c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2241      	movs	r2, #65	; 0x41
 8001272:	2120      	movs	r1, #32
 8001274:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2240      	movs	r2, #64	; 0x40
 800127a:	2100      	movs	r1, #0
 800127c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	e000      	b.n	8001284 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001282:	2302      	movs	r3, #2
  }
}
 8001284:	0018      	movs	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	b004      	add	sp, #16
 800128a:	bd80      	pop	{r7, pc}
 800128c:	fffff0ff 	.word	0xfffff0ff

08001290 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001298:	4b19      	ldr	r3, [pc, #100]	; (8001300 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a19      	ldr	r2, [pc, #100]	; (8001304 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800129e:	4013      	ands	r3, r2
 80012a0:	0019      	movs	r1, r3
 80012a2:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	430a      	orrs	r2, r1
 80012a8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d11f      	bne.n	80012f4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	0013      	movs	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	189b      	adds	r3, r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4912      	ldr	r1, [pc, #72]	; (800130c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80012c2:	0018      	movs	r0, r3
 80012c4:	f7fe ff1c 	bl	8000100 <__udivsi3>
 80012c8:	0003      	movs	r3, r0
 80012ca:	3301      	adds	r3, #1
 80012cc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012ce:	e008      	b.n	80012e2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	3b01      	subs	r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	e001      	b.n	80012e2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e009      	b.n	80012f6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012e4:	695a      	ldr	r2, [r3, #20]
 80012e6:	2380      	movs	r3, #128	; 0x80
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	401a      	ands	r2, r3
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d0ed      	beq.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	0018      	movs	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	b004      	add	sp, #16
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	40007000 	.word	0x40007000
 8001304:	fffff9ff 	.word	0xfffff9ff
 8001308:	20000000 	.word	0x20000000
 800130c:	000f4240 	.word	0x000f4240

08001310 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	23e0      	movs	r3, #224	; 0xe0
 800131a:	01db      	lsls	r3, r3, #7
 800131c:	4013      	ands	r3, r2
}
 800131e:	0018      	movs	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40021000 	.word	0x40021000

08001328 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e2f3      	b.n	8001922 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2201      	movs	r2, #1
 8001340:	4013      	ands	r3, r2
 8001342:	d100      	bne.n	8001346 <HAL_RCC_OscConfig+0x1e>
 8001344:	e07c      	b.n	8001440 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001346:	4bc3      	ldr	r3, [pc, #780]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2238      	movs	r2, #56	; 0x38
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001350:	4bc0      	ldr	r3, [pc, #768]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	2203      	movs	r2, #3
 8001356:	4013      	ands	r3, r2
 8001358:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	2b10      	cmp	r3, #16
 800135e:	d102      	bne.n	8001366 <HAL_RCC_OscConfig+0x3e>
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	2b03      	cmp	r3, #3
 8001364:	d002      	beq.n	800136c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	2b08      	cmp	r3, #8
 800136a:	d10b      	bne.n	8001384 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136c:	4bb9      	ldr	r3, [pc, #740]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	029b      	lsls	r3, r3, #10
 8001374:	4013      	ands	r3, r2
 8001376:	d062      	beq.n	800143e <HAL_RCC_OscConfig+0x116>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d15e      	bne.n	800143e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e2ce      	b.n	8001922 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	025b      	lsls	r3, r3, #9
 800138c:	429a      	cmp	r2, r3
 800138e:	d107      	bne.n	80013a0 <HAL_RCC_OscConfig+0x78>
 8001390:	4bb0      	ldr	r3, [pc, #704]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4baf      	ldr	r3, [pc, #700]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001396:	2180      	movs	r1, #128	; 0x80
 8001398:	0249      	lsls	r1, r1, #9
 800139a:	430a      	orrs	r2, r1
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	e020      	b.n	80013e2 <HAL_RCC_OscConfig+0xba>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	23a0      	movs	r3, #160	; 0xa0
 80013a6:	02db      	lsls	r3, r3, #11
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d10e      	bne.n	80013ca <HAL_RCC_OscConfig+0xa2>
 80013ac:	4ba9      	ldr	r3, [pc, #676]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4ba8      	ldr	r3, [pc, #672]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013b2:	2180      	movs	r1, #128	; 0x80
 80013b4:	02c9      	lsls	r1, r1, #11
 80013b6:	430a      	orrs	r2, r1
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	4ba6      	ldr	r3, [pc, #664]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4ba5      	ldr	r3, [pc, #660]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013c0:	2180      	movs	r1, #128	; 0x80
 80013c2:	0249      	lsls	r1, r1, #9
 80013c4:	430a      	orrs	r2, r1
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	e00b      	b.n	80013e2 <HAL_RCC_OscConfig+0xba>
 80013ca:	4ba2      	ldr	r3, [pc, #648]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4ba1      	ldr	r3, [pc, #644]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013d0:	49a1      	ldr	r1, [pc, #644]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 80013d2:	400a      	ands	r2, r1
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	4b9f      	ldr	r3, [pc, #636]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	4b9e      	ldr	r3, [pc, #632]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013dc:	499f      	ldr	r1, [pc, #636]	; (800165c <HAL_RCC_OscConfig+0x334>)
 80013de:	400a      	ands	r2, r1
 80013e0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d014      	beq.n	8001414 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ea:	f7ff faed 	bl	80009c8 <HAL_GetTick>
 80013ee:	0003      	movs	r3, r0
 80013f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f4:	f7ff fae8 	bl	80009c8 <HAL_GetTick>
 80013f8:	0002      	movs	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b64      	cmp	r3, #100	; 0x64
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e28d      	b.n	8001922 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001406:	4b93      	ldr	r3, [pc, #588]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	029b      	lsls	r3, r3, #10
 800140e:	4013      	ands	r3, r2
 8001410:	d0f0      	beq.n	80013f4 <HAL_RCC_OscConfig+0xcc>
 8001412:	e015      	b.n	8001440 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001414:	f7ff fad8 	bl	80009c8 <HAL_GetTick>
 8001418:	0003      	movs	r3, r0
 800141a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800141e:	f7ff fad3 	bl	80009c8 <HAL_GetTick>
 8001422:	0002      	movs	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b64      	cmp	r3, #100	; 0x64
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e278      	b.n	8001922 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001430:	4b88      	ldr	r3, [pc, #544]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	029b      	lsls	r3, r3, #10
 8001438:	4013      	ands	r3, r2
 800143a:	d1f0      	bne.n	800141e <HAL_RCC_OscConfig+0xf6>
 800143c:	e000      	b.n	8001440 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2202      	movs	r2, #2
 8001446:	4013      	ands	r3, r2
 8001448:	d100      	bne.n	800144c <HAL_RCC_OscConfig+0x124>
 800144a:	e099      	b.n	8001580 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800144c:	4b81      	ldr	r3, [pc, #516]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	2238      	movs	r2, #56	; 0x38
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001456:	4b7f      	ldr	r3, [pc, #508]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	2203      	movs	r2, #3
 800145c:	4013      	ands	r3, r2
 800145e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	2b10      	cmp	r3, #16
 8001464:	d102      	bne.n	800146c <HAL_RCC_OscConfig+0x144>
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d002      	beq.n	8001472 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d135      	bne.n	80014de <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001472:	4b78      	ldr	r3, [pc, #480]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	4013      	ands	r3, r2
 800147c:	d005      	beq.n	800148a <HAL_RCC_OscConfig+0x162>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e24b      	b.n	8001922 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148a:	4b72      	ldr	r3, [pc, #456]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	4a74      	ldr	r2, [pc, #464]	; (8001660 <HAL_RCC_OscConfig+0x338>)
 8001490:	4013      	ands	r3, r2
 8001492:	0019      	movs	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	021a      	lsls	r2, r3, #8
 800149a:	4b6e      	ldr	r3, [pc, #440]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800149c:	430a      	orrs	r2, r1
 800149e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d112      	bne.n	80014cc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014a6:	4b6b      	ldr	r3, [pc, #428]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a6e      	ldr	r2, [pc, #440]	; (8001664 <HAL_RCC_OscConfig+0x33c>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	0019      	movs	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	4b67      	ldr	r3, [pc, #412]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80014b6:	430a      	orrs	r2, r1
 80014b8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80014ba:	4b66      	ldr	r3, [pc, #408]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	0adb      	lsrs	r3, r3, #11
 80014c0:	2207      	movs	r2, #7
 80014c2:	4013      	ands	r3, r2
 80014c4:	4a68      	ldr	r2, [pc, #416]	; (8001668 <HAL_RCC_OscConfig+0x340>)
 80014c6:	40da      	lsrs	r2, r3
 80014c8:	4b68      	ldr	r3, [pc, #416]	; (800166c <HAL_RCC_OscConfig+0x344>)
 80014ca:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014cc:	4b68      	ldr	r3, [pc, #416]	; (8001670 <HAL_RCC_OscConfig+0x348>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	0018      	movs	r0, r3
 80014d2:	f7ff fa1d 	bl	8000910 <HAL_InitTick>
 80014d6:	1e03      	subs	r3, r0, #0
 80014d8:	d051      	beq.n	800157e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e221      	b.n	8001922 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d030      	beq.n	8001548 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014e6:	4b5b      	ldr	r3, [pc, #364]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a5e      	ldr	r2, [pc, #376]	; (8001664 <HAL_RCC_OscConfig+0x33c>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	0019      	movs	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691a      	ldr	r2, [r3, #16]
 80014f4:	4b57      	ldr	r3, [pc, #348]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80014fa:	4b56      	ldr	r3, [pc, #344]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4b55      	ldr	r3, [pc, #340]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001500:	2180      	movs	r1, #128	; 0x80
 8001502:	0049      	lsls	r1, r1, #1
 8001504:	430a      	orrs	r2, r1
 8001506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001508:	f7ff fa5e 	bl	80009c8 <HAL_GetTick>
 800150c:	0003      	movs	r3, r0
 800150e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001512:	f7ff fa59 	bl	80009c8 <HAL_GetTick>
 8001516:	0002      	movs	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e1fe      	b.n	8001922 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001524:	4b4b      	ldr	r3, [pc, #300]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	2380      	movs	r3, #128	; 0x80
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	4013      	ands	r3, r2
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001530:	4b48      	ldr	r3, [pc, #288]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	4a4a      	ldr	r2, [pc, #296]	; (8001660 <HAL_RCC_OscConfig+0x338>)
 8001536:	4013      	ands	r3, r2
 8001538:	0019      	movs	r1, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	021a      	lsls	r2, r3, #8
 8001540:	4b44      	ldr	r3, [pc, #272]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001542:	430a      	orrs	r2, r1
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	e01b      	b.n	8001580 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001548:	4b42      	ldr	r3, [pc, #264]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b41      	ldr	r3, [pc, #260]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800154e:	4949      	ldr	r1, [pc, #292]	; (8001674 <HAL_RCC_OscConfig+0x34c>)
 8001550:	400a      	ands	r2, r1
 8001552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff fa38 	bl	80009c8 <HAL_GetTick>
 8001558:	0003      	movs	r3, r0
 800155a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800155e:	f7ff fa33 	bl	80009c8 <HAL_GetTick>
 8001562:	0002      	movs	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e1d8      	b.n	8001922 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001570:	4b38      	ldr	r3, [pc, #224]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	2380      	movs	r3, #128	; 0x80
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	4013      	ands	r3, r2
 800157a:	d1f0      	bne.n	800155e <HAL_RCC_OscConfig+0x236>
 800157c:	e000      	b.n	8001580 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800157e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2208      	movs	r2, #8
 8001586:	4013      	ands	r3, r2
 8001588:	d047      	beq.n	800161a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800158a:	4b32      	ldr	r3, [pc, #200]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2238      	movs	r2, #56	; 0x38
 8001590:	4013      	ands	r3, r2
 8001592:	2b18      	cmp	r3, #24
 8001594:	d10a      	bne.n	80015ac <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001596:	4b2f      	ldr	r3, [pc, #188]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159a:	2202      	movs	r2, #2
 800159c:	4013      	ands	r3, r2
 800159e:	d03c      	beq.n	800161a <HAL_RCC_OscConfig+0x2f2>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d138      	bne.n	800161a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e1ba      	b.n	8001922 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d019      	beq.n	80015e8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80015b4:	4b27      	ldr	r3, [pc, #156]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80015b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015b8:	4b26      	ldr	r3, [pc, #152]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80015ba:	2101      	movs	r1, #1
 80015bc:	430a      	orrs	r2, r1
 80015be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c0:	f7ff fa02 	bl	80009c8 <HAL_GetTick>
 80015c4:	0003      	movs	r3, r0
 80015c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ca:	f7ff f9fd 	bl	80009c8 <HAL_GetTick>
 80015ce:	0002      	movs	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e1a2      	b.n	8001922 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015dc:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80015de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e0:	2202      	movs	r2, #2
 80015e2:	4013      	ands	r3, r2
 80015e4:	d0f1      	beq.n	80015ca <HAL_RCC_OscConfig+0x2a2>
 80015e6:	e018      	b.n	800161a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80015e8:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80015ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80015ee:	2101      	movs	r1, #1
 80015f0:	438a      	bics	r2, r1
 80015f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f4:	f7ff f9e8 	bl	80009c8 <HAL_GetTick>
 80015f8:	0003      	movs	r3, r0
 80015fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015fe:	f7ff f9e3 	bl	80009c8 <HAL_GetTick>
 8001602:	0002      	movs	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e188      	b.n	8001922 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001610:	4b10      	ldr	r3, [pc, #64]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001614:	2202      	movs	r2, #2
 8001616:	4013      	ands	r3, r2
 8001618:	d1f1      	bne.n	80015fe <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2204      	movs	r2, #4
 8001620:	4013      	ands	r3, r2
 8001622:	d100      	bne.n	8001626 <HAL_RCC_OscConfig+0x2fe>
 8001624:	e0c6      	b.n	80017b4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001626:	231f      	movs	r3, #31
 8001628:	18fb      	adds	r3, r7, r3
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2238      	movs	r2, #56	; 0x38
 8001634:	4013      	ands	r3, r2
 8001636:	2b20      	cmp	r3, #32
 8001638:	d11e      	bne.n	8001678 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800163c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163e:	2202      	movs	r2, #2
 8001640:	4013      	ands	r3, r2
 8001642:	d100      	bne.n	8001646 <HAL_RCC_OscConfig+0x31e>
 8001644:	e0b6      	b.n	80017b4 <HAL_RCC_OscConfig+0x48c>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d000      	beq.n	8001650 <HAL_RCC_OscConfig+0x328>
 800164e:	e0b1      	b.n	80017b4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e166      	b.n	8001922 <HAL_RCC_OscConfig+0x5fa>
 8001654:	40021000 	.word	0x40021000
 8001658:	fffeffff 	.word	0xfffeffff
 800165c:	fffbffff 	.word	0xfffbffff
 8001660:	ffff80ff 	.word	0xffff80ff
 8001664:	ffffc7ff 	.word	0xffffc7ff
 8001668:	00f42400 	.word	0x00f42400
 800166c:	20000000 	.word	0x20000000
 8001670:	20000004 	.word	0x20000004
 8001674:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001678:	4bac      	ldr	r3, [pc, #688]	; (800192c <HAL_RCC_OscConfig+0x604>)
 800167a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	055b      	lsls	r3, r3, #21
 8001680:	4013      	ands	r3, r2
 8001682:	d101      	bne.n	8001688 <HAL_RCC_OscConfig+0x360>
 8001684:	2301      	movs	r3, #1
 8001686:	e000      	b.n	800168a <HAL_RCC_OscConfig+0x362>
 8001688:	2300      	movs	r3, #0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d011      	beq.n	80016b2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	4ba7      	ldr	r3, [pc, #668]	; (800192c <HAL_RCC_OscConfig+0x604>)
 8001690:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001692:	4ba6      	ldr	r3, [pc, #664]	; (800192c <HAL_RCC_OscConfig+0x604>)
 8001694:	2180      	movs	r1, #128	; 0x80
 8001696:	0549      	lsls	r1, r1, #21
 8001698:	430a      	orrs	r2, r1
 800169a:	63da      	str	r2, [r3, #60]	; 0x3c
 800169c:	4ba3      	ldr	r3, [pc, #652]	; (800192c <HAL_RCC_OscConfig+0x604>)
 800169e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	055b      	lsls	r3, r3, #21
 80016a4:	4013      	ands	r3, r2
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80016aa:	231f      	movs	r3, #31
 80016ac:	18fb      	adds	r3, r7, r3
 80016ae:	2201      	movs	r2, #1
 80016b0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b2:	4b9f      	ldr	r3, [pc, #636]	; (8001930 <HAL_RCC_OscConfig+0x608>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	2380      	movs	r3, #128	; 0x80
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4013      	ands	r3, r2
 80016bc:	d11a      	bne.n	80016f4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016be:	4b9c      	ldr	r3, [pc, #624]	; (8001930 <HAL_RCC_OscConfig+0x608>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	4b9b      	ldr	r3, [pc, #620]	; (8001930 <HAL_RCC_OscConfig+0x608>)
 80016c4:	2180      	movs	r1, #128	; 0x80
 80016c6:	0049      	lsls	r1, r1, #1
 80016c8:	430a      	orrs	r2, r1
 80016ca:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80016cc:	f7ff f97c 	bl	80009c8 <HAL_GetTick>
 80016d0:	0003      	movs	r3, r0
 80016d2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d6:	f7ff f977 	bl	80009c8 <HAL_GetTick>
 80016da:	0002      	movs	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e11c      	b.n	8001922 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e8:	4b91      	ldr	r3, [pc, #580]	; (8001930 <HAL_RCC_OscConfig+0x608>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	2380      	movs	r3, #128	; 0x80
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4013      	ands	r3, r2
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d106      	bne.n	800170a <HAL_RCC_OscConfig+0x3e2>
 80016fc:	4b8b      	ldr	r3, [pc, #556]	; (800192c <HAL_RCC_OscConfig+0x604>)
 80016fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001700:	4b8a      	ldr	r3, [pc, #552]	; (800192c <HAL_RCC_OscConfig+0x604>)
 8001702:	2101      	movs	r1, #1
 8001704:	430a      	orrs	r2, r1
 8001706:	65da      	str	r2, [r3, #92]	; 0x5c
 8001708:	e01c      	b.n	8001744 <HAL_RCC_OscConfig+0x41c>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b05      	cmp	r3, #5
 8001710:	d10c      	bne.n	800172c <HAL_RCC_OscConfig+0x404>
 8001712:	4b86      	ldr	r3, [pc, #536]	; (800192c <HAL_RCC_OscConfig+0x604>)
 8001714:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001716:	4b85      	ldr	r3, [pc, #532]	; (800192c <HAL_RCC_OscConfig+0x604>)
 8001718:	2104      	movs	r1, #4
 800171a:	430a      	orrs	r2, r1
 800171c:	65da      	str	r2, [r3, #92]	; 0x5c
 800171e:	4b83      	ldr	r3, [pc, #524]	; (800192c <HAL_RCC_OscConfig+0x604>)
 8001720:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001722:	4b82      	ldr	r3, [pc, #520]	; (800192c <HAL_RCC_OscConfig+0x604>)
 8001724:	2101      	movs	r1, #1
 8001726:	430a      	orrs	r2, r1
 8001728:	65da      	str	r2, [r3, #92]	; 0x5c
 800172a:	e00b      	b.n	8001744 <HAL_RCC_OscConfig+0x41c>
 800172c:	4b7f      	ldr	r3, [pc, #508]	; (800192c <HAL_RCC_OscConfig+0x604>)
 800172e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001730:	4b7e      	ldr	r3, [pc, #504]	; (800192c <HAL_RCC_OscConfig+0x604>)
 8001732:	2101      	movs	r1, #1
 8001734:	438a      	bics	r2, r1
 8001736:	65da      	str	r2, [r3, #92]	; 0x5c
 8001738:	4b7c      	ldr	r3, [pc, #496]	; (800192c <HAL_RCC_OscConfig+0x604>)
 800173a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800173c:	4b7b      	ldr	r3, [pc, #492]	; (800192c <HAL_RCC_OscConfig+0x604>)
 800173e:	2104      	movs	r1, #4
 8001740:	438a      	bics	r2, r1
 8001742:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d014      	beq.n	8001776 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff f93c 	bl	80009c8 <HAL_GetTick>
 8001750:	0003      	movs	r3, r0
 8001752:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001754:	e009      	b.n	800176a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001756:	f7ff f937 	bl	80009c8 <HAL_GetTick>
 800175a:	0002      	movs	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	4a74      	ldr	r2, [pc, #464]	; (8001934 <HAL_RCC_OscConfig+0x60c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e0db      	b.n	8001922 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800176a:	4b70      	ldr	r3, [pc, #448]	; (800192c <HAL_RCC_OscConfig+0x604>)
 800176c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176e:	2202      	movs	r2, #2
 8001770:	4013      	ands	r3, r2
 8001772:	d0f0      	beq.n	8001756 <HAL_RCC_OscConfig+0x42e>
 8001774:	e013      	b.n	800179e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001776:	f7ff f927 	bl	80009c8 <HAL_GetTick>
 800177a:	0003      	movs	r3, r0
 800177c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800177e:	e009      	b.n	8001794 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001780:	f7ff f922 	bl	80009c8 <HAL_GetTick>
 8001784:	0002      	movs	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	4a6a      	ldr	r2, [pc, #424]	; (8001934 <HAL_RCC_OscConfig+0x60c>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e0c6      	b.n	8001922 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001794:	4b65      	ldr	r3, [pc, #404]	; (800192c <HAL_RCC_OscConfig+0x604>)
 8001796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001798:	2202      	movs	r2, #2
 800179a:	4013      	ands	r3, r2
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800179e:	231f      	movs	r3, #31
 80017a0:	18fb      	adds	r3, r7, r3
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d105      	bne.n	80017b4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80017a8:	4b60      	ldr	r3, [pc, #384]	; (800192c <HAL_RCC_OscConfig+0x604>)
 80017aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017ac:	4b5f      	ldr	r3, [pc, #380]	; (800192c <HAL_RCC_OscConfig+0x604>)
 80017ae:	4962      	ldr	r1, [pc, #392]	; (8001938 <HAL_RCC_OscConfig+0x610>)
 80017b0:	400a      	ands	r2, r1
 80017b2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d100      	bne.n	80017be <HAL_RCC_OscConfig+0x496>
 80017bc:	e0b0      	b.n	8001920 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017be:	4b5b      	ldr	r3, [pc, #364]	; (800192c <HAL_RCC_OscConfig+0x604>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	2238      	movs	r2, #56	; 0x38
 80017c4:	4013      	ands	r3, r2
 80017c6:	2b10      	cmp	r3, #16
 80017c8:	d100      	bne.n	80017cc <HAL_RCC_OscConfig+0x4a4>
 80017ca:	e078      	b.n	80018be <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69db      	ldr	r3, [r3, #28]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d153      	bne.n	800187c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d4:	4b55      	ldr	r3, [pc, #340]	; (800192c <HAL_RCC_OscConfig+0x604>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b54      	ldr	r3, [pc, #336]	; (800192c <HAL_RCC_OscConfig+0x604>)
 80017da:	4958      	ldr	r1, [pc, #352]	; (800193c <HAL_RCC_OscConfig+0x614>)
 80017dc:	400a      	ands	r2, r1
 80017de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff f8f2 	bl	80009c8 <HAL_GetTick>
 80017e4:	0003      	movs	r3, r0
 80017e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ea:	f7ff f8ed 	bl	80009c8 <HAL_GetTick>
 80017ee:	0002      	movs	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e092      	b.n	8001922 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017fc:	4b4b      	ldr	r3, [pc, #300]	; (800192c <HAL_RCC_OscConfig+0x604>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	049b      	lsls	r3, r3, #18
 8001804:	4013      	ands	r3, r2
 8001806:	d1f0      	bne.n	80017ea <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001808:	4b48      	ldr	r3, [pc, #288]	; (800192c <HAL_RCC_OscConfig+0x604>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	4a4c      	ldr	r2, [pc, #304]	; (8001940 <HAL_RCC_OscConfig+0x618>)
 800180e:	4013      	ands	r3, r2
 8001810:	0019      	movs	r1, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1a      	ldr	r2, [r3, #32]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001820:	021b      	lsls	r3, r3, #8
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001828:	431a      	orrs	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	431a      	orrs	r2, r3
 8001830:	4b3e      	ldr	r3, [pc, #248]	; (800192c <HAL_RCC_OscConfig+0x604>)
 8001832:	430a      	orrs	r2, r1
 8001834:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001836:	4b3d      	ldr	r3, [pc, #244]	; (800192c <HAL_RCC_OscConfig+0x604>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	4b3c      	ldr	r3, [pc, #240]	; (800192c <HAL_RCC_OscConfig+0x604>)
 800183c:	2180      	movs	r1, #128	; 0x80
 800183e:	0449      	lsls	r1, r1, #17
 8001840:	430a      	orrs	r2, r1
 8001842:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001844:	4b39      	ldr	r3, [pc, #228]	; (800192c <HAL_RCC_OscConfig+0x604>)
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	4b38      	ldr	r3, [pc, #224]	; (800192c <HAL_RCC_OscConfig+0x604>)
 800184a:	2180      	movs	r1, #128	; 0x80
 800184c:	0549      	lsls	r1, r1, #21
 800184e:	430a      	orrs	r2, r1
 8001850:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001852:	f7ff f8b9 	bl	80009c8 <HAL_GetTick>
 8001856:	0003      	movs	r3, r0
 8001858:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185c:	f7ff f8b4 	bl	80009c8 <HAL_GetTick>
 8001860:	0002      	movs	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e059      	b.n	8001922 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186e:	4b2f      	ldr	r3, [pc, #188]	; (800192c <HAL_RCC_OscConfig+0x604>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	049b      	lsls	r3, r3, #18
 8001876:	4013      	ands	r3, r2
 8001878:	d0f0      	beq.n	800185c <HAL_RCC_OscConfig+0x534>
 800187a:	e051      	b.n	8001920 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187c:	4b2b      	ldr	r3, [pc, #172]	; (800192c <HAL_RCC_OscConfig+0x604>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b2a      	ldr	r3, [pc, #168]	; (800192c <HAL_RCC_OscConfig+0x604>)
 8001882:	492e      	ldr	r1, [pc, #184]	; (800193c <HAL_RCC_OscConfig+0x614>)
 8001884:	400a      	ands	r2, r1
 8001886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001888:	f7ff f89e 	bl	80009c8 <HAL_GetTick>
 800188c:	0003      	movs	r3, r0
 800188e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001892:	f7ff f899 	bl	80009c8 <HAL_GetTick>
 8001896:	0002      	movs	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e03e      	b.n	8001922 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a4:	4b21      	ldr	r3, [pc, #132]	; (800192c <HAL_RCC_OscConfig+0x604>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	2380      	movs	r3, #128	; 0x80
 80018aa:	049b      	lsls	r3, r3, #18
 80018ac:	4013      	ands	r3, r2
 80018ae:	d1f0      	bne.n	8001892 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80018b0:	4b1e      	ldr	r3, [pc, #120]	; (800192c <HAL_RCC_OscConfig+0x604>)
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	4b1d      	ldr	r3, [pc, #116]	; (800192c <HAL_RCC_OscConfig+0x604>)
 80018b6:	4923      	ldr	r1, [pc, #140]	; (8001944 <HAL_RCC_OscConfig+0x61c>)
 80018b8:	400a      	ands	r2, r1
 80018ba:	60da      	str	r2, [r3, #12]
 80018bc:	e030      	b.n	8001920 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d101      	bne.n	80018ca <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e02b      	b.n	8001922 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80018ca:	4b18      	ldr	r3, [pc, #96]	; (800192c <HAL_RCC_OscConfig+0x604>)
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	2203      	movs	r2, #3
 80018d4:	401a      	ands	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d11e      	bne.n	800191c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	2270      	movs	r2, #112	; 0x70
 80018e2:	401a      	ands	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d117      	bne.n	800191c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	23fe      	movs	r3, #254	; 0xfe
 80018f0:	01db      	lsls	r3, r3, #7
 80018f2:	401a      	ands	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d10e      	bne.n	800191c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	23f8      	movs	r3, #248	; 0xf8
 8001902:	039b      	lsls	r3, r3, #14
 8001904:	401a      	ands	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800190a:	429a      	cmp	r2, r3
 800190c:	d106      	bne.n	800191c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	0f5b      	lsrs	r3, r3, #29
 8001912:	075a      	lsls	r2, r3, #29
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001918:	429a      	cmp	r2, r3
 800191a:	d001      	beq.n	8001920 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	0018      	movs	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	b008      	add	sp, #32
 8001928:	bd80      	pop	{r7, pc}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	40021000 	.word	0x40021000
 8001930:	40007000 	.word	0x40007000
 8001934:	00001388 	.word	0x00001388
 8001938:	efffffff 	.word	0xefffffff
 800193c:	feffffff 	.word	0xfeffffff
 8001940:	1fc1808c 	.word	0x1fc1808c
 8001944:	effefffc 	.word	0xeffefffc

08001948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0e9      	b.n	8001b30 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800195c:	4b76      	ldr	r3, [pc, #472]	; (8001b38 <HAL_RCC_ClockConfig+0x1f0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2207      	movs	r2, #7
 8001962:	4013      	ands	r3, r2
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d91e      	bls.n	80019a8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196a:	4b73      	ldr	r3, [pc, #460]	; (8001b38 <HAL_RCC_ClockConfig+0x1f0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2207      	movs	r2, #7
 8001970:	4393      	bics	r3, r2
 8001972:	0019      	movs	r1, r3
 8001974:	4b70      	ldr	r3, [pc, #448]	; (8001b38 <HAL_RCC_ClockConfig+0x1f0>)
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800197c:	f7ff f824 	bl	80009c8 <HAL_GetTick>
 8001980:	0003      	movs	r3, r0
 8001982:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001984:	e009      	b.n	800199a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001986:	f7ff f81f 	bl	80009c8 <HAL_GetTick>
 800198a:	0002      	movs	r2, r0
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	4a6a      	ldr	r2, [pc, #424]	; (8001b3c <HAL_RCC_ClockConfig+0x1f4>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d901      	bls.n	800199a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e0ca      	b.n	8001b30 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800199a:	4b67      	ldr	r3, [pc, #412]	; (8001b38 <HAL_RCC_ClockConfig+0x1f0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2207      	movs	r2, #7
 80019a0:	4013      	ands	r3, r2
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d1ee      	bne.n	8001986 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2202      	movs	r2, #2
 80019ae:	4013      	ands	r3, r2
 80019b0:	d015      	beq.n	80019de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2204      	movs	r2, #4
 80019b8:	4013      	ands	r3, r2
 80019ba:	d006      	beq.n	80019ca <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019bc:	4b60      	ldr	r3, [pc, #384]	; (8001b40 <HAL_RCC_ClockConfig+0x1f8>)
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	4b5f      	ldr	r3, [pc, #380]	; (8001b40 <HAL_RCC_ClockConfig+0x1f8>)
 80019c2:	21e0      	movs	r1, #224	; 0xe0
 80019c4:	01c9      	lsls	r1, r1, #7
 80019c6:	430a      	orrs	r2, r1
 80019c8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ca:	4b5d      	ldr	r3, [pc, #372]	; (8001b40 <HAL_RCC_ClockConfig+0x1f8>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	4a5d      	ldr	r2, [pc, #372]	; (8001b44 <HAL_RCC_ClockConfig+0x1fc>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	0019      	movs	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	4b59      	ldr	r3, [pc, #356]	; (8001b40 <HAL_RCC_ClockConfig+0x1f8>)
 80019da:	430a      	orrs	r2, r1
 80019dc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2201      	movs	r2, #1
 80019e4:	4013      	ands	r3, r2
 80019e6:	d057      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d107      	bne.n	8001a00 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f0:	4b53      	ldr	r3, [pc, #332]	; (8001b40 <HAL_RCC_ClockConfig+0x1f8>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	029b      	lsls	r3, r3, #10
 80019f8:	4013      	ands	r3, r2
 80019fa:	d12b      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e097      	b.n	8001b30 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d107      	bne.n	8001a18 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a08:	4b4d      	ldr	r3, [pc, #308]	; (8001b40 <HAL_RCC_ClockConfig+0x1f8>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	049b      	lsls	r3, r3, #18
 8001a10:	4013      	ands	r3, r2
 8001a12:	d11f      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e08b      	b.n	8001b30 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d107      	bne.n	8001a30 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a20:	4b47      	ldr	r3, [pc, #284]	; (8001b40 <HAL_RCC_ClockConfig+0x1f8>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d113      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e07f      	b.n	8001b30 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d106      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a38:	4b41      	ldr	r3, [pc, #260]	; (8001b40 <HAL_RCC_ClockConfig+0x1f8>)
 8001a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d108      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e074      	b.n	8001b30 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a46:	4b3e      	ldr	r3, [pc, #248]	; (8001b40 <HAL_RCC_ClockConfig+0x1f8>)
 8001a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e06d      	b.n	8001b30 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a54:	4b3a      	ldr	r3, [pc, #232]	; (8001b40 <HAL_RCC_ClockConfig+0x1f8>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2207      	movs	r2, #7
 8001a5a:	4393      	bics	r3, r2
 8001a5c:	0019      	movs	r1, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	4b37      	ldr	r3, [pc, #220]	; (8001b40 <HAL_RCC_ClockConfig+0x1f8>)
 8001a64:	430a      	orrs	r2, r1
 8001a66:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a68:	f7fe ffae 	bl	80009c8 <HAL_GetTick>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a70:	e009      	b.n	8001a86 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a72:	f7fe ffa9 	bl	80009c8 <HAL_GetTick>
 8001a76:	0002      	movs	r2, r0
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	4a2f      	ldr	r2, [pc, #188]	; (8001b3c <HAL_RCC_ClockConfig+0x1f4>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e054      	b.n	8001b30 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a86:	4b2e      	ldr	r3, [pc, #184]	; (8001b40 <HAL_RCC_ClockConfig+0x1f8>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2238      	movs	r2, #56	; 0x38
 8001a8c:	401a      	ands	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d1ec      	bne.n	8001a72 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a98:	4b27      	ldr	r3, [pc, #156]	; (8001b38 <HAL_RCC_ClockConfig+0x1f0>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d21e      	bcs.n	8001ae4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa6:	4b24      	ldr	r3, [pc, #144]	; (8001b38 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2207      	movs	r2, #7
 8001aac:	4393      	bics	r3, r2
 8001aae:	0019      	movs	r1, r3
 8001ab0:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ab8:	f7fe ff86 	bl	80009c8 <HAL_GetTick>
 8001abc:	0003      	movs	r3, r0
 8001abe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ac0:	e009      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac2:	f7fe ff81 	bl	80009c8 <HAL_GetTick>
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	4a1b      	ldr	r2, [pc, #108]	; (8001b3c <HAL_RCC_ClockConfig+0x1f4>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e02c      	b.n	8001b30 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ad6:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2207      	movs	r2, #7
 8001adc:	4013      	ands	r3, r2
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d1ee      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2204      	movs	r2, #4
 8001aea:	4013      	ands	r3, r2
 8001aec:	d009      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001aee:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <HAL_RCC_ClockConfig+0x1f8>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	4a15      	ldr	r2, [pc, #84]	; (8001b48 <HAL_RCC_ClockConfig+0x200>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	0019      	movs	r1, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <HAL_RCC_ClockConfig+0x1f8>)
 8001afe:	430a      	orrs	r2, r1
 8001b00:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b02:	f000 f829 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 8001b06:	0001      	movs	r1, r0
 8001b08:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <HAL_RCC_ClockConfig+0x1f8>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	220f      	movs	r2, #15
 8001b10:	401a      	ands	r2, r3
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <HAL_RCC_ClockConfig+0x204>)
 8001b14:	0092      	lsls	r2, r2, #2
 8001b16:	58d3      	ldr	r3, [r2, r3]
 8001b18:	221f      	movs	r2, #31
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	000a      	movs	r2, r1
 8001b1e:	40da      	lsrs	r2, r3
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_RCC_ClockConfig+0x208>)
 8001b22:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_RCC_ClockConfig+0x20c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f7fe fef1 	bl	8000910 <HAL_InitTick>
 8001b2e:	0003      	movs	r3, r0
}
 8001b30:	0018      	movs	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b004      	add	sp, #16
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40022000 	.word	0x40022000
 8001b3c:	00001388 	.word	0x00001388
 8001b40:	40021000 	.word	0x40021000
 8001b44:	fffff0ff 	.word	0xfffff0ff
 8001b48:	ffff8fff 	.word	0xffff8fff
 8001b4c:	08003138 	.word	0x08003138
 8001b50:	20000000 	.word	0x20000000
 8001b54:	20000004 	.word	0x20000004

08001b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b5e:	4b3c      	ldr	r3, [pc, #240]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2238      	movs	r2, #56	; 0x38
 8001b64:	4013      	ands	r3, r2
 8001b66:	d10f      	bne.n	8001b88 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b68:	4b39      	ldr	r3, [pc, #228]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	0adb      	lsrs	r3, r3, #11
 8001b6e:	2207      	movs	r2, #7
 8001b70:	4013      	ands	r3, r2
 8001b72:	2201      	movs	r2, #1
 8001b74:	409a      	lsls	r2, r3
 8001b76:	0013      	movs	r3, r2
 8001b78:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b7a:	6839      	ldr	r1, [r7, #0]
 8001b7c:	4835      	ldr	r0, [pc, #212]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b7e:	f7fe fabf 	bl	8000100 <__udivsi3>
 8001b82:	0003      	movs	r3, r0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	e05d      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b88:	4b31      	ldr	r3, [pc, #196]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2238      	movs	r2, #56	; 0x38
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d102      	bne.n	8001b9a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b94:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	e054      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b9a:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2238      	movs	r2, #56	; 0x38
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	2b10      	cmp	r3, #16
 8001ba4:	d138      	bne.n	8001c18 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001ba6:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	2203      	movs	r2, #3
 8001bac:	4013      	ands	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bb0:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	091b      	lsrs	r3, r3, #4
 8001bb6:	2207      	movs	r2, #7
 8001bb8:	4013      	ands	r3, r2
 8001bba:	3301      	adds	r3, #1
 8001bbc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d10d      	bne.n	8001be0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	4824      	ldr	r0, [pc, #144]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x100>)
 8001bc8:	f7fe fa9a 	bl	8000100 <__udivsi3>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	0019      	movs	r1, r3
 8001bd0:	4b1f      	ldr	r3, [pc, #124]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	227f      	movs	r2, #127	; 0x7f
 8001bd8:	4013      	ands	r3, r2
 8001bda:	434b      	muls	r3, r1
 8001bdc:	617b      	str	r3, [r7, #20]
        break;
 8001bde:	e00d      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001be0:	68b9      	ldr	r1, [r7, #8]
 8001be2:	481c      	ldr	r0, [pc, #112]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001be4:	f7fe fa8c 	bl	8000100 <__udivsi3>
 8001be8:	0003      	movs	r3, r0
 8001bea:	0019      	movs	r1, r3
 8001bec:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	0a1b      	lsrs	r3, r3, #8
 8001bf2:	227f      	movs	r2, #127	; 0x7f
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	434b      	muls	r3, r1
 8001bf8:	617b      	str	r3, [r7, #20]
        break;
 8001bfa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001bfc:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	0f5b      	lsrs	r3, r3, #29
 8001c02:	2207      	movs	r2, #7
 8001c04:	4013      	ands	r3, r2
 8001c06:	3301      	adds	r3, #1
 8001c08:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	6978      	ldr	r0, [r7, #20]
 8001c0e:	f7fe fa77 	bl	8000100 <__udivsi3>
 8001c12:	0003      	movs	r3, r0
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	e015      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c18:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2238      	movs	r2, #56	; 0x38
 8001c1e:	4013      	ands	r3, r2
 8001c20:	2b20      	cmp	r3, #32
 8001c22:	d103      	bne.n	8001c2c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	021b      	lsls	r3, r3, #8
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	e00b      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2238      	movs	r2, #56	; 0x38
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b18      	cmp	r3, #24
 8001c36:	d103      	bne.n	8001c40 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c38:	23fa      	movs	r3, #250	; 0xfa
 8001c3a:	01db      	lsls	r3, r3, #7
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	e001      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c44:	693b      	ldr	r3, [r7, #16]
}
 8001c46:	0018      	movs	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	b006      	add	sp, #24
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	40021000 	.word	0x40021000
 8001c54:	00f42400 	.word	0x00f42400
 8001c58:	007a1200 	.word	0x007a1200

08001c5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c60:	4b02      	ldr	r3, [pc, #8]	; (8001c6c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	0018      	movs	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	20000000 	.word	0x20000000

08001c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c70:	b5b0      	push	{r4, r5, r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001c74:	f7ff fff2 	bl	8001c5c <HAL_RCC_GetHCLKFreq>
 8001c78:	0004      	movs	r4, r0
 8001c7a:	f7ff fb49 	bl	8001310 <LL_RCC_GetAPB1Prescaler>
 8001c7e:	0003      	movs	r3, r0
 8001c80:	0b1a      	lsrs	r2, r3, #12
 8001c82:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c84:	0092      	lsls	r2, r2, #2
 8001c86:	58d3      	ldr	r3, [r2, r3]
 8001c88:	221f      	movs	r2, #31
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	40dc      	lsrs	r4, r3
 8001c8e:	0023      	movs	r3, r4
}
 8001c90:	0018      	movs	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bdb0      	pop	{r4, r5, r7, pc}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	08003178 	.word	0x08003178

08001c9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001ca4:	2313      	movs	r3, #19
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cac:	2312      	movs	r3, #18
 8001cae:	18fb      	adds	r3, r7, r3
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	029b      	lsls	r3, r3, #10
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d100      	bne.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001cc0:	e0a3      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cc2:	2011      	movs	r0, #17
 8001cc4:	183b      	adds	r3, r7, r0
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cca:	4b86      	ldr	r3, [pc, #536]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ccc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	055b      	lsls	r3, r3, #21
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d110      	bne.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd6:	4b83      	ldr	r3, [pc, #524]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cda:	4b82      	ldr	r3, [pc, #520]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cdc:	2180      	movs	r1, #128	; 0x80
 8001cde:	0549      	lsls	r1, r1, #21
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ce4:	4b7f      	ldr	r3, [pc, #508]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	055b      	lsls	r3, r3, #21
 8001cec:	4013      	ands	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cf2:	183b      	adds	r3, r7, r0
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cf8:	4b7b      	ldr	r3, [pc, #492]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b7a      	ldr	r3, [pc, #488]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001cfe:	2180      	movs	r1, #128	; 0x80
 8001d00:	0049      	lsls	r1, r1, #1
 8001d02:	430a      	orrs	r2, r1
 8001d04:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d06:	f7fe fe5f 	bl	80009c8 <HAL_GetTick>
 8001d0a:	0003      	movs	r3, r0
 8001d0c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d0e:	e00b      	b.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d10:	f7fe fe5a 	bl	80009c8 <HAL_GetTick>
 8001d14:	0002      	movs	r2, r0
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d904      	bls.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001d1e:	2313      	movs	r3, #19
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	2203      	movs	r2, #3
 8001d24:	701a      	strb	r2, [r3, #0]
        break;
 8001d26:	e005      	b.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d28:	4b6f      	ldr	r3, [pc, #444]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	4013      	ands	r3, r2
 8001d32:	d0ed      	beq.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001d34:	2313      	movs	r3, #19
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d154      	bne.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d3e:	4b69      	ldr	r3, [pc, #420]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d42:	23c0      	movs	r3, #192	; 0xc0
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4013      	ands	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d019      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d014      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d5a:	4b62      	ldr	r3, [pc, #392]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5e:	4a63      	ldr	r2, [pc, #396]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d64:	4b5f      	ldr	r3, [pc, #380]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d68:	4b5e      	ldr	r3, [pc, #376]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d6a:	2180      	movs	r1, #128	; 0x80
 8001d6c:	0249      	lsls	r1, r1, #9
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d72:	4b5c      	ldr	r3, [pc, #368]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d76:	4b5b      	ldr	r3, [pc, #364]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d78:	495d      	ldr	r1, [pc, #372]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001d7a:	400a      	ands	r2, r1
 8001d7c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d7e:	4b59      	ldr	r3, [pc, #356]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	2201      	movs	r2, #1
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d016      	beq.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8c:	f7fe fe1c 	bl	80009c8 <HAL_GetTick>
 8001d90:	0003      	movs	r3, r0
 8001d92:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d94:	e00c      	b.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d96:	f7fe fe17 	bl	80009c8 <HAL_GetTick>
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	4a54      	ldr	r2, [pc, #336]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d904      	bls.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001da6:	2313      	movs	r3, #19
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	2203      	movs	r2, #3
 8001dac:	701a      	strb	r2, [r3, #0]
            break;
 8001dae:	e004      	b.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001db0:	4b4c      	ldr	r3, [pc, #304]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db4:	2202      	movs	r2, #2
 8001db6:	4013      	ands	r3, r2
 8001db8:	d0ed      	beq.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001dba:	2313      	movs	r3, #19
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10a      	bne.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dc4:	4b47      	ldr	r3, [pc, #284]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc8:	4a48      	ldr	r2, [pc, #288]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	0019      	movs	r1, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	699a      	ldr	r2, [r3, #24]
 8001dd2:	4b44      	ldr	r3, [pc, #272]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dd8:	e00c      	b.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001dda:	2312      	movs	r3, #18
 8001ddc:	18fb      	adds	r3, r7, r3
 8001dde:	2213      	movs	r2, #19
 8001de0:	18ba      	adds	r2, r7, r2
 8001de2:	7812      	ldrb	r2, [r2, #0]
 8001de4:	701a      	strb	r2, [r3, #0]
 8001de6:	e005      	b.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001de8:	2312      	movs	r3, #18
 8001dea:	18fb      	adds	r3, r7, r3
 8001dec:	2213      	movs	r2, #19
 8001dee:	18ba      	adds	r2, r7, r2
 8001df0:	7812      	ldrb	r2, [r2, #0]
 8001df2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001df4:	2311      	movs	r3, #17
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d105      	bne.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dfe:	4b39      	ldr	r3, [pc, #228]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e02:	4b38      	ldr	r3, [pc, #224]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e04:	493c      	ldr	r1, [pc, #240]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001e06:	400a      	ands	r2, r1
 8001e08:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	4013      	ands	r3, r2
 8001e12:	d009      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e14:	4b33      	ldr	r3, [pc, #204]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e18:	2203      	movs	r2, #3
 8001e1a:	4393      	bics	r3, r2
 8001e1c:	0019      	movs	r1, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	4b30      	ldr	r3, [pc, #192]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e24:	430a      	orrs	r2, r1
 8001e26:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d009      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e32:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e36:	220c      	movs	r2, #12
 8001e38:	4393      	bics	r3, r2
 8001e3a:	0019      	movs	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e42:	430a      	orrs	r2, r1
 8001e44:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d009      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e50:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e54:	4a29      	ldr	r2, [pc, #164]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	0019      	movs	r1, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e60:	430a      	orrs	r2, r1
 8001e62:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	01db      	lsls	r3, r3, #7
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d015      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e70:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	0899      	lsrs	r1, r3, #2
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695a      	ldr	r2, [r3, #20]
 8001e7c:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695a      	ldr	r2, [r3, #20]
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	05db      	lsls	r3, r3, #23
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d106      	bne.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e8e:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e94:	2180      	movs	r1, #128	; 0x80
 8001e96:	0249      	lsls	r1, r1, #9
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	011b      	lsls	r3, r3, #4
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d016      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001ea8:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eac:	4a14      	ldr	r2, [pc, #80]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	0019      	movs	r1, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691a      	ldr	r2, [r3, #16]
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691a      	ldr	r2, [r3, #16]
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	01db      	lsls	r3, r3, #7
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d106      	bne.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ece:	2180      	movs	r1, #128	; 0x80
 8001ed0:	0249      	lsls	r1, r1, #9
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001ed6:	2312      	movs	r3, #18
 8001ed8:	18fb      	adds	r3, r7, r3
 8001eda:	781b      	ldrb	r3, [r3, #0]
}
 8001edc:	0018      	movs	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b006      	add	sp, #24
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40007000 	.word	0x40007000
 8001eec:	fffffcff 	.word	0xfffffcff
 8001ef0:	fffeffff 	.word	0xfffeffff
 8001ef4:	00001388 	.word	0x00001388
 8001ef8:	efffffff 	.word	0xefffffff
 8001efc:	ffffcfff 	.word	0xffffcfff
 8001f00:	ffff3fff 	.word	0xffff3fff

08001f04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e046      	b.n	8001fa4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2288      	movs	r2, #136	; 0x88
 8001f1a:	589b      	ldr	r3, [r3, r2]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d107      	bne.n	8001f30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2284      	movs	r2, #132	; 0x84
 8001f24:	2100      	movs	r1, #0
 8001f26:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f7fe fc12 	bl	8000754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2288      	movs	r2, #136	; 0x88
 8001f34:	2124      	movs	r1, #36	; 0x24
 8001f36:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2101      	movs	r1, #1
 8001f44:	438a      	bics	r2, r1
 8001f46:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	f000 fb72 	bl	8002634 <UART_SetConfig>
 8001f50:	0003      	movs	r3, r0
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e024      	b.n	8001fa4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	0018      	movs	r0, r3
 8001f66:	f000 fd09 	bl	800297c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	490d      	ldr	r1, [pc, #52]	; (8001fac <HAL_UART_Init+0xa8>)
 8001f76:	400a      	ands	r2, r1
 8001f78:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	212a      	movs	r1, #42	; 0x2a
 8001f86:	438a      	bics	r2, r1
 8001f88:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2101      	movs	r1, #1
 8001f96:	430a      	orrs	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f000 fda1 	bl	8002ae4 <UART_CheckIdleState>
 8001fa2:	0003      	movs	r3, r0
}
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b002      	add	sp, #8
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	ffffb7ff 	.word	0xffffb7ff

08001fb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fb0:	b5b0      	push	{r4, r5, r7, lr}
 8001fb2:	b0aa      	sub	sp, #168	; 0xa8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	22a4      	movs	r2, #164	; 0xa4
 8001fc0:	18b9      	adds	r1, r7, r2
 8001fc2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	20a0      	movs	r0, #160	; 0xa0
 8001fcc:	1839      	adds	r1, r7, r0
 8001fce:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	249c      	movs	r4, #156	; 0x9c
 8001fd8:	1939      	adds	r1, r7, r4
 8001fda:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001fdc:	0011      	movs	r1, r2
 8001fde:	18bb      	adds	r3, r7, r2
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4aa2      	ldr	r2, [pc, #648]	; (800226c <HAL_UART_IRQHandler+0x2bc>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2298      	movs	r2, #152	; 0x98
 8001fe8:	18bd      	adds	r5, r7, r2
 8001fea:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8001fec:	18bb      	adds	r3, r7, r2
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d11a      	bne.n	800202a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001ff4:	187b      	adds	r3, r7, r1
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d015      	beq.n	800202a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001ffe:	183b      	adds	r3, r7, r0
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2220      	movs	r2, #32
 8002004:	4013      	ands	r3, r2
 8002006:	d105      	bne.n	8002014 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002008:	193b      	adds	r3, r7, r4
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	2380      	movs	r3, #128	; 0x80
 800200e:	055b      	lsls	r3, r3, #21
 8002010:	4013      	ands	r3, r2
 8002012:	d00a      	beq.n	800202a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002018:	2b00      	cmp	r3, #0
 800201a:	d100      	bne.n	800201e <HAL_UART_IRQHandler+0x6e>
 800201c:	e2dc      	b.n	80025d8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	0010      	movs	r0, r2
 8002026:	4798      	blx	r3
      }
      return;
 8002028:	e2d6      	b.n	80025d8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800202a:	2398      	movs	r3, #152	; 0x98
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d100      	bne.n	8002036 <HAL_UART_IRQHandler+0x86>
 8002034:	e122      	b.n	800227c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002036:	239c      	movs	r3, #156	; 0x9c
 8002038:	18fb      	adds	r3, r7, r3
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a8c      	ldr	r2, [pc, #560]	; (8002270 <HAL_UART_IRQHandler+0x2c0>)
 800203e:	4013      	ands	r3, r2
 8002040:	d106      	bne.n	8002050 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002042:	23a0      	movs	r3, #160	; 0xa0
 8002044:	18fb      	adds	r3, r7, r3
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a8a      	ldr	r2, [pc, #552]	; (8002274 <HAL_UART_IRQHandler+0x2c4>)
 800204a:	4013      	ands	r3, r2
 800204c:	d100      	bne.n	8002050 <HAL_UART_IRQHandler+0xa0>
 800204e:	e115      	b.n	800227c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002050:	23a4      	movs	r3, #164	; 0xa4
 8002052:	18fb      	adds	r3, r7, r3
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2201      	movs	r2, #1
 8002058:	4013      	ands	r3, r2
 800205a:	d012      	beq.n	8002082 <HAL_UART_IRQHandler+0xd2>
 800205c:	23a0      	movs	r3, #160	; 0xa0
 800205e:	18fb      	adds	r3, r7, r3
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	2380      	movs	r3, #128	; 0x80
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4013      	ands	r3, r2
 8002068:	d00b      	beq.n	8002082 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2201      	movs	r2, #1
 8002070:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2290      	movs	r2, #144	; 0x90
 8002076:	589b      	ldr	r3, [r3, r2]
 8002078:	2201      	movs	r2, #1
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2190      	movs	r1, #144	; 0x90
 8002080:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002082:	23a4      	movs	r3, #164	; 0xa4
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2202      	movs	r2, #2
 800208a:	4013      	ands	r3, r2
 800208c:	d011      	beq.n	80020b2 <HAL_UART_IRQHandler+0x102>
 800208e:	239c      	movs	r3, #156	; 0x9c
 8002090:	18fb      	adds	r3, r7, r3
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2201      	movs	r2, #1
 8002096:	4013      	ands	r3, r2
 8002098:	d00b      	beq.n	80020b2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2202      	movs	r2, #2
 80020a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2290      	movs	r2, #144	; 0x90
 80020a6:	589b      	ldr	r3, [r3, r2]
 80020a8:	2204      	movs	r2, #4
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2190      	movs	r1, #144	; 0x90
 80020b0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80020b2:	23a4      	movs	r3, #164	; 0xa4
 80020b4:	18fb      	adds	r3, r7, r3
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2204      	movs	r2, #4
 80020ba:	4013      	ands	r3, r2
 80020bc:	d011      	beq.n	80020e2 <HAL_UART_IRQHandler+0x132>
 80020be:	239c      	movs	r3, #156	; 0x9c
 80020c0:	18fb      	adds	r3, r7, r3
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2201      	movs	r2, #1
 80020c6:	4013      	ands	r3, r2
 80020c8:	d00b      	beq.n	80020e2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2204      	movs	r2, #4
 80020d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2290      	movs	r2, #144	; 0x90
 80020d6:	589b      	ldr	r3, [r3, r2]
 80020d8:	2202      	movs	r2, #2
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2190      	movs	r1, #144	; 0x90
 80020e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80020e2:	23a4      	movs	r3, #164	; 0xa4
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2208      	movs	r2, #8
 80020ea:	4013      	ands	r3, r2
 80020ec:	d017      	beq.n	800211e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80020ee:	23a0      	movs	r3, #160	; 0xa0
 80020f0:	18fb      	adds	r3, r7, r3
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2220      	movs	r2, #32
 80020f6:	4013      	ands	r3, r2
 80020f8:	d105      	bne.n	8002106 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80020fa:	239c      	movs	r3, #156	; 0x9c
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a5b      	ldr	r2, [pc, #364]	; (8002270 <HAL_UART_IRQHandler+0x2c0>)
 8002102:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002104:	d00b      	beq.n	800211e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2208      	movs	r2, #8
 800210c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2290      	movs	r2, #144	; 0x90
 8002112:	589b      	ldr	r3, [r3, r2]
 8002114:	2208      	movs	r2, #8
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2190      	movs	r1, #144	; 0x90
 800211c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800211e:	23a4      	movs	r3, #164	; 0xa4
 8002120:	18fb      	adds	r3, r7, r3
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	4013      	ands	r3, r2
 800212a:	d013      	beq.n	8002154 <HAL_UART_IRQHandler+0x1a4>
 800212c:	23a0      	movs	r3, #160	; 0xa0
 800212e:	18fb      	adds	r3, r7, r3
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	04db      	lsls	r3, r3, #19
 8002136:	4013      	ands	r3, r2
 8002138:	d00c      	beq.n	8002154 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2280      	movs	r2, #128	; 0x80
 8002140:	0112      	lsls	r2, r2, #4
 8002142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2290      	movs	r2, #144	; 0x90
 8002148:	589b      	ldr	r3, [r3, r2]
 800214a:	2220      	movs	r2, #32
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2190      	movs	r1, #144	; 0x90
 8002152:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2290      	movs	r2, #144	; 0x90
 8002158:	589b      	ldr	r3, [r3, r2]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d100      	bne.n	8002160 <HAL_UART_IRQHandler+0x1b0>
 800215e:	e23d      	b.n	80025dc <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002160:	23a4      	movs	r3, #164	; 0xa4
 8002162:	18fb      	adds	r3, r7, r3
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2220      	movs	r2, #32
 8002168:	4013      	ands	r3, r2
 800216a:	d015      	beq.n	8002198 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800216c:	23a0      	movs	r3, #160	; 0xa0
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2220      	movs	r2, #32
 8002174:	4013      	ands	r3, r2
 8002176:	d106      	bne.n	8002186 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002178:	239c      	movs	r3, #156	; 0x9c
 800217a:	18fb      	adds	r3, r7, r3
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	055b      	lsls	r3, r3, #21
 8002182:	4013      	ands	r3, r2
 8002184:	d008      	beq.n	8002198 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800218a:	2b00      	cmp	r3, #0
 800218c:	d004      	beq.n	8002198 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	0010      	movs	r0, r2
 8002196:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2290      	movs	r2, #144	; 0x90
 800219c:	589b      	ldr	r3, [r3, r2]
 800219e:	2194      	movs	r1, #148	; 0x94
 80021a0:	187a      	adds	r2, r7, r1
 80021a2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2240      	movs	r2, #64	; 0x40
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b40      	cmp	r3, #64	; 0x40
 80021b0:	d004      	beq.n	80021bc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80021b2:	187b      	adds	r3, r7, r1
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2228      	movs	r2, #40	; 0x28
 80021b8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80021ba:	d04c      	beq.n	8002256 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	0018      	movs	r0, r3
 80021c0:	f000 fda6 	bl	8002d10 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2240      	movs	r2, #64	; 0x40
 80021cc:	4013      	ands	r3, r2
 80021ce:	2b40      	cmp	r3, #64	; 0x40
 80021d0:	d13c      	bne.n	800224c <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021d2:	f3ef 8310 	mrs	r3, PRIMASK
 80021d6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80021d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021da:	2090      	movs	r0, #144	; 0x90
 80021dc:	183a      	adds	r2, r7, r0
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	2301      	movs	r3, #1
 80021e2:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021e6:	f383 8810 	msr	PRIMASK, r3
}
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2140      	movs	r1, #64	; 0x40
 80021f8:	438a      	bics	r2, r1
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	183b      	adds	r3, r7, r0
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002202:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002204:	f383 8810 	msr	PRIMASK, r3
}
 8002208:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2280      	movs	r2, #128	; 0x80
 800220e:	589b      	ldr	r3, [r3, r2]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d016      	beq.n	8002242 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2280      	movs	r2, #128	; 0x80
 8002218:	589b      	ldr	r3, [r3, r2]
 800221a:	4a17      	ldr	r2, [pc, #92]	; (8002278 <HAL_UART_IRQHandler+0x2c8>)
 800221c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2280      	movs	r2, #128	; 0x80
 8002222:	589b      	ldr	r3, [r3, r2]
 8002224:	0018      	movs	r0, r3
 8002226:	f7fe fd19 	bl	8000c5c <HAL_DMA_Abort_IT>
 800222a:	1e03      	subs	r3, r0, #0
 800222c:	d01c      	beq.n	8002268 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2280      	movs	r2, #128	; 0x80
 8002232:	589b      	ldr	r3, [r3, r2]
 8002234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	2180      	movs	r1, #128	; 0x80
 800223a:	5852      	ldr	r2, [r2, r1]
 800223c:	0010      	movs	r0, r2
 800223e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002240:	e012      	b.n	8002268 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	0018      	movs	r0, r3
 8002246:	f000 f9e1 	bl	800260c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800224a:	e00d      	b.n	8002268 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	0018      	movs	r0, r3
 8002250:	f000 f9dc 	bl	800260c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002254:	e008      	b.n	8002268 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	0018      	movs	r0, r3
 800225a:	f000 f9d7 	bl	800260c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2290      	movs	r2, #144	; 0x90
 8002262:	2100      	movs	r1, #0
 8002264:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002266:	e1b9      	b.n	80025dc <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002268:	46c0      	nop			; (mov r8, r8)
    return;
 800226a:	e1b7      	b.n	80025dc <HAL_UART_IRQHandler+0x62c>
 800226c:	0000080f 	.word	0x0000080f
 8002270:	10000001 	.word	0x10000001
 8002274:	04000120 	.word	0x04000120
 8002278:	08002ddd 	.word	0x08002ddd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002280:	2b01      	cmp	r3, #1
 8002282:	d000      	beq.n	8002286 <HAL_UART_IRQHandler+0x2d6>
 8002284:	e13e      	b.n	8002504 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002286:	23a4      	movs	r3, #164	; 0xa4
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2210      	movs	r2, #16
 800228e:	4013      	ands	r3, r2
 8002290:	d100      	bne.n	8002294 <HAL_UART_IRQHandler+0x2e4>
 8002292:	e137      	b.n	8002504 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002294:	23a0      	movs	r3, #160	; 0xa0
 8002296:	18fb      	adds	r3, r7, r3
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2210      	movs	r2, #16
 800229c:	4013      	ands	r3, r2
 800229e:	d100      	bne.n	80022a2 <HAL_UART_IRQHandler+0x2f2>
 80022a0:	e130      	b.n	8002504 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2210      	movs	r2, #16
 80022a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2240      	movs	r2, #64	; 0x40
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b40      	cmp	r3, #64	; 0x40
 80022b6:	d000      	beq.n	80022ba <HAL_UART_IRQHandler+0x30a>
 80022b8:	e0a4      	b.n	8002404 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2280      	movs	r2, #128	; 0x80
 80022be:	589b      	ldr	r3, [r3, r2]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	217e      	movs	r1, #126	; 0x7e
 80022c6:	187b      	adds	r3, r7, r1
 80022c8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80022ca:	187b      	adds	r3, r7, r1
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d100      	bne.n	80022d4 <HAL_UART_IRQHandler+0x324>
 80022d2:	e185      	b.n	80025e0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	225c      	movs	r2, #92	; 0x5c
 80022d8:	5a9b      	ldrh	r3, [r3, r2]
 80022da:	187a      	adds	r2, r7, r1
 80022dc:	8812      	ldrh	r2, [r2, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d300      	bcc.n	80022e4 <HAL_UART_IRQHandler+0x334>
 80022e2:	e17d      	b.n	80025e0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	187a      	adds	r2, r7, r1
 80022e8:	215e      	movs	r1, #94	; 0x5e
 80022ea:	8812      	ldrh	r2, [r2, #0]
 80022ec:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2280      	movs	r2, #128	; 0x80
 80022f2:	589b      	ldr	r3, [r3, r2]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2220      	movs	r2, #32
 80022fa:	4013      	ands	r3, r2
 80022fc:	d170      	bne.n	80023e0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002302:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002306:	67bb      	str	r3, [r7, #120]	; 0x78
 8002308:	2301      	movs	r3, #1
 800230a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800230c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800230e:	f383 8810 	msr	PRIMASK, r3
}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	49b4      	ldr	r1, [pc, #720]	; (80025f0 <HAL_UART_IRQHandler+0x640>)
 8002320:	400a      	ands	r2, r1
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002326:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800232a:	f383 8810 	msr	PRIMASK, r3
}
 800232e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002330:	f3ef 8310 	mrs	r3, PRIMASK
 8002334:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002338:	677b      	str	r3, [r7, #116]	; 0x74
 800233a:	2301      	movs	r3, #1
 800233c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800233e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002340:	f383 8810 	msr	PRIMASK, r3
}
 8002344:	46c0      	nop			; (mov r8, r8)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2101      	movs	r1, #1
 8002352:	438a      	bics	r2, r1
 8002354:	609a      	str	r2, [r3, #8]
 8002356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002358:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800235a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800235c:	f383 8810 	msr	PRIMASK, r3
}
 8002360:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002362:	f3ef 8310 	mrs	r3, PRIMASK
 8002366:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002368:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800236a:	673b      	str	r3, [r7, #112]	; 0x70
 800236c:	2301      	movs	r3, #1
 800236e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002372:	f383 8810 	msr	PRIMASK, r3
}
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2140      	movs	r1, #64	; 0x40
 8002384:	438a      	bics	r2, r1
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800238a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800238c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800238e:	f383 8810 	msr	PRIMASK, r3
}
 8002392:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	228c      	movs	r2, #140	; 0x8c
 8002398:	2120      	movs	r1, #32
 800239a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023a2:	f3ef 8310 	mrs	r3, PRIMASK
 80023a6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80023a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023ac:	2301      	movs	r3, #1
 80023ae:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023b2:	f383 8810 	msr	PRIMASK, r3
}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2110      	movs	r1, #16
 80023c4:	438a      	bics	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ce:	f383 8810 	msr	PRIMASK, r3
}
 80023d2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2280      	movs	r2, #128	; 0x80
 80023d8:	589b      	ldr	r3, [r3, r2]
 80023da:	0018      	movs	r0, r3
 80023dc:	f7fe fbdc 	bl	8000b98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2202      	movs	r2, #2
 80023e4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	225c      	movs	r2, #92	; 0x5c
 80023ea:	5a9a      	ldrh	r2, [r3, r2]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	215e      	movs	r1, #94	; 0x5e
 80023f0:	5a5b      	ldrh	r3, [r3, r1]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	0011      	movs	r1, r2
 80023fc:	0018      	movs	r0, r3
 80023fe:	f000 f90d 	bl	800261c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002402:	e0ed      	b.n	80025e0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	225c      	movs	r2, #92	; 0x5c
 8002408:	5a99      	ldrh	r1, [r3, r2]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	225e      	movs	r2, #94	; 0x5e
 800240e:	5a9b      	ldrh	r3, [r3, r2]
 8002410:	b29a      	uxth	r2, r3
 8002412:	208e      	movs	r0, #142	; 0x8e
 8002414:	183b      	adds	r3, r7, r0
 8002416:	1a8a      	subs	r2, r1, r2
 8002418:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	225e      	movs	r2, #94	; 0x5e
 800241e:	5a9b      	ldrh	r3, [r3, r2]
 8002420:	b29b      	uxth	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d100      	bne.n	8002428 <HAL_UART_IRQHandler+0x478>
 8002426:	e0dd      	b.n	80025e4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002428:	183b      	adds	r3, r7, r0
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d100      	bne.n	8002432 <HAL_UART_IRQHandler+0x482>
 8002430:	e0d8      	b.n	80025e4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002432:	f3ef 8310 	mrs	r3, PRIMASK
 8002436:	60fb      	str	r3, [r7, #12]
  return(result);
 8002438:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800243a:	2488      	movs	r4, #136	; 0x88
 800243c:	193a      	adds	r2, r7, r4
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	2301      	movs	r3, #1
 8002442:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f383 8810 	msr	PRIMASK, r3
}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4967      	ldr	r1, [pc, #412]	; (80025f4 <HAL_UART_IRQHandler+0x644>)
 8002458:	400a      	ands	r2, r1
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	193b      	adds	r3, r7, r4
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f383 8810 	msr	PRIMASK, r3
}
 8002468:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800246a:	f3ef 8310 	mrs	r3, PRIMASK
 800246e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002470:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002472:	2484      	movs	r4, #132	; 0x84
 8002474:	193a      	adds	r2, r7, r4
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	2301      	movs	r3, #1
 800247a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f383 8810 	msr	PRIMASK, r3
}
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	495a      	ldr	r1, [pc, #360]	; (80025f8 <HAL_UART_IRQHandler+0x648>)
 8002490:	400a      	ands	r2, r1
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	193b      	adds	r3, r7, r4
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	f383 8810 	msr	PRIMASK, r3
}
 80024a0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	228c      	movs	r2, #140	; 0x8c
 80024a6:	2120      	movs	r1, #32
 80024a8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024b6:	f3ef 8310 	mrs	r3, PRIMASK
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024be:	2480      	movs	r4, #128	; 0x80
 80024c0:	193a      	adds	r2, r7, r4
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	2301      	movs	r3, #1
 80024c6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ca:	f383 8810 	msr	PRIMASK, r3
}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2110      	movs	r1, #16
 80024dc:	438a      	bics	r2, r1
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	193b      	adds	r3, r7, r4
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e8:	f383 8810 	msr	PRIMASK, r3
}
 80024ec:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2202      	movs	r2, #2
 80024f2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024f4:	183b      	adds	r3, r7, r0
 80024f6:	881a      	ldrh	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	0011      	movs	r1, r2
 80024fc:	0018      	movs	r0, r3
 80024fe:	f000 f88d 	bl	800261c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002502:	e06f      	b.n	80025e4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002504:	23a4      	movs	r3, #164	; 0xa4
 8002506:	18fb      	adds	r3, r7, r3
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	2380      	movs	r3, #128	; 0x80
 800250c:	035b      	lsls	r3, r3, #13
 800250e:	4013      	ands	r3, r2
 8002510:	d010      	beq.n	8002534 <HAL_UART_IRQHandler+0x584>
 8002512:	239c      	movs	r3, #156	; 0x9c
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	2380      	movs	r3, #128	; 0x80
 800251a:	03db      	lsls	r3, r3, #15
 800251c:	4013      	ands	r3, r2
 800251e:	d009      	beq.n	8002534 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2280      	movs	r2, #128	; 0x80
 8002526:	0352      	lsls	r2, r2, #13
 8002528:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	0018      	movs	r0, r3
 800252e:	f000 fc98 	bl	8002e62 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002532:	e05a      	b.n	80025ea <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002534:	23a4      	movs	r3, #164	; 0xa4
 8002536:	18fb      	adds	r3, r7, r3
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2280      	movs	r2, #128	; 0x80
 800253c:	4013      	ands	r3, r2
 800253e:	d016      	beq.n	800256e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002540:	23a0      	movs	r3, #160	; 0xa0
 8002542:	18fb      	adds	r3, r7, r3
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2280      	movs	r2, #128	; 0x80
 8002548:	4013      	ands	r3, r2
 800254a:	d106      	bne.n	800255a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800254c:	239c      	movs	r3, #156	; 0x9c
 800254e:	18fb      	adds	r3, r7, r3
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	041b      	lsls	r3, r3, #16
 8002556:	4013      	ands	r3, r2
 8002558:	d009      	beq.n	800256e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800255e:	2b00      	cmp	r3, #0
 8002560:	d042      	beq.n	80025e8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	0010      	movs	r0, r2
 800256a:	4798      	blx	r3
    }
    return;
 800256c:	e03c      	b.n	80025e8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800256e:	23a4      	movs	r3, #164	; 0xa4
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2240      	movs	r2, #64	; 0x40
 8002576:	4013      	ands	r3, r2
 8002578:	d00a      	beq.n	8002590 <HAL_UART_IRQHandler+0x5e0>
 800257a:	23a0      	movs	r3, #160	; 0xa0
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2240      	movs	r2, #64	; 0x40
 8002582:	4013      	ands	r3, r2
 8002584:	d004      	beq.n	8002590 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	0018      	movs	r0, r3
 800258a:	f000 fc3e 	bl	8002e0a <UART_EndTransmit_IT>
    return;
 800258e:	e02c      	b.n	80025ea <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002590:	23a4      	movs	r3, #164	; 0xa4
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	2380      	movs	r3, #128	; 0x80
 8002598:	041b      	lsls	r3, r3, #16
 800259a:	4013      	ands	r3, r2
 800259c:	d00b      	beq.n	80025b6 <HAL_UART_IRQHandler+0x606>
 800259e:	23a0      	movs	r3, #160	; 0xa0
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	05db      	lsls	r3, r3, #23
 80025a8:	4013      	ands	r3, r2
 80025aa:	d004      	beq.n	80025b6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	0018      	movs	r0, r3
 80025b0:	f000 fc67 	bl	8002e82 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80025b4:	e019      	b.n	80025ea <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80025b6:	23a4      	movs	r3, #164	; 0xa4
 80025b8:	18fb      	adds	r3, r7, r3
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	045b      	lsls	r3, r3, #17
 80025c0:	4013      	ands	r3, r2
 80025c2:	d012      	beq.n	80025ea <HAL_UART_IRQHandler+0x63a>
 80025c4:	23a0      	movs	r3, #160	; 0xa0
 80025c6:	18fb      	adds	r3, r7, r3
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	da0d      	bge.n	80025ea <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	0018      	movs	r0, r3
 80025d2:	f000 fc4e 	bl	8002e72 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80025d6:	e008      	b.n	80025ea <HAL_UART_IRQHandler+0x63a>
      return;
 80025d8:	46c0      	nop			; (mov r8, r8)
 80025da:	e006      	b.n	80025ea <HAL_UART_IRQHandler+0x63a>
    return;
 80025dc:	46c0      	nop			; (mov r8, r8)
 80025de:	e004      	b.n	80025ea <HAL_UART_IRQHandler+0x63a>
      return;
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	e002      	b.n	80025ea <HAL_UART_IRQHandler+0x63a>
      return;
 80025e4:	46c0      	nop			; (mov r8, r8)
 80025e6:	e000      	b.n	80025ea <HAL_UART_IRQHandler+0x63a>
    return;
 80025e8:	46c0      	nop			; (mov r8, r8)
  }
}
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b02a      	add	sp, #168	; 0xa8
 80025ee:	bdb0      	pop	{r4, r5, r7, pc}
 80025f0:	fffffeff 	.word	0xfffffeff
 80025f4:	fffffedf 	.word	0xfffffedf
 80025f8:	effffffe 	.word	0xeffffffe

080025fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002604:	46c0      	nop			; (mov r8, r8)
 8002606:	46bd      	mov	sp, r7
 8002608:	b002      	add	sp, #8
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002614:	46c0      	nop			; (mov r8, r8)
 8002616:	46bd      	mov	sp, r7
 8002618:	b002      	add	sp, #8
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	000a      	movs	r2, r1
 8002626:	1cbb      	adds	r3, r7, #2
 8002628:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	46bd      	mov	sp, r7
 800262e:	b002      	add	sp, #8
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800263c:	231a      	movs	r3, #26
 800263e:	18fb      	adds	r3, r7, r3
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	431a      	orrs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	4313      	orrs	r3, r2
 800265a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4abc      	ldr	r2, [pc, #752]	; (8002954 <UART_SetConfig+0x320>)
 8002664:	4013      	ands	r3, r2
 8002666:	0019      	movs	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	430a      	orrs	r2, r1
 8002670:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4ab7      	ldr	r2, [pc, #732]	; (8002958 <UART_SetConfig+0x324>)
 800267a:	4013      	ands	r3, r2
 800267c:	0019      	movs	r1, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	69fa      	ldr	r2, [r7, #28]
 8002696:	4313      	orrs	r3, r2
 8002698:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	4aae      	ldr	r2, [pc, #696]	; (800295c <UART_SetConfig+0x328>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	0019      	movs	r1, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	69fa      	ldr	r2, [r7, #28]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b6:	220f      	movs	r2, #15
 80026b8:	4393      	bics	r3, r2
 80026ba:	0019      	movs	r1, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4aa4      	ldr	r2, [pc, #656]	; (8002960 <UART_SetConfig+0x32c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d127      	bne.n	8002722 <UART_SetConfig+0xee>
 80026d2:	4ba4      	ldr	r3, [pc, #656]	; (8002964 <UART_SetConfig+0x330>)
 80026d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d6:	2203      	movs	r2, #3
 80026d8:	4013      	ands	r3, r2
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d017      	beq.n	800270e <UART_SetConfig+0xda>
 80026de:	d81b      	bhi.n	8002718 <UART_SetConfig+0xe4>
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d00a      	beq.n	80026fa <UART_SetConfig+0xc6>
 80026e4:	d818      	bhi.n	8002718 <UART_SetConfig+0xe4>
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <UART_SetConfig+0xbc>
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d00a      	beq.n	8002704 <UART_SetConfig+0xd0>
 80026ee:	e013      	b.n	8002718 <UART_SetConfig+0xe4>
 80026f0:	231b      	movs	r3, #27
 80026f2:	18fb      	adds	r3, r7, r3
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]
 80026f8:	e058      	b.n	80027ac <UART_SetConfig+0x178>
 80026fa:	231b      	movs	r3, #27
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	2202      	movs	r2, #2
 8002700:	701a      	strb	r2, [r3, #0]
 8002702:	e053      	b.n	80027ac <UART_SetConfig+0x178>
 8002704:	231b      	movs	r3, #27
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	2204      	movs	r2, #4
 800270a:	701a      	strb	r2, [r3, #0]
 800270c:	e04e      	b.n	80027ac <UART_SetConfig+0x178>
 800270e:	231b      	movs	r3, #27
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	2208      	movs	r2, #8
 8002714:	701a      	strb	r2, [r3, #0]
 8002716:	e049      	b.n	80027ac <UART_SetConfig+0x178>
 8002718:	231b      	movs	r3, #27
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	2210      	movs	r2, #16
 800271e:	701a      	strb	r2, [r3, #0]
 8002720:	e044      	b.n	80027ac <UART_SetConfig+0x178>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a90      	ldr	r2, [pc, #576]	; (8002968 <UART_SetConfig+0x334>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d127      	bne.n	800277c <UART_SetConfig+0x148>
 800272c:	4b8d      	ldr	r3, [pc, #564]	; (8002964 <UART_SetConfig+0x330>)
 800272e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002730:	220c      	movs	r2, #12
 8002732:	4013      	ands	r3, r2
 8002734:	2b0c      	cmp	r3, #12
 8002736:	d017      	beq.n	8002768 <UART_SetConfig+0x134>
 8002738:	d81b      	bhi.n	8002772 <UART_SetConfig+0x13e>
 800273a:	2b08      	cmp	r3, #8
 800273c:	d00a      	beq.n	8002754 <UART_SetConfig+0x120>
 800273e:	d818      	bhi.n	8002772 <UART_SetConfig+0x13e>
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <UART_SetConfig+0x116>
 8002744:	2b04      	cmp	r3, #4
 8002746:	d00a      	beq.n	800275e <UART_SetConfig+0x12a>
 8002748:	e013      	b.n	8002772 <UART_SetConfig+0x13e>
 800274a:	231b      	movs	r3, #27
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]
 8002752:	e02b      	b.n	80027ac <UART_SetConfig+0x178>
 8002754:	231b      	movs	r3, #27
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	2202      	movs	r2, #2
 800275a:	701a      	strb	r2, [r3, #0]
 800275c:	e026      	b.n	80027ac <UART_SetConfig+0x178>
 800275e:	231b      	movs	r3, #27
 8002760:	18fb      	adds	r3, r7, r3
 8002762:	2204      	movs	r2, #4
 8002764:	701a      	strb	r2, [r3, #0]
 8002766:	e021      	b.n	80027ac <UART_SetConfig+0x178>
 8002768:	231b      	movs	r3, #27
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	2208      	movs	r2, #8
 800276e:	701a      	strb	r2, [r3, #0]
 8002770:	e01c      	b.n	80027ac <UART_SetConfig+0x178>
 8002772:	231b      	movs	r3, #27
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	2210      	movs	r2, #16
 8002778:	701a      	strb	r2, [r3, #0]
 800277a:	e017      	b.n	80027ac <UART_SetConfig+0x178>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a7a      	ldr	r2, [pc, #488]	; (800296c <UART_SetConfig+0x338>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d104      	bne.n	8002790 <UART_SetConfig+0x15c>
 8002786:	231b      	movs	r3, #27
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
 800278e:	e00d      	b.n	80027ac <UART_SetConfig+0x178>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a76      	ldr	r2, [pc, #472]	; (8002970 <UART_SetConfig+0x33c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d104      	bne.n	80027a4 <UART_SetConfig+0x170>
 800279a:	231b      	movs	r3, #27
 800279c:	18fb      	adds	r3, r7, r3
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
 80027a2:	e003      	b.n	80027ac <UART_SetConfig+0x178>
 80027a4:	231b      	movs	r3, #27
 80027a6:	18fb      	adds	r3, r7, r3
 80027a8:	2210      	movs	r2, #16
 80027aa:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69da      	ldr	r2, [r3, #28]
 80027b0:	2380      	movs	r3, #128	; 0x80
 80027b2:	021b      	lsls	r3, r3, #8
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d000      	beq.n	80027ba <UART_SetConfig+0x186>
 80027b8:	e065      	b.n	8002886 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80027ba:	231b      	movs	r3, #27
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d015      	beq.n	80027f0 <UART_SetConfig+0x1bc>
 80027c4:	dc18      	bgt.n	80027f8 <UART_SetConfig+0x1c4>
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d00d      	beq.n	80027e6 <UART_SetConfig+0x1b2>
 80027ca:	dc15      	bgt.n	80027f8 <UART_SetConfig+0x1c4>
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <UART_SetConfig+0x1a2>
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d005      	beq.n	80027e0 <UART_SetConfig+0x1ac>
 80027d4:	e010      	b.n	80027f8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027d6:	f7ff fa4b 	bl	8001c70 <HAL_RCC_GetPCLK1Freq>
 80027da:	0003      	movs	r3, r0
 80027dc:	617b      	str	r3, [r7, #20]
        break;
 80027de:	e012      	b.n	8002806 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027e0:	4b64      	ldr	r3, [pc, #400]	; (8002974 <UART_SetConfig+0x340>)
 80027e2:	617b      	str	r3, [r7, #20]
        break;
 80027e4:	e00f      	b.n	8002806 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027e6:	f7ff f9b7 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 80027ea:	0003      	movs	r3, r0
 80027ec:	617b      	str	r3, [r7, #20]
        break;
 80027ee:	e00a      	b.n	8002806 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027f0:	2380      	movs	r3, #128	; 0x80
 80027f2:	021b      	lsls	r3, r3, #8
 80027f4:	617b      	str	r3, [r7, #20]
        break;
 80027f6:	e006      	b.n	8002806 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80027fc:	231a      	movs	r3, #26
 80027fe:	18fb      	adds	r3, r7, r3
 8002800:	2201      	movs	r2, #1
 8002802:	701a      	strb	r2, [r3, #0]
        break;
 8002804:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d100      	bne.n	800280e <UART_SetConfig+0x1da>
 800280c:	e08d      	b.n	800292a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002812:	4b59      	ldr	r3, [pc, #356]	; (8002978 <UART_SetConfig+0x344>)
 8002814:	0052      	lsls	r2, r2, #1
 8002816:	5ad3      	ldrh	r3, [r2, r3]
 8002818:	0019      	movs	r1, r3
 800281a:	6978      	ldr	r0, [r7, #20]
 800281c:	f7fd fc70 	bl	8000100 <__udivsi3>
 8002820:	0003      	movs	r3, r0
 8002822:	005a      	lsls	r2, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	085b      	lsrs	r3, r3, #1
 800282a:	18d2      	adds	r2, r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	0019      	movs	r1, r3
 8002832:	0010      	movs	r0, r2
 8002834:	f7fd fc64 	bl	8000100 <__udivsi3>
 8002838:	0003      	movs	r3, r0
 800283a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	2b0f      	cmp	r3, #15
 8002840:	d91c      	bls.n	800287c <UART_SetConfig+0x248>
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	025b      	lsls	r3, r3, #9
 8002848:	429a      	cmp	r2, r3
 800284a:	d217      	bcs.n	800287c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	b29a      	uxth	r2, r3
 8002850:	200e      	movs	r0, #14
 8002852:	183b      	adds	r3, r7, r0
 8002854:	210f      	movs	r1, #15
 8002856:	438a      	bics	r2, r1
 8002858:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	085b      	lsrs	r3, r3, #1
 800285e:	b29b      	uxth	r3, r3
 8002860:	2207      	movs	r2, #7
 8002862:	4013      	ands	r3, r2
 8002864:	b299      	uxth	r1, r3
 8002866:	183b      	adds	r3, r7, r0
 8002868:	183a      	adds	r2, r7, r0
 800286a:	8812      	ldrh	r2, [r2, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	183a      	adds	r2, r7, r0
 8002876:	8812      	ldrh	r2, [r2, #0]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	e056      	b.n	800292a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800287c:	231a      	movs	r3, #26
 800287e:	18fb      	adds	r3, r7, r3
 8002880:	2201      	movs	r2, #1
 8002882:	701a      	strb	r2, [r3, #0]
 8002884:	e051      	b.n	800292a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002886:	231b      	movs	r3, #27
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b08      	cmp	r3, #8
 800288e:	d015      	beq.n	80028bc <UART_SetConfig+0x288>
 8002890:	dc18      	bgt.n	80028c4 <UART_SetConfig+0x290>
 8002892:	2b04      	cmp	r3, #4
 8002894:	d00d      	beq.n	80028b2 <UART_SetConfig+0x27e>
 8002896:	dc15      	bgt.n	80028c4 <UART_SetConfig+0x290>
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <UART_SetConfig+0x26e>
 800289c:	2b02      	cmp	r3, #2
 800289e:	d005      	beq.n	80028ac <UART_SetConfig+0x278>
 80028a0:	e010      	b.n	80028c4 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028a2:	f7ff f9e5 	bl	8001c70 <HAL_RCC_GetPCLK1Freq>
 80028a6:	0003      	movs	r3, r0
 80028a8:	617b      	str	r3, [r7, #20]
        break;
 80028aa:	e012      	b.n	80028d2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028ac:	4b31      	ldr	r3, [pc, #196]	; (8002974 <UART_SetConfig+0x340>)
 80028ae:	617b      	str	r3, [r7, #20]
        break;
 80028b0:	e00f      	b.n	80028d2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028b2:	f7ff f951 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 80028b6:	0003      	movs	r3, r0
 80028b8:	617b      	str	r3, [r7, #20]
        break;
 80028ba:	e00a      	b.n	80028d2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028bc:	2380      	movs	r3, #128	; 0x80
 80028be:	021b      	lsls	r3, r3, #8
 80028c0:	617b      	str	r3, [r7, #20]
        break;
 80028c2:	e006      	b.n	80028d2 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80028c8:	231a      	movs	r3, #26
 80028ca:	18fb      	adds	r3, r7, r3
 80028cc:	2201      	movs	r2, #1
 80028ce:	701a      	strb	r2, [r3, #0]
        break;
 80028d0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d028      	beq.n	800292a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028dc:	4b26      	ldr	r3, [pc, #152]	; (8002978 <UART_SetConfig+0x344>)
 80028de:	0052      	lsls	r2, r2, #1
 80028e0:	5ad3      	ldrh	r3, [r2, r3]
 80028e2:	0019      	movs	r1, r3
 80028e4:	6978      	ldr	r0, [r7, #20]
 80028e6:	f7fd fc0b 	bl	8000100 <__udivsi3>
 80028ea:	0003      	movs	r3, r0
 80028ec:	001a      	movs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	085b      	lsrs	r3, r3, #1
 80028f4:	18d2      	adds	r2, r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	0019      	movs	r1, r3
 80028fc:	0010      	movs	r0, r2
 80028fe:	f7fd fbff 	bl	8000100 <__udivsi3>
 8002902:	0003      	movs	r3, r0
 8002904:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	2b0f      	cmp	r3, #15
 800290a:	d90a      	bls.n	8002922 <UART_SetConfig+0x2ee>
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	2380      	movs	r3, #128	; 0x80
 8002910:	025b      	lsls	r3, r3, #9
 8002912:	429a      	cmp	r2, r3
 8002914:	d205      	bcs.n	8002922 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	b29a      	uxth	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	60da      	str	r2, [r3, #12]
 8002920:	e003      	b.n	800292a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002922:	231a      	movs	r3, #26
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	2201      	movs	r2, #1
 8002928:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	226a      	movs	r2, #106	; 0x6a
 800292e:	2101      	movs	r1, #1
 8002930:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2268      	movs	r2, #104	; 0x68
 8002936:	2101      	movs	r1, #1
 8002938:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002946:	231a      	movs	r3, #26
 8002948:	18fb      	adds	r3, r7, r3
 800294a:	781b      	ldrb	r3, [r3, #0]
}
 800294c:	0018      	movs	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	b008      	add	sp, #32
 8002952:	bd80      	pop	{r7, pc}
 8002954:	cfff69f3 	.word	0xcfff69f3
 8002958:	ffffcfff 	.word	0xffffcfff
 800295c:	11fff4ff 	.word	0x11fff4ff
 8002960:	40013800 	.word	0x40013800
 8002964:	40021000 	.word	0x40021000
 8002968:	40004400 	.word	0x40004400
 800296c:	40004800 	.word	0x40004800
 8002970:	40004c00 	.word	0x40004c00
 8002974:	00f42400 	.word	0x00f42400
 8002978:	08003198 	.word	0x08003198

0800297c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002988:	2201      	movs	r2, #1
 800298a:	4013      	ands	r3, r2
 800298c:	d00b      	beq.n	80029a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	4a4a      	ldr	r2, [pc, #296]	; (8002ac0 <UART_AdvFeatureConfig+0x144>)
 8002996:	4013      	ands	r3, r2
 8002998:	0019      	movs	r1, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029aa:	2202      	movs	r2, #2
 80029ac:	4013      	ands	r3, r2
 80029ae:	d00b      	beq.n	80029c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	4a43      	ldr	r2, [pc, #268]	; (8002ac4 <UART_AdvFeatureConfig+0x148>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	0019      	movs	r1, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029cc:	2204      	movs	r2, #4
 80029ce:	4013      	ands	r3, r2
 80029d0:	d00b      	beq.n	80029ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	4a3b      	ldr	r2, [pc, #236]	; (8002ac8 <UART_AdvFeatureConfig+0x14c>)
 80029da:	4013      	ands	r3, r2
 80029dc:	0019      	movs	r1, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	2208      	movs	r2, #8
 80029f0:	4013      	ands	r3, r2
 80029f2:	d00b      	beq.n	8002a0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	4a34      	ldr	r2, [pc, #208]	; (8002acc <UART_AdvFeatureConfig+0x150>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	0019      	movs	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a10:	2210      	movs	r2, #16
 8002a12:	4013      	ands	r3, r2
 8002a14:	d00b      	beq.n	8002a2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	4a2c      	ldr	r2, [pc, #176]	; (8002ad0 <UART_AdvFeatureConfig+0x154>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	0019      	movs	r1, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	2220      	movs	r2, #32
 8002a34:	4013      	ands	r3, r2
 8002a36:	d00b      	beq.n	8002a50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	4a25      	ldr	r2, [pc, #148]	; (8002ad4 <UART_AdvFeatureConfig+0x158>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	0019      	movs	r1, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	2240      	movs	r2, #64	; 0x40
 8002a56:	4013      	ands	r3, r2
 8002a58:	d01d      	beq.n	8002a96 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	4a1d      	ldr	r2, [pc, #116]	; (8002ad8 <UART_AdvFeatureConfig+0x15c>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	0019      	movs	r1, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a76:	2380      	movs	r3, #128	; 0x80
 8002a78:	035b      	lsls	r3, r3, #13
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d10b      	bne.n	8002a96 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	4a15      	ldr	r2, [pc, #84]	; (8002adc <UART_AdvFeatureConfig+0x160>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	0019      	movs	r1, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9a:	2280      	movs	r2, #128	; 0x80
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d00b      	beq.n	8002ab8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	4a0e      	ldr	r2, [pc, #56]	; (8002ae0 <UART_AdvFeatureConfig+0x164>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	0019      	movs	r1, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	605a      	str	r2, [r3, #4]
  }
}
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b002      	add	sp, #8
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	fffdffff 	.word	0xfffdffff
 8002ac4:	fffeffff 	.word	0xfffeffff
 8002ac8:	fffbffff 	.word	0xfffbffff
 8002acc:	ffff7fff 	.word	0xffff7fff
 8002ad0:	ffffefff 	.word	0xffffefff
 8002ad4:	ffffdfff 	.word	0xffffdfff
 8002ad8:	ffefffff 	.word	0xffefffff
 8002adc:	ff9fffff 	.word	0xff9fffff
 8002ae0:	fff7ffff 	.word	0xfff7ffff

08002ae4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af02      	add	r7, sp, #8
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2290      	movs	r2, #144	; 0x90
 8002af0:	2100      	movs	r1, #0
 8002af2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002af4:	f7fd ff68 	bl	80009c8 <HAL_GetTick>
 8002af8:	0003      	movs	r3, r0
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2208      	movs	r2, #8
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d10c      	bne.n	8002b24 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2280      	movs	r2, #128	; 0x80
 8002b0e:	0391      	lsls	r1, r2, #14
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	4a1a      	ldr	r2, [pc, #104]	; (8002b7c <UART_CheckIdleState+0x98>)
 8002b14:	9200      	str	r2, [sp, #0]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f000 f832 	bl	8002b80 <UART_WaitOnFlagUntilTimeout>
 8002b1c:	1e03      	subs	r3, r0, #0
 8002b1e:	d001      	beq.n	8002b24 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e026      	b.n	8002b72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2204      	movs	r2, #4
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d10c      	bne.n	8002b4c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2280      	movs	r2, #128	; 0x80
 8002b36:	03d1      	lsls	r1, r2, #15
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	4a10      	ldr	r2, [pc, #64]	; (8002b7c <UART_CheckIdleState+0x98>)
 8002b3c:	9200      	str	r2, [sp, #0]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f000 f81e 	bl	8002b80 <UART_WaitOnFlagUntilTimeout>
 8002b44:	1e03      	subs	r3, r0, #0
 8002b46:	d001      	beq.n	8002b4c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e012      	b.n	8002b72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2288      	movs	r2, #136	; 0x88
 8002b50:	2120      	movs	r1, #32
 8002b52:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	228c      	movs	r2, #140	; 0x8c
 8002b58:	2120      	movs	r1, #32
 8002b5a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2284      	movs	r2, #132	; 0x84
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	0018      	movs	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b004      	add	sp, #16
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	01ffffff 	.word	0x01ffffff

08002b80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b094      	sub	sp, #80	; 0x50
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	603b      	str	r3, [r7, #0]
 8002b8c:	1dfb      	adds	r3, r7, #7
 8002b8e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b90:	e0a7      	b.n	8002ce2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b94:	3301      	adds	r3, #1
 8002b96:	d100      	bne.n	8002b9a <UART_WaitOnFlagUntilTimeout+0x1a>
 8002b98:	e0a3      	b.n	8002ce2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b9a:	f7fd ff15 	bl	80009c8 <HAL_GetTick>
 8002b9e:	0002      	movs	r2, r0
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d302      	bcc.n	8002bb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002baa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d13f      	bne.n	8002c30 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8002bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002bb8:	647b      	str	r3, [r7, #68]	; 0x44
 8002bba:	2301      	movs	r3, #1
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc0:	f383 8810 	msr	PRIMASK, r3
}
 8002bc4:	46c0      	nop			; (mov r8, r8)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	494e      	ldr	r1, [pc, #312]	; (8002d0c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002bd2:	400a      	ands	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bd8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bdc:	f383 8810 	msr	PRIMASK, r3
}
 8002be0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002be2:	f3ef 8310 	mrs	r3, PRIMASK
 8002be6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bea:	643b      	str	r3, [r7, #64]	; 0x40
 8002bec:	2301      	movs	r3, #1
 8002bee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf2:	f383 8810 	msr	PRIMASK, r3
}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2101      	movs	r1, #1
 8002c04:	438a      	bics	r2, r1
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c0e:	f383 8810 	msr	PRIMASK, r3
}
 8002c12:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2288      	movs	r2, #136	; 0x88
 8002c18:	2120      	movs	r1, #32
 8002c1a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	228c      	movs	r2, #140	; 0x8c
 8002c20:	2120      	movs	r1, #32
 8002c22:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2284      	movs	r2, #132	; 0x84
 8002c28:	2100      	movs	r1, #0
 8002c2a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e069      	b.n	8002d04 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2204      	movs	r2, #4
 8002c38:	4013      	ands	r3, r2
 8002c3a:	d052      	beq.n	8002ce2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	69da      	ldr	r2, [r3, #28]
 8002c42:	2380      	movs	r3, #128	; 0x80
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	401a      	ands	r2, r3
 8002c48:	2380      	movs	r3, #128	; 0x80
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d148      	bne.n	8002ce2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2280      	movs	r2, #128	; 0x80
 8002c56:	0112      	lsls	r2, r2, #4
 8002c58:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c5e:	613b      	str	r3, [r7, #16]
  return(result);
 8002c60:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c64:	2301      	movs	r3, #1
 8002c66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f383 8810 	msr	PRIMASK, r3
}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4924      	ldr	r1, [pc, #144]	; (8002d0c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002c7c:	400a      	ands	r2, r1
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c82:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	f383 8810 	msr	PRIMASK, r3
}
 8002c8a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c8c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c90:	61fb      	str	r3, [r7, #28]
  return(result);
 8002c92:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c94:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c96:	2301      	movs	r3, #1
 8002c98:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	f383 8810 	msr	PRIMASK, r3
}
 8002ca0:	46c0      	nop			; (mov r8, r8)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2101      	movs	r1, #1
 8002cae:	438a      	bics	r2, r1
 8002cb0:	609a      	str	r2, [r3, #8]
 8002cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	f383 8810 	msr	PRIMASK, r3
}
 8002cbc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2288      	movs	r2, #136	; 0x88
 8002cc2:	2120      	movs	r1, #32
 8002cc4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	228c      	movs	r2, #140	; 0x8c
 8002cca:	2120      	movs	r1, #32
 8002ccc:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2290      	movs	r2, #144	; 0x90
 8002cd2:	2120      	movs	r1, #32
 8002cd4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2284      	movs	r2, #132	; 0x84
 8002cda:	2100      	movs	r1, #0
 8002cdc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e010      	b.n	8002d04 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	4013      	ands	r3, r2
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	425a      	negs	r2, r3
 8002cf2:	4153      	adcs	r3, r2
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	001a      	movs	r2, r3
 8002cf8:	1dfb      	adds	r3, r7, #7
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d100      	bne.n	8002d02 <UART_WaitOnFlagUntilTimeout+0x182>
 8002d00:	e747      	b.n	8002b92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	0018      	movs	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b014      	add	sp, #80	; 0x50
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	fffffe5f 	.word	0xfffffe5f

08002d10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08e      	sub	sp, #56	; 0x38
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d18:	f3ef 8310 	mrs	r3, PRIMASK
 8002d1c:	617b      	str	r3, [r7, #20]
  return(result);
 8002d1e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d20:	637b      	str	r3, [r7, #52]	; 0x34
 8002d22:	2301      	movs	r3, #1
 8002d24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	f383 8810 	msr	PRIMASK, r3
}
 8002d2c:	46c0      	nop			; (mov r8, r8)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4926      	ldr	r1, [pc, #152]	; (8002dd4 <UART_EndRxTransfer+0xc4>)
 8002d3a:	400a      	ands	r2, r1
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f383 8810 	msr	PRIMASK, r3
}
 8002d48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d4e:	623b      	str	r3, [r7, #32]
  return(result);
 8002d50:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002d52:	633b      	str	r3, [r7, #48]	; 0x30
 8002d54:	2301      	movs	r3, #1
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	f383 8810 	msr	PRIMASK, r3
}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	491b      	ldr	r1, [pc, #108]	; (8002dd8 <UART_EndRxTransfer+0xc8>)
 8002d6c:	400a      	ands	r2, r1
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d72:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d76:	f383 8810 	msr	PRIMASK, r3
}
 8002d7a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d118      	bne.n	8002db6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d84:	f3ef 8310 	mrs	r3, PRIMASK
 8002d88:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d8a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d8e:	2301      	movs	r3, #1
 8002d90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f383 8810 	msr	PRIMASK, r3
}
 8002d98:	46c0      	nop			; (mov r8, r8)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2110      	movs	r1, #16
 8002da6:	438a      	bics	r2, r1
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f383 8810 	msr	PRIMASK, r3
}
 8002db4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	228c      	movs	r2, #140	; 0x8c
 8002dba:	2120      	movs	r1, #32
 8002dbc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b00e      	add	sp, #56	; 0x38
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	fffffedf 	.word	0xfffffedf
 8002dd8:	effffffe 	.word	0xeffffffe

08002ddc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	225e      	movs	r2, #94	; 0x5e
 8002dee:	2100      	movs	r1, #0
 8002df0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2256      	movs	r2, #86	; 0x56
 8002df6:	2100      	movs	r1, #0
 8002df8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f7ff fc05 	bl	800260c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	46bd      	mov	sp, r7
 8002e06:	b004      	add	sp, #16
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b086      	sub	sp, #24
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e12:	f3ef 8310 	mrs	r3, PRIMASK
 8002e16:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e18:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f383 8810 	msr	PRIMASK, r3
}
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2140      	movs	r1, #64	; 0x40
 8002e34:	438a      	bics	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f383 8810 	msr	PRIMASK, r3
}
 8002e42:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2288      	movs	r2, #136	; 0x88
 8002e48:	2120      	movs	r1, #32
 8002e4a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	0018      	movs	r0, r3
 8002e56:	f7ff fbd1 	bl	80025fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b006      	add	sp, #24
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	b002      	add	sp, #8
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	b002      	add	sp, #8
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b002      	add	sp, #8
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2284      	movs	r2, #132	; 0x84
 8002ea0:	5c9b      	ldrb	r3, [r3, r2]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_UARTEx_DisableFifoMode+0x16>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e027      	b.n	8002efa <HAL_UARTEx_DisableFifoMode+0x66>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2284      	movs	r2, #132	; 0x84
 8002eae:	2101      	movs	r1, #1
 8002eb0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2288      	movs	r2, #136	; 0x88
 8002eb6:	2124      	movs	r1, #36	; 0x24
 8002eb8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2101      	movs	r1, #1
 8002ece:	438a      	bics	r2, r1
 8002ed0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	4a0b      	ldr	r2, [pc, #44]	; (8002f04 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2288      	movs	r2, #136	; 0x88
 8002eec:	2120      	movs	r1, #32
 8002eee:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2284      	movs	r2, #132	; 0x84
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	0018      	movs	r0, r3
 8002efc:	46bd      	mov	sp, r7
 8002efe:	b004      	add	sp, #16
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	dfffffff 	.word	0xdfffffff

08002f08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2284      	movs	r2, #132	; 0x84
 8002f16:	5c9b      	ldrb	r3, [r3, r2]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e02e      	b.n	8002f7e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2284      	movs	r2, #132	; 0x84
 8002f24:	2101      	movs	r1, #1
 8002f26:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2288      	movs	r2, #136	; 0x88
 8002f2c:	2124      	movs	r1, #36	; 0x24
 8002f2e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2101      	movs	r1, #1
 8002f44:	438a      	bics	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	08d9      	lsrs	r1, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f000 f854 	bl	800300c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2288      	movs	r2, #136	; 0x88
 8002f70:	2120      	movs	r1, #32
 8002f72:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2284      	movs	r2, #132	; 0x84
 8002f78:	2100      	movs	r1, #0
 8002f7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	0018      	movs	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b004      	add	sp, #16
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2284      	movs	r2, #132	; 0x84
 8002f96:	5c9b      	ldrb	r3, [r3, r2]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e02f      	b.n	8003000 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2284      	movs	r2, #132	; 0x84
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2288      	movs	r2, #136	; 0x88
 8002fac:	2124      	movs	r1, #36	; 0x24
 8002fae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	438a      	bics	r2, r1
 8002fc6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	4a0e      	ldr	r2, [pc, #56]	; (8003008 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	0019      	movs	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f000 f813 	bl	800300c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2288      	movs	r2, #136	; 0x88
 8002ff2:	2120      	movs	r1, #32
 8002ff4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2284      	movs	r2, #132	; 0x84
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	0018      	movs	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	b004      	add	sp, #16
 8003006:	bd80      	pop	{r7, pc}
 8003008:	f1ffffff 	.word	0xf1ffffff

0800300c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800300c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003018:	2b00      	cmp	r3, #0
 800301a:	d108      	bne.n	800302e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	226a      	movs	r2, #106	; 0x6a
 8003020:	2101      	movs	r1, #1
 8003022:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2268      	movs	r2, #104	; 0x68
 8003028:	2101      	movs	r1, #1
 800302a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800302c:	e043      	b.n	80030b6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800302e:	260f      	movs	r6, #15
 8003030:	19bb      	adds	r3, r7, r6
 8003032:	2208      	movs	r2, #8
 8003034:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003036:	200e      	movs	r0, #14
 8003038:	183b      	adds	r3, r7, r0
 800303a:	2208      	movs	r2, #8
 800303c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	0e5b      	lsrs	r3, r3, #25
 8003046:	b2da      	uxtb	r2, r3
 8003048:	240d      	movs	r4, #13
 800304a:	193b      	adds	r3, r7, r4
 800304c:	2107      	movs	r1, #7
 800304e:	400a      	ands	r2, r1
 8003050:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	0f5b      	lsrs	r3, r3, #29
 800305a:	b2da      	uxtb	r2, r3
 800305c:	250c      	movs	r5, #12
 800305e:	197b      	adds	r3, r7, r5
 8003060:	2107      	movs	r1, #7
 8003062:	400a      	ands	r2, r1
 8003064:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003066:	183b      	adds	r3, r7, r0
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	197a      	adds	r2, r7, r5
 800306c:	7812      	ldrb	r2, [r2, #0]
 800306e:	4914      	ldr	r1, [pc, #80]	; (80030c0 <UARTEx_SetNbDataToProcess+0xb4>)
 8003070:	5c8a      	ldrb	r2, [r1, r2]
 8003072:	435a      	muls	r2, r3
 8003074:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003076:	197b      	adds	r3, r7, r5
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	4a12      	ldr	r2, [pc, #72]	; (80030c4 <UARTEx_SetNbDataToProcess+0xb8>)
 800307c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800307e:	0019      	movs	r1, r3
 8003080:	f7fd f8c8 	bl	8000214 <__divsi3>
 8003084:	0003      	movs	r3, r0
 8003086:	b299      	uxth	r1, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	226a      	movs	r2, #106	; 0x6a
 800308c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800308e:	19bb      	adds	r3, r7, r6
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	193a      	adds	r2, r7, r4
 8003094:	7812      	ldrb	r2, [r2, #0]
 8003096:	490a      	ldr	r1, [pc, #40]	; (80030c0 <UARTEx_SetNbDataToProcess+0xb4>)
 8003098:	5c8a      	ldrb	r2, [r1, r2]
 800309a:	435a      	muls	r2, r3
 800309c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800309e:	193b      	adds	r3, r7, r4
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	4a08      	ldr	r2, [pc, #32]	; (80030c4 <UARTEx_SetNbDataToProcess+0xb8>)
 80030a4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80030a6:	0019      	movs	r1, r3
 80030a8:	f7fd f8b4 	bl	8000214 <__divsi3>
 80030ac:	0003      	movs	r3, r0
 80030ae:	b299      	uxth	r1, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2268      	movs	r2, #104	; 0x68
 80030b4:	5299      	strh	r1, [r3, r2]
}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b005      	add	sp, #20
 80030bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	080031b0 	.word	0x080031b0
 80030c4:	080031b8 	.word	0x080031b8

080030c8 <__libc_init_array>:
 80030c8:	b570      	push	{r4, r5, r6, lr}
 80030ca:	2600      	movs	r6, #0
 80030cc:	4d0c      	ldr	r5, [pc, #48]	; (8003100 <__libc_init_array+0x38>)
 80030ce:	4c0d      	ldr	r4, [pc, #52]	; (8003104 <__libc_init_array+0x3c>)
 80030d0:	1b64      	subs	r4, r4, r5
 80030d2:	10a4      	asrs	r4, r4, #2
 80030d4:	42a6      	cmp	r6, r4
 80030d6:	d109      	bne.n	80030ec <__libc_init_array+0x24>
 80030d8:	2600      	movs	r6, #0
 80030da:	f000 f821 	bl	8003120 <_init>
 80030de:	4d0a      	ldr	r5, [pc, #40]	; (8003108 <__libc_init_array+0x40>)
 80030e0:	4c0a      	ldr	r4, [pc, #40]	; (800310c <__libc_init_array+0x44>)
 80030e2:	1b64      	subs	r4, r4, r5
 80030e4:	10a4      	asrs	r4, r4, #2
 80030e6:	42a6      	cmp	r6, r4
 80030e8:	d105      	bne.n	80030f6 <__libc_init_array+0x2e>
 80030ea:	bd70      	pop	{r4, r5, r6, pc}
 80030ec:	00b3      	lsls	r3, r6, #2
 80030ee:	58eb      	ldr	r3, [r5, r3]
 80030f0:	4798      	blx	r3
 80030f2:	3601      	adds	r6, #1
 80030f4:	e7ee      	b.n	80030d4 <__libc_init_array+0xc>
 80030f6:	00b3      	lsls	r3, r6, #2
 80030f8:	58eb      	ldr	r3, [r5, r3]
 80030fa:	4798      	blx	r3
 80030fc:	3601      	adds	r6, #1
 80030fe:	e7f2      	b.n	80030e6 <__libc_init_array+0x1e>
 8003100:	080031c0 	.word	0x080031c0
 8003104:	080031c0 	.word	0x080031c0
 8003108:	080031c0 	.word	0x080031c0
 800310c:	080031c4 	.word	0x080031c4

08003110 <memset>:
 8003110:	0003      	movs	r3, r0
 8003112:	1882      	adds	r2, r0, r2
 8003114:	4293      	cmp	r3, r2
 8003116:	d100      	bne.n	800311a <memset+0xa>
 8003118:	4770      	bx	lr
 800311a:	7019      	strb	r1, [r3, #0]
 800311c:	3301      	adds	r3, #1
 800311e:	e7f9      	b.n	8003114 <memset+0x4>

08003120 <_init>:
 8003120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003126:	bc08      	pop	{r3}
 8003128:	469e      	mov	lr, r3
 800312a:	4770      	bx	lr

0800312c <_fini>:
 800312c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003132:	bc08      	pop	{r3}
 8003134:	469e      	mov	lr, r3
 8003136:	4770      	bx	lr
